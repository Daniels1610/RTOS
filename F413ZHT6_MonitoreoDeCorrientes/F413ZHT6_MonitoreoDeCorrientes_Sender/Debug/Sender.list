
Sender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c04  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006de4  08006de4  00016de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f0c  08006f0c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006f0c  08006f0c  00016f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f14  08006f14  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f14  08006f14  00016f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f18  08006f18  00016f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000411c  20000080  08006f9c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000419c  08006f9c  0002419c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169bc  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e4  00000000  00000000  00036a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00039d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  0003b0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247a5  00000000  00000000  0003c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019740  00000000  00000000  00060a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e309a  00000000  00000000  0007a1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015d277  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000550c  00000000  00000000  0015d2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006dcc 	.word	0x08006dcc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	08006dcc 	.word	0x08006dcc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4a07      	ldr	r2, [pc, #28]	; (8000600 <vApplicationGetIdleTaskMemory+0x2c>)
 80005e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	4a06      	ldr	r2, [pc, #24]	; (8000604 <vApplicationGetIdleTaskMemory+0x30>)
 80005ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	2000009c 	.word	0x2000009c
 8000604:	200000f0 	.word	0x200000f0

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	b08e      	sub	sp, #56	; 0x38
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fdd9 	bl	80011c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f855 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f957 	bl	80008c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800061a:	f000 f92b 	bl	8000874 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800061e:	f000 f8ad 	bl	800077c <MX_ADC1_Init>
  MX_UART5_Init();
 8000622:	f000 f8fd 	bl	8000820 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  xQueue1 = xQueueCreate(20, sizeof(char));
 8000626:	2200      	movs	r2, #0
 8000628:	2101      	movs	r1, #1
 800062a:	2014      	movs	r0, #20
 800062c:	f003 fe64 	bl	80042f8 <xQueueGenericCreate>
 8000630:	4603      	mov	r3, r0
 8000632:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <main+0x9c>)
 8000634:	6013      	str	r3, [r2, #0]
  xData_Available = xSemaphoreCreateBinary();
 8000636:	2203      	movs	r2, #3
 8000638:	2100      	movs	r1, #0
 800063a:	2001      	movs	r0, #1
 800063c:	f003 fe5c 	bl	80042f8 <xQueueGenericCreate>
 8000640:	4603      	mov	r3, r0
 8000642:	4a19      	ldr	r2, [pc, #100]	; (80006a8 <main+0xa0>)
 8000644:	6013      	str	r3, [r2, #0]
  xData_cont = xSemaphoreCreateBinary();
 8000646:	2203      	movs	r2, #3
 8000648:	2100      	movs	r1, #0
 800064a:	2001      	movs	r0, #1
 800064c:	f003 fe54 	bl	80042f8 <xQueueGenericCreate>
 8000650:	4603      	mov	r3, r0
 8000652:	4a16      	ldr	r2, [pc, #88]	; (80006ac <main+0xa4>)
 8000654:	6013      	str	r3, [r2, #0]
  //osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  //defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(ReadingTask, ReadingTaskHook, osPriorityNormal, 0, 128);
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <main+0xa8>)
 8000658:	f107 041c 	add.w	r4, r7, #28
 800065c:	461d      	mov	r5, r3
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadingTaskHandle = osThreadCreate(osThread(ReadingTask), NULL);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f003 fcd8 	bl	8004026 <osThreadCreate>
 8000676:	4603      	mov	r3, r0
 8000678:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <main+0xac>)
 800067a:	6013      	str	r3, [r2, #0]
  osThreadDef(UploadTask, UploadTaskHook, osPriorityNormal, 0, 128);
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <main+0xb0>)
 800067e:	463c      	mov	r4, r7
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UploadTaskHandle = osThreadCreate(osThread(UploadTask), NULL);
 800068e:	463b      	mov	r3, r7
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f003 fcc7 	bl	8004026 <osThreadCreate>
 8000698:	4603      	mov	r3, r0
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <main+0xb4>)
 800069c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800069e:	f003 fcbb 	bl	8004018 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <main+0x9a>
 80006a4:	200003c8 	.word	0x200003c8
 80006a8:	200003d0 	.word	0x200003d0
 80006ac:	200003d4 	.word	0x200003d4
 80006b0:	08006dfc 	.word	0x08006dfc
 80006b4:	200003c0 	.word	0x200003c0
 80006b8:	08006e18 	.word	0x08006e18
 80006bc:	200003c4 	.word	0x200003c4

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2234      	movs	r2, #52	; 0x34
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f005 ff14 	bl	80064fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <SystemClock_Config+0xb4>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <SystemClock_Config+0xb4>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SystemClock_Config+0xb4>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <SystemClock_Config+0xb8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <SystemClock_Config+0xb8>)
 800070a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <SystemClock_Config+0xb8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000728:	2300      	movs	r3, #0
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4618      	mov	r0, r3
 8000732:	f001 fe61 	bl	80023f8 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800073c:	f000 fb36 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	230f      	movs	r3, #15
 8000742:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f001 fc3a 	bl	8001fd4 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000766:	f000 fb21 	bl	8000dac <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	; 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000782:	463b      	mov	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_ADC1_Init+0x98>)
 8000790:	4a21      	ldr	r2, [pc, #132]	; (8000818 <MX_ADC1_Init+0x9c>)
 8000792:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_ADC1_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800079a:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <MX_ADC1_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007a0:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_ADC1_Init+0x98>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007a6:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ac:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_ADC1_Init+0x98>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_ADC1_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_ADC1_Init+0x98>)
 80007bc:	4a17      	ldr	r2, [pc, #92]	; (800081c <MX_ADC1_Init+0xa0>)
 80007be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_ADC1_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_ADC1_Init+0x98>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_ADC1_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_ADC1_Init+0x98>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007da:	480e      	ldr	r0, [pc, #56]	; (8000814 <MX_ADC1_Init+0x98>)
 80007dc:	f000 fd34 	bl	8001248 <HAL_ADC_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007e6:	f000 fae1 	bl	8000dac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007ea:	2303      	movs	r3, #3
 80007ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007ee:	2301      	movs	r3, #1
 80007f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f6:	463b      	mov	r3, r7
 80007f8:	4619      	mov	r1, r3
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <MX_ADC1_Init+0x98>)
 80007fc:	f000 feb4 	bl	8001568 <HAL_ADC_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000806:	f000 fad1 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200002f0 	.word	0x200002f0
 8000818:	40012000 	.word	0x40012000
 800081c:	0f000001 	.word	0x0f000001

08000820 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_UART5_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_UART5_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_UART5_Init+0x4c>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_UART5_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_UART5_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_UART5_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_UART5_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_UART5_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_UART5_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_UART5_Init+0x4c>)
 8000858:	f002 fb00 	bl	8002e5c <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000862:	f000 faa3 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000338 	.word	0x20000338
 8000870:	40005000 	.word	0x40005000

08000874 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <MX_USART3_UART_Init+0x50>)
 800087c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 80008ac:	f002 fad6 	bl	8002e5c <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008b6:	f000 fa79 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000037c 	.word	0x2000037c
 80008c4:	40004800 	.word	0x40004800

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_GPIO_Init+0x68>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a16      	ldr	r2, [pc, #88]	; (8000930 <MX_GPIO_Init+0x68>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_GPIO_Init+0x68>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <MX_GPIO_Init+0x68>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <MX_GPIO_Init+0x68>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <MX_GPIO_Init+0x68>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_GPIO_Init+0x68>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <MX_GPIO_Init+0x68>)
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_GPIO_Init+0x68>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800

08000934 <UploadTaskHook>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void UploadTaskHook(void const * argument)
{
 8000934:	b5b0      	push	{r4, r5, r7, lr}
 8000936:	b090      	sub	sp, #64	; 0x40
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		xSemaphoreTake( xData_Available,  portMAX_DELAY);
 800093c:	4b41      	ldr	r3, [pc, #260]	; (8000a44 <UploadTaskHook+0x110>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f04f 31ff 	mov.w	r1, #4294967295
 8000944:	4618      	mov	r0, r3
 8000946:	f003 ff0f 	bl	8004768 <xQueueSemaphoreTake>
		char msg2[10];
		sprintf(msg2, "%lu\r\n", uxQueueSpacesAvailable( xQueue1 ));
 800094a:	4b3f      	ldr	r3, [pc, #252]	; (8000a48 <UploadTaskHook+0x114>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f004 f816 	bl	8004980 <uxQueueSpacesAvailable>
 8000954:	4602      	mov	r2, r0
 8000956:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800095a:	493c      	ldr	r1, [pc, #240]	; (8000a4c <UploadTaskHook+0x118>)
 800095c:	4618      	mov	r0, r3
 800095e:	f005 fdd5 	bl	800650c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)msg2, strlen(msg2), 100);
 8000962:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fc5a 	bl	8000220 <strlen>
 800096c:	4603      	mov	r3, r0
 800096e:	b29a      	uxth	r2, r3
 8000970:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000974:	2364      	movs	r3, #100	; 0x64
 8000976:	4836      	ldr	r0, [pc, #216]	; (8000a50 <UploadTaskHook+0x11c>)
 8000978:	f002 fabd 	bl	8002ef6 <HAL_UART_Transmit>
		char msg3[5];
		sprintf(msg3, "%u\r\n", *myString);
 800097c:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <UploadTaskHook+0x120>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000988:	4933      	ldr	r1, [pc, #204]	; (8000a58 <UploadTaskHook+0x124>)
 800098a:	4618      	mov	r0, r3
 800098c:	f005 fdbe 	bl	800650c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)msg3, strlen(msg3), 100);
 8000990:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fc43 	bl	8000220 <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	b29a      	uxth	r2, r3
 800099e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80009a2:	2364      	movs	r3, #100	; 0x64
 80009a4:	482a      	ldr	r0, [pc, #168]	; (8000a50 <UploadTaskHook+0x11c>)
 80009a6:	f002 faa6 	bl	8002ef6 <HAL_UART_Transmit>
		//xQueueSend(xQueue1, msg3, portMAX_DELAY);
		for(int i = 0; i<sizeof(msg3); i++){
 80009aa:	2300      	movs	r3, #0
 80009ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80009ae:	e033      	b.n	8000a18 <UploadTaskHook+0xe4>
			if( xQueueSend( xQueue1, &msg3+i, ( TickType_t ) 0 ) != pdPASS )
 80009b0:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <UploadTaskHook+0x114>)
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80009b6:	4613      	mov	r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4413      	add	r3, r2
 80009bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009c0:	18d1      	adds	r1, r2, r3
 80009c2:	2300      	movs	r3, #0
 80009c4:	2200      	movs	r2, #0
 80009c6:	f003 fcf1 	bl	80043ac <xQueueGenericSend>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d013      	beq.n	80009f8 <UploadTaskHook+0xc4>
			{
				uint8_t buffer9[] = "Failed to Upload\r\n";
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <UploadTaskHook+0x128>)
 80009d2:	f107 0414 	add.w	r4, r7, #20
 80009d6:	461d      	mov	r5, r3
 80009d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009dc:	682b      	ldr	r3, [r5, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	8022      	strh	r2, [r4, #0]
 80009e2:	3402      	adds	r4, #2
 80009e4:	0c1b      	lsrs	r3, r3, #16
 80009e6:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart3, buffer9, sizeof(buffer9), 100);
 80009e8:	f107 0114 	add.w	r1, r7, #20
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2213      	movs	r2, #19
 80009f0:	4817      	ldr	r0, [pc, #92]	; (8000a50 <UploadTaskHook+0x11c>)
 80009f2:	f002 fa80 	bl	8002ef6 <HAL_UART_Transmit>
 80009f6:	e00c      	b.n	8000a12 <UploadTaskHook+0xde>
			} else {
				uint8_t buffer9[] = "Upload :)\r\n";
 80009f8:	4a19      	ldr	r2, [pc, #100]	; (8000a60 <UploadTaskHook+0x12c>)
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				HAL_UART_Transmit(&huart3, buffer9, sizeof(buffer9), 100);
 8000a04:	f107 0108 	add.w	r1, r7, #8
 8000a08:	2364      	movs	r3, #100	; 0x64
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	4810      	ldr	r0, [pc, #64]	; (8000a50 <UploadTaskHook+0x11c>)
 8000a0e:	f002 fa72 	bl	8002ef6 <HAL_UART_Transmit>
		for(int i = 0; i<sizeof(msg3); i++){
 8000a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a14:	3301      	adds	r3, #1
 8000a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	d9c8      	bls.n	80009b0 <UploadTaskHook+0x7c>
			}
		}
		if (uxQueueSpacesAvailable( xQueue1 ) == 0){
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <UploadTaskHook+0x114>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 ffac 	bl	8004980 <uxQueueSpacesAvailable>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d101      	bne.n	8000a32 <UploadTaskHook+0xfe>
			sending_function();
 8000a2e:	f000 f92b 	bl	8000c88 <sending_function>
		}
		xSemaphoreGive( xData_cont);
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <UploadTaskHook+0x130>)
 8000a34:	6818      	ldr	r0, [r3, #0]
 8000a36:	2300      	movs	r3, #0
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f003 fcb6 	bl	80043ac <xQueueGenericSend>
	{
 8000a40:	e77c      	b.n	800093c <UploadTaskHook+0x8>
 8000a42:	bf00      	nop
 8000a44:	200003d0 	.word	0x200003d0
 8000a48:	200003c8 	.word	0x200003c8
 8000a4c:	08006e34 	.word	0x08006e34
 8000a50:	2000037c 	.word	0x2000037c
 8000a54:	200003e4 	.word	0x200003e4
 8000a58:	08006e3c 	.word	0x08006e3c
 8000a5c:	08006e44 	.word	0x08006e44
 8000a60:	08006e58 	.word	0x08006e58
 8000a64:	200003d4 	.word	0x200003d4

08000a68 <ReadingTaskHook>:
	}
}

void ReadingTaskHook(void const * argument)
{
 8000a68:	b5b0      	push	{r4, r5, r7, lr}
 8000a6a:	b096      	sub	sp, #88	; 0x58
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	TickType_t tickCount;
		/* The cycle time period. The task will be unblocked at time (in ticks)*/
		TickType_t frequency = 5000;
 8000a70:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a74:	657b      	str	r3, [r7, #84]	; 0x54

		/* Get the current tck count */
		tickCount = xTaskGetTickCount();
 8000a76:	f004 fbe9 	bl	800524c <xTaskGetTickCount>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	64fb      	str	r3, [r7, #76]	; 0x4c

		uint8_t buffer[19] = "AT+BAND=868500000\r\n";
 8000a7e:	4b74      	ldr	r3, [pc, #464]	; (8000c50 <ReadingTaskHook+0x1e8>)
 8000a80:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000a84:	461d      	mov	r5, r3
 8000a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8a:	682b      	ldr	r3, [r5, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	8022      	strh	r2, [r4, #0]
 8000a90:	3402      	adds	r4, #2
 8000a92:	0c1b      	lsrs	r3, r3, #16
 8000a94:	7023      	strb	r3, [r4, #0]
		uint8_t buffer4[16] = "AT+NETWORKID=5\r\n";
 8000a96:	4b6f      	ldr	r3, [pc, #444]	; (8000c54 <ReadingTaskHook+0x1ec>)
 8000a98:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000a9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		uint8_t buffer5[16] = "AT+ADDRESS=101\r\n";
 8000aa2:	4b6d      	ldr	r3, [pc, #436]	; (8000c58 <ReadingTaskHook+0x1f0>)
 8000aa4:	f107 0418 	add.w	r4, r7, #24
 8000aa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		HAL_UART_Transmit(&huart5, buffer, sizeof(buffer), 100);
 8000aae:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000ab2:	2364      	movs	r3, #100	; 0x64
 8000ab4:	2213      	movs	r2, #19
 8000ab6:	4869      	ldr	r0, [pc, #420]	; (8000c5c <ReadingTaskHook+0x1f4>)
 8000ab8:	f002 fa1d 	bl	8002ef6 <HAL_UART_Transmit>

		HAL_StatusTypeDef status1 = HAL_UART_Receive(&huart5, buffer3, sizeof(buffer3), 1000);
 8000abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac0:	2205      	movs	r2, #5
 8000ac2:	4967      	ldr	r1, [pc, #412]	; (8000c60 <ReadingTaskHook+0x1f8>)
 8000ac4:	4865      	ldr	r0, [pc, #404]	; (8000c5c <ReadingTaskHook+0x1f4>)
 8000ac6:	f002 faa8 	bl	800301a <HAL_UART_Receive>
 8000aca:	4603      	mov	r3, r0
 8000acc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		if(status1 != HAL_OK){
 8000ad0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d006      	beq.n	8000ae6 <ReadingTaskHook+0x7e>
		   HAL_UART_Transmit(&huart3, whoops, sizeof(whoops), 100);
 8000ad8:	2364      	movs	r3, #100	; 0x64
 8000ada:	2209      	movs	r2, #9
 8000adc:	4961      	ldr	r1, [pc, #388]	; (8000c64 <ReadingTaskHook+0x1fc>)
 8000ade:	4862      	ldr	r0, [pc, #392]	; (8000c68 <ReadingTaskHook+0x200>)
 8000ae0:	f002 fa09 	bl	8002ef6 <HAL_UART_Transmit>
 8000ae4:	e005      	b.n	8000af2 <ReadingTaskHook+0x8a>
		}
		else{
		   HAL_UART_Transmit(&huart3, buffer3, sizeof(buffer3), 100);
 8000ae6:	2364      	movs	r3, #100	; 0x64
 8000ae8:	2205      	movs	r2, #5
 8000aea:	495d      	ldr	r1, [pc, #372]	; (8000c60 <ReadingTaskHook+0x1f8>)
 8000aec:	485e      	ldr	r0, [pc, #376]	; (8000c68 <ReadingTaskHook+0x200>)
 8000aee:	f002 fa02 	bl	8002ef6 <HAL_UART_Transmit>
		}

		vTaskDelayUntil( &tickCount, 1000 );
 8000af2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000af6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000afa:	4618      	mov	r0, r3
 8000afc:	f004 fa1e 	bl	8004f3c <vTaskDelayUntil>

		HAL_UART_Transmit(&huart5, buffer4, sizeof(buffer4), 100);
 8000b00:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b04:	2364      	movs	r3, #100	; 0x64
 8000b06:	2210      	movs	r2, #16
 8000b08:	4854      	ldr	r0, [pc, #336]	; (8000c5c <ReadingTaskHook+0x1f4>)
 8000b0a:	f002 f9f4 	bl	8002ef6 <HAL_UART_Transmit>

		HAL_StatusTypeDef status2 = HAL_UART_Receive(&huart5, buffer3, sizeof(buffer3), 1000);
 8000b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b12:	2205      	movs	r2, #5
 8000b14:	4952      	ldr	r1, [pc, #328]	; (8000c60 <ReadingTaskHook+0x1f8>)
 8000b16:	4851      	ldr	r0, [pc, #324]	; (8000c5c <ReadingTaskHook+0x1f4>)
 8000b18:	f002 fa7f 	bl	800301a <HAL_UART_Receive>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
		if(status2 != HAL_OK){
 8000b22:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d006      	beq.n	8000b38 <ReadingTaskHook+0xd0>
    	   HAL_UART_Transmit(&huart3, whoops, sizeof(whoops), 100);
 8000b2a:	2364      	movs	r3, #100	; 0x64
 8000b2c:	2209      	movs	r2, #9
 8000b2e:	494d      	ldr	r1, [pc, #308]	; (8000c64 <ReadingTaskHook+0x1fc>)
 8000b30:	484d      	ldr	r0, [pc, #308]	; (8000c68 <ReadingTaskHook+0x200>)
 8000b32:	f002 f9e0 	bl	8002ef6 <HAL_UART_Transmit>
 8000b36:	e005      	b.n	8000b44 <ReadingTaskHook+0xdc>
		}
		else{
		   HAL_UART_Transmit(&huart3, buffer3, sizeof(buffer3), 100);
 8000b38:	2364      	movs	r3, #100	; 0x64
 8000b3a:	2205      	movs	r2, #5
 8000b3c:	4948      	ldr	r1, [pc, #288]	; (8000c60 <ReadingTaskHook+0x1f8>)
 8000b3e:	484a      	ldr	r0, [pc, #296]	; (8000c68 <ReadingTaskHook+0x200>)
 8000b40:	f002 f9d9 	bl	8002ef6 <HAL_UART_Transmit>
		}

		vTaskDelayUntil( &tickCount, 1000 );
 8000b44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f004 f9f5 	bl	8004f3c <vTaskDelayUntil>

		HAL_UART_Transmit(&huart5, buffer5, sizeof(buffer5), 100);
 8000b52:	f107 0118 	add.w	r1, r7, #24
 8000b56:	2364      	movs	r3, #100	; 0x64
 8000b58:	2210      	movs	r2, #16
 8000b5a:	4840      	ldr	r0, [pc, #256]	; (8000c5c <ReadingTaskHook+0x1f4>)
 8000b5c:	f002 f9cb 	bl	8002ef6 <HAL_UART_Transmit>

   	    HAL_StatusTypeDef status4 = HAL_UART_Receive(&huart5, buffer3, sizeof(buffer3), 1000);
 8000b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b64:	2205      	movs	r2, #5
 8000b66:	493e      	ldr	r1, [pc, #248]	; (8000c60 <ReadingTaskHook+0x1f8>)
 8000b68:	483c      	ldr	r0, [pc, #240]	; (8000c5c <ReadingTaskHook+0x1f4>)
 8000b6a:	f002 fa56 	bl	800301a <HAL_UART_Receive>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
		if(status4 != HAL_OK){
 8000b74:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d006      	beq.n	8000b8a <ReadingTaskHook+0x122>
		   HAL_UART_Transmit(&huart3, whoops, sizeof(whoops), 100);
 8000b7c:	2364      	movs	r3, #100	; 0x64
 8000b7e:	2209      	movs	r2, #9
 8000b80:	4938      	ldr	r1, [pc, #224]	; (8000c64 <ReadingTaskHook+0x1fc>)
 8000b82:	4839      	ldr	r0, [pc, #228]	; (8000c68 <ReadingTaskHook+0x200>)
 8000b84:	f002 f9b7 	bl	8002ef6 <HAL_UART_Transmit>
 8000b88:	e005      	b.n	8000b96 <ReadingTaskHook+0x12e>
		}
		else{
		   HAL_UART_Transmit(&huart3, buffer3, sizeof(buffer3), 100);
 8000b8a:	2364      	movs	r3, #100	; 0x64
 8000b8c:	2205      	movs	r2, #5
 8000b8e:	4934      	ldr	r1, [pc, #208]	; (8000c60 <ReadingTaskHook+0x1f8>)
 8000b90:	4835      	ldr	r0, [pc, #212]	; (8000c68 <ReadingTaskHook+0x200>)
 8000b92:	f002 f9b0 	bl	8002ef6 <HAL_UART_Transmit>
		}

		vTaskDelayUntil( &tickCount, 1000 );
 8000b96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f004 f9cc 	bl	8004f3c <vTaskDelayUntil>

		for(;;)
		{
			uint8_t buffer1[] = "Reading\r\n";
 8000ba4:	4a31      	ldr	r2, [pc, #196]	; (8000c6c <ReadingTaskHook+0x204>)
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bac:	c303      	stmia	r3!, {r0, r1}
 8000bae:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, buffer1, sizeof(buffer1), 100);
 8000bb0:	f107 010c 	add.w	r1, r7, #12
 8000bb4:	2364      	movs	r3, #100	; 0x64
 8000bb6:	220a      	movs	r2, #10
 8000bb8:	482b      	ldr	r0, [pc, #172]	; (8000c68 <ReadingTaskHook+0x200>)
 8000bba:	f002 f99c 	bl	8002ef6 <HAL_UART_Transmit>
			HAL_ADC_Start(&hadc1);
 8000bbe:	482c      	ldr	r0, [pc, #176]	; (8000c70 <ReadingTaskHook+0x208>)
 8000bc0:	f000 fb86 	bl	80012d0 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc8:	4829      	ldr	r0, [pc, #164]	; (8000c70 <ReadingTaskHook+0x208>)
 8000bca:	f000 fc35 	bl	8001438 <HAL_ADC_PollForConversion>
			raw = HAL_ADC_GetValue(&hadc1);
 8000bce:	4828      	ldr	r0, [pc, #160]	; (8000c70 <ReadingTaskHook+0x208>)
 8000bd0:	f000 fcbd 	bl	800154e <HAL_ADC_GetValue>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <ReadingTaskHook+0x20c>)
 8000bda:	801a      	strh	r2, [r3, #0]

			if(raw < 60){
 8000bdc:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <ReadingTaskHook+0x20c>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	2b3b      	cmp	r3, #59	; 0x3b
 8000be2:	d80b      	bhi.n	8000bfc <ReadingTaskHook+0x194>
					  if (middle == 0){
 8000be4:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <ReadingTaskHook+0x210>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d103      	bne.n	8000bf4 <ReadingTaskHook+0x18c>
						  raw = 10;
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <ReadingTaskHook+0x20c>)
 8000bee:	220a      	movs	r2, #10
 8000bf0:	801a      	strh	r2, [r3, #0]
 8000bf2:	e014      	b.n	8000c1e <ReadingTaskHook+0x1b6>
					  } else {
						  raw = 40;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <ReadingTaskHook+0x20c>)
 8000bf6:	2228      	movs	r2, #40	; 0x28
 8000bf8:	801a      	strh	r2, [r3, #0]
 8000bfa:	e010      	b.n	8000c1e <ReadingTaskHook+0x1b6>
					  }
				  }
				  else{
					  if(raw < 135){
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <ReadingTaskHook+0x20c>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	2b86      	cmp	r3, #134	; 0x86
 8000c02:	d806      	bhi.n	8000c12 <ReadingTaskHook+0x1aa>
						  raw = 20;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <ReadingTaskHook+0x20c>)
 8000c06:	2214      	movs	r2, #20
 8000c08:	801a      	strh	r2, [r3, #0]
						  middle = 0;
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <ReadingTaskHook+0x210>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	e005      	b.n	8000c1e <ReadingTaskHook+0x1b6>
					  }
					  else {
						 raw = 30;
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <ReadingTaskHook+0x20c>)
 8000c14:	221e      	movs	r2, #30
 8000c16:	801a      	strh	r2, [r3, #0]
						 middle = 1;
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <ReadingTaskHook+0x210>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	601a      	str	r2, [r3, #0]
					  }
				  }
			myString=&raw;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <ReadingTaskHook+0x214>)
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <ReadingTaskHook+0x20c>)
 8000c22:	601a      	str	r2, [r3, #0]
			xSemaphoreGive(xData_Available);
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <ReadingTaskHook+0x218>)
 8000c26:	6818      	ldr	r0, [r3, #0]
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f003 fbbd 	bl	80043ac <xQueueGenericSend>
			xSemaphoreTake(xData_cont,  portMAX_DELAY);
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <ReadingTaskHook+0x21c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f003 fd94 	bl	8004768 <xQueueSemaphoreTake>
			vTaskDelayUntil( &tickCount, frequency );
 8000c40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000c46:	4618      	mov	r0, r3
 8000c48:	f004 f978 	bl	8004f3c <vTaskDelayUntil>
		{
 8000c4c:	e7aa      	b.n	8000ba4 <ReadingTaskHook+0x13c>
 8000c4e:	bf00      	nop
 8000c50:	08006e64 	.word	0x08006e64
 8000c54:	08006e78 	.word	0x08006e78
 8000c58:	08006e88 	.word	0x08006e88
 8000c5c:	20000338 	.word	0x20000338
 8000c60:	200003dc 	.word	0x200003dc
 8000c64:	20000000 	.word	0x20000000
 8000c68:	2000037c 	.word	0x2000037c
 8000c6c:	08006e98 	.word	0x08006e98
 8000c70:	200002f0 	.word	0x200002f0
 8000c74:	200003cc 	.word	0x200003cc
 8000c78:	200003d8 	.word	0x200003d8
 8000c7c:	200003e4 	.word	0x200003e4
 8000c80:	200003d0 	.word	0x200003d0
 8000c84:	200003d4 	.word	0x200003d4

08000c88 <sending_function>:
		}
}

void sending_function() {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b092      	sub	sp, #72	; 0x48
 8000c8c:	af00      	add	r7, sp, #0
	char msg[20];
	TickType_t tickCount;
	tickCount = xTaskGetTickCount();
 8000c8e:	f004 fadd 	bl	800524c <xTaskGetTickCount>
 8000c92:	4603      	mov	r3, r0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
	  /*uint8_t buffer3[5];
	  uint8_t whoops[] = "Whoops\r\n";*/

	for(int i = 0; i<4; i++){
 8000c96:	2300      	movs	r3, #0
 8000c98:	647b      	str	r3, [r7, #68]	; 0x44
 8000c9a:	e063      	b.n	8000d64 <sending_function+0xdc>
		xQueueReceive( xQueue1, &msg, ( TickType_t ) 0 );
 8000c9c:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <sending_function+0xec>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f003 fc7e 	bl	80045a8 <xQueueReceive>
		char buffer6[17];
		uint8_t buffer_long[20];
		sprintf(buffer6, "AT+SEND=102,3,%c\r\n", *msg);
 8000cac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4930      	ldr	r1, [pc, #192]	; (8000d78 <sending_function+0xf0>)
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f005 fc27 	bl	800650c <siprintf>
		HAL_UART_Transmit(&huart3, buffer6, sizeof(buffer6), 100);
 8000cbe:	f107 0114 	add.w	r1, r7, #20
 8000cc2:	2364      	movs	r3, #100	; 0x64
 8000cc4:	2211      	movs	r2, #17
 8000cc6:	482d      	ldr	r0, [pc, #180]	; (8000d7c <sending_function+0xf4>)
 8000cc8:	f002 f915 	bl	8002ef6 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart5, buffer6, sizeof(buffer6), 100);
 8000ccc:	f107 0114 	add.w	r1, r7, #20
 8000cd0:	2364      	movs	r3, #100	; 0x64
 8000cd2:	2211      	movs	r2, #17
 8000cd4:	482a      	ldr	r0, [pc, #168]	; (8000d80 <sending_function+0xf8>)
 8000cd6:	f002 f90e 	bl	8002ef6 <HAL_UART_Transmit>

		HAL_StatusTypeDef status1 = HAL_UART_Receive(&huart5, buffer_long, sizeof(buffer_long), 1000);
 8000cda:	4639      	mov	r1, r7
 8000cdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce0:	2214      	movs	r2, #20
 8000ce2:	4827      	ldr	r0, [pc, #156]	; (8000d80 <sending_function+0xf8>)
 8000ce4:	f002 f999 	bl	800301a <HAL_UART_Receive>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	    if(status1 != HAL_OK){
 8000cee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d006      	beq.n	8000d04 <sending_function+0x7c>
		   HAL_UART_Transmit(&huart3, whoops, sizeof(whoops), 100);
 8000cf6:	2364      	movs	r3, #100	; 0x64
 8000cf8:	2209      	movs	r2, #9
 8000cfa:	4922      	ldr	r1, [pc, #136]	; (8000d84 <sending_function+0xfc>)
 8000cfc:	481f      	ldr	r0, [pc, #124]	; (8000d7c <sending_function+0xf4>)
 8000cfe:	f002 f8fa 	bl	8002ef6 <HAL_UART_Transmit>
 8000d02:	e005      	b.n	8000d10 <sending_function+0x88>
	    }
	    else{
	       HAL_UART_Transmit(&huart3, buffer_long, sizeof(buffer_long), 100);
 8000d04:	4639      	mov	r1, r7
 8000d06:	2364      	movs	r3, #100	; 0x64
 8000d08:	2214      	movs	r2, #20
 8000d0a:	481c      	ldr	r0, [pc, #112]	; (8000d7c <sending_function+0xf4>)
 8000d0c:	f002 f8f3 	bl	8002ef6 <HAL_UART_Transmit>
	    }

	    vTaskDelayUntil( &tickCount, 1000 );
 8000d10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f004 f90f 	bl	8004f3c <vTaskDelayUntil>

		xQueueReceive( xQueue1, &msg, ( TickType_t ) 0 );
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <sending_function+0xec>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000d26:	2200      	movs	r2, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f003 fc3d 	bl	80045a8 <xQueueReceive>
		xQueueReceive( xQueue1, &msg, ( TickType_t ) 0 );
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <sending_function+0xec>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000d36:	2200      	movs	r2, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f003 fc35 	bl	80045a8 <xQueueReceive>
		xQueueReceive( xQueue1, &msg, ( TickType_t ) 0 );
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <sending_function+0xec>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000d46:	2200      	movs	r2, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f003 fc2d 	bl	80045a8 <xQueueReceive>
		xQueueReceive( xQueue1, &msg, ( TickType_t ) 0 );
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <sending_function+0xec>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000d56:	2200      	movs	r2, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f003 fc25 	bl	80045a8 <xQueueReceive>
	for(int i = 0; i<4; i++){
 8000d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d60:	3301      	adds	r3, #1
 8000d62:	647b      	str	r3, [r7, #68]	; 0x44
 8000d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	dd98      	ble.n	8000c9c <sending_function+0x14>
	}

	//xQueueReceive( xQueue1, &( msg ), ( TickType_t ) 0 );
	//HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 100);
	//xQueueReset( xQueue1 );
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	3748      	adds	r7, #72	; 0x48
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200003c8 	.word	0x200003c8
 8000d78:	08006ea4 	.word	0x08006ea4
 8000d7c:	2000037c 	.word	0x2000037c
 8000d80:	20000338 	.word	0x20000338
 8000d84:	20000000 	.word	0x20000000

08000d88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d101      	bne.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d9a:	f000 fa35 	bl	8001208 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40010000 	.word	0x40010000

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <Error_Handler+0x8>
	...

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_MspInit+0x54>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	4a11      	ldr	r2, [pc, #68]	; (8000e0c <HAL_MspInit+0x54>)
 8000dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_MspInit+0x54>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_MspInit+0x54>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_MspInit+0x54>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_MspInit+0x54>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	210f      	movs	r1, #15
 8000dfa:	f06f 0001 	mvn.w	r0, #1
 8000dfe:	f000 fe99 	bl	8001b34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800

08000e10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <HAL_ADC_MspInit+0x7c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d127      	bne.n	8000e82 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_ADC_MspInit+0x80>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a15      	ldr	r2, [pc, #84]	; (8000e90 <HAL_ADC_MspInit+0x80>)
 8000e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_ADC_MspInit+0x80>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_ADC_MspInit+0x80>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_ADC_MspInit+0x80>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_ADC_MspInit+0x80>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e6a:	2308      	movs	r3, #8
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <HAL_ADC_MspInit+0x84>)
 8000e7e:	f000 ff15 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	; 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40012000 	.word	0x40012000
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020000 	.word	0x40020000

08000e98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	; 0x30
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a37      	ldr	r2, [pc, #220]	; (8000f94 <HAL_UART_MspInit+0xfc>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d12d      	bne.n	8000f16 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	4b36      	ldr	r3, [pc, #216]	; (8000f98 <HAL_UART_MspInit+0x100>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a35      	ldr	r2, [pc, #212]	; (8000f98 <HAL_UART_MspInit+0x100>)
 8000ec4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <HAL_UART_MspInit+0x100>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed2:	61bb      	str	r3, [r7, #24]
 8000ed4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <HAL_UART_MspInit+0x100>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a2e      	ldr	r2, [pc, #184]	; (8000f98 <HAL_UART_MspInit+0x100>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <HAL_UART_MspInit+0x100>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ef2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART5;
 8000f04:	230b      	movs	r3, #11
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4823      	ldr	r0, [pc, #140]	; (8000f9c <HAL_UART_MspInit+0x104>)
 8000f10:	f000 fecc 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f14:	e039      	b.n	8000f8a <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART3)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a21      	ldr	r2, [pc, #132]	; (8000fa0 <HAL_UART_MspInit+0x108>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d134      	bne.n	8000f8a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <HAL_UART_MspInit+0x100>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	4a1b      	ldr	r2, [pc, #108]	; (8000f98 <HAL_UART_MspInit+0x100>)
 8000f2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <HAL_UART_MspInit+0x100>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_UART_MspInit+0x100>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <HAL_UART_MspInit+0x100>)
 8000f46:	f043 0308 	orr.w	r3, r3, #8
 8000f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_UART_MspInit+0x100>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	f003 0308 	and.w	r3, r3, #8
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <HAL_UART_MspInit+0x10c>)
 8000f76:	f000 fe99 	bl	8001cac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2105      	movs	r1, #5
 8000f7e:	2027      	movs	r0, #39	; 0x27
 8000f80:	f000 fdd8 	bl	8001b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f84:	2027      	movs	r0, #39	; 0x27
 8000f86:	f000 fdf1 	bl	8001b6c <HAL_NVIC_EnableIRQ>
}
 8000f8a:	bf00      	nop
 8000f8c:	3730      	adds	r7, #48	; 0x30
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40005000 	.word	0x40005000
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40004800 	.word	0x40004800
 8000fa4:	40020c00 	.word	0x40020c00

08000fa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	; 0x30
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <HAL_InitTick+0xd0>)
 8000fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc0:	4a2d      	ldr	r2, [pc, #180]	; (8001078 <HAL_InitTick+0xd0>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <HAL_InitTick+0xd0>)
 8000fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fd4:	f107 020c 	add.w	r2, r7, #12
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 f9d8 	bl	8002394 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fe4:	f001 f9c2 	bl	800236c <HAL_RCC_GetPCLK2Freq>
 8000fe8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fec:	4a23      	ldr	r2, [pc, #140]	; (800107c <HAL_InitTick+0xd4>)
 8000fee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff2:	0c9b      	lsrs	r3, r3, #18
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ff8:	4b21      	ldr	r3, [pc, #132]	; (8001080 <HAL_InitTick+0xd8>)
 8000ffa:	4a22      	ldr	r2, [pc, #136]	; (8001084 <HAL_InitTick+0xdc>)
 8000ffc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <HAL_InitTick+0xd8>)
 8001000:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001004:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001006:	4a1e      	ldr	r2, [pc, #120]	; (8001080 <HAL_InitTick+0xd8>)
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <HAL_InitTick+0xd8>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <HAL_InitTick+0xd8>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <HAL_InitTick+0xd8>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800101e:	4818      	ldr	r0, [pc, #96]	; (8001080 <HAL_InitTick+0xd8>)
 8001020:	f001 fc6e 	bl	8002900 <HAL_TIM_Base_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800102a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800102e:	2b00      	cmp	r3, #0
 8001030:	d11b      	bne.n	800106a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001032:	4813      	ldr	r0, [pc, #76]	; (8001080 <HAL_InitTick+0xd8>)
 8001034:	f001 fcbe 	bl	80029b4 <HAL_TIM_Base_Start_IT>
 8001038:	4603      	mov	r3, r0
 800103a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800103e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001042:	2b00      	cmp	r3, #0
 8001044:	d111      	bne.n	800106a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001046:	2019      	movs	r0, #25
 8001048:	f000 fd90 	bl	8001b6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b0f      	cmp	r3, #15
 8001050:	d808      	bhi.n	8001064 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001052:	2200      	movs	r2, #0
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	2019      	movs	r0, #25
 8001058:	f000 fd6c 	bl	8001b34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800105c:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_InitTick+0xe0>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	e002      	b.n	800106a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800106a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800106e:	4618      	mov	r0, r3
 8001070:	3730      	adds	r7, #48	; 0x30
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	431bde83 	.word	0x431bde83
 8001080:	200003e8 	.word	0x200003e8
 8001084:	40010000 	.word	0x40010000
 8001088:	20000010 	.word	0x20000010

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <NMI_Handler+0x4>

08001092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <HardFault_Handler+0x4>

08001098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <MemManage_Handler+0x4>

0800109e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <BusFault_Handler+0x4>

080010a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <UsageFault_Handler+0x4>

080010aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010be:	f001 fce9 	bl	8002a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200003e8 	.word	0x200003e8

080010cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <USART3_IRQHandler+0x10>)
 80010d2:	f002 f845 	bl	8003160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000037c 	.word	0x2000037c

080010e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e8:	4a14      	ldr	r2, [pc, #80]	; (800113c <_sbrk+0x5c>)
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <_sbrk+0x60>)
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <_sbrk+0x64>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <_sbrk+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d207      	bcs.n	8001120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001110:	f005 f9bc 	bl	800648c <__errno>
 8001114:	4603      	mov	r3, r0
 8001116:	220c      	movs	r2, #12
 8001118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	e009      	b.n	8001134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <_sbrk+0x64>)
 8001130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20050000 	.word	0x20050000
 8001140:	00000400 	.word	0x00000400
 8001144:	20000430 	.word	0x20000430
 8001148:	200041a0 	.word	0x200041a0

0800114c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <SystemInit+0x20>)
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <SystemInit+0x20>)
 8001158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800115c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001176:	490e      	ldr	r1, [pc, #56]	; (80011b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001178:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800117c:	e002      	b.n	8001184 <LoopCopyDataInit>

0800117e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001182:	3304      	adds	r3, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001188:	d3f9      	bcc.n	800117e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800118c:	4c0b      	ldr	r4, [pc, #44]	; (80011bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001190:	e001      	b.n	8001196 <LoopFillZerobss>

08001192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001194:	3204      	adds	r2, #4

08001196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001198:	d3fb      	bcc.n	8001192 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800119a:	f7ff ffd7 	bl	800114c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119e:	f005 f97b 	bl	8006498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a2:	f7ff fa31 	bl	8000608 <main>
  bx  lr    
 80011a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80011b4:	08006f1c 	.word	0x08006f1c
  ldr r2, =_sbss
 80011b8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80011bc:	2000419c 	.word	0x2000419c

080011c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <HAL_Init+0x40>)
 80011ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <HAL_Init+0x40>)
 80011da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_Init+0x40>)
 80011e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 fc96 	bl	8001b1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f2:	200f      	movs	r0, #15
 80011f4:	f7ff fed8 	bl	8000fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f8:	f7ff fdde 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023c00 	.word	0x40023c00

08001208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x20>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x24>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <HAL_IncTick+0x24>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000014 	.word	0x20000014
 800122c:	20000434 	.word	0x20000434

08001230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_GetTick+0x14>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000434 	.word	0x20000434

08001248 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e033      	b.n	80012c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	2b00      	cmp	r3, #0
 8001264:	d109      	bne.n	800127a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fdd2 	bl	8000e10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	2b00      	cmp	r3, #0
 8001284:	d118      	bne.n	80012b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800128e:	f023 0302 	bic.w	r3, r3, #2
 8001292:	f043 0202 	orr.w	r2, r3, #2
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fa96 	bl	80017cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f023 0303 	bic.w	r3, r3, #3
 80012ae:	f043 0201 	orr.w	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40
 80012b6:	e001      	b.n	80012bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d101      	bne.n	80012ea <HAL_ADC_Start+0x1a>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e097      	b.n	800141a <HAL_ADC_Start+0x14a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d018      	beq.n	8001332 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0201 	orr.w	r2, r2, #1
 800130e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001310:	4b45      	ldr	r3, [pc, #276]	; (8001428 <HAL_ADC_Start+0x158>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a45      	ldr	r2, [pc, #276]	; (800142c <HAL_ADC_Start+0x15c>)
 8001316:	fba2 2303 	umull	r2, r3, r2, r3
 800131a:	0c9a      	lsrs	r2, r3, #18
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001324:	e002      	b.n	800132c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	3b01      	subs	r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f9      	bne.n	8001326 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b01      	cmp	r3, #1
 800133e:	d15f      	bne.n	8001400 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001348:	f023 0301 	bic.w	r3, r3, #1
 800134c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800135e:	2b00      	cmp	r3, #0
 8001360:	d007      	beq.n	8001372 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800136a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800137a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800137e:	d106      	bne.n	800138e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	f023 0206 	bic.w	r2, r3, #6
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	645a      	str	r2, [r3, #68]	; 0x44
 800138c:	e002      	b.n	8001394 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <HAL_ADC_Start+0x160>)
 800139e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 031f 	and.w	r3, r3, #31
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10f      	bne.n	80013d6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d129      	bne.n	8001418 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	e020      	b.n	8001418 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a16      	ldr	r2, [pc, #88]	; (8001434 <HAL_ADC_Start+0x164>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d11b      	bne.n	8001418 <HAL_ADC_Start+0x148>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d114      	bne.n	8001418 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	e00b      	b.n	8001418 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f043 0210 	orr.w	r2, r3, #16
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001410:	f043 0201 	orr.w	r2, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	2000000c 	.word	0x2000000c
 800142c:	431bde83 	.word	0x431bde83
 8001430:	40012300 	.word	0x40012300
 8001434:	40012000 	.word	0x40012000

08001438 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001454:	d113      	bne.n	800147e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001464:	d10b      	bne.n	800147e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f043 0220 	orr.w	r2, r3, #32
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e063      	b.n	8001546 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800147e:	f7ff fed7 	bl	8001230 <HAL_GetTick>
 8001482:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001484:	e021      	b.n	80014ca <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148c:	d01d      	beq.n	80014ca <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d007      	beq.n	80014a4 <HAL_ADC_PollForConversion+0x6c>
 8001494:	f7ff fecc 	bl	8001230 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d212      	bcs.n	80014ca <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d00b      	beq.n	80014ca <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f043 0204 	orr.w	r2, r3, #4
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e03d      	b.n	8001546 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d1d6      	bne.n	8001486 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f06f 0212 	mvn.w	r2, #18
 80014e0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d123      	bne.n	8001544 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001500:	2b00      	cmp	r3, #0
 8001502:	d11f      	bne.n	8001544 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800150e:	2b00      	cmp	r3, #0
 8001510:	d006      	beq.n	8001520 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800151c:	2b00      	cmp	r3, #0
 800151e:	d111      	bne.n	8001544 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d105      	bne.n	8001544 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f043 0201 	orr.w	r2, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x1c>
 8001580:	2302      	movs	r3, #2
 8001582:	e113      	b.n	80017ac <HAL_ADC_ConfigChannel+0x244>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b09      	cmp	r3, #9
 8001592:	d925      	bls.n	80015e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68d9      	ldr	r1, [r3, #12]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	3b1e      	subs	r3, #30
 80015aa:	2207      	movs	r2, #7
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43da      	mvns	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	400a      	ands	r2, r1
 80015b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68d9      	ldr	r1, [r3, #12]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	4603      	mov	r3, r0
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4403      	add	r3, r0
 80015d2:	3b1e      	subs	r3, #30
 80015d4:	409a      	lsls	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	e022      	b.n	8001626 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6919      	ldr	r1, [r3, #16]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	4613      	mov	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	2207      	movs	r2, #7
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43da      	mvns	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	400a      	ands	r2, r1
 8001602:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6919      	ldr	r1, [r3, #16]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	b29b      	uxth	r3, r3
 8001614:	4618      	mov	r0, r3
 8001616:	4603      	mov	r3, r0
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4403      	add	r3, r0
 800161c:	409a      	lsls	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b06      	cmp	r3, #6
 800162c:	d824      	bhi.n	8001678 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	3b05      	subs	r3, #5
 8001640:	221f      	movs	r2, #31
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43da      	mvns	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	400a      	ands	r2, r1
 800164e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	b29b      	uxth	r3, r3
 800165c:	4618      	mov	r0, r3
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	3b05      	subs	r3, #5
 800166a:	fa00 f203 	lsl.w	r2, r0, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	635a      	str	r2, [r3, #52]	; 0x34
 8001676:	e04c      	b.n	8001712 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b0c      	cmp	r3, #12
 800167e:	d824      	bhi.n	80016ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	3b23      	subs	r3, #35	; 0x23
 8001692:	221f      	movs	r2, #31
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43da      	mvns	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	400a      	ands	r2, r1
 80016a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	3b23      	subs	r3, #35	; 0x23
 80016bc:	fa00 f203 	lsl.w	r2, r0, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	631a      	str	r2, [r3, #48]	; 0x30
 80016c8:	e023      	b.n	8001712 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	3b41      	subs	r3, #65	; 0x41
 80016dc:	221f      	movs	r2, #31
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43da      	mvns	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	400a      	ands	r2, r1
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4618      	mov	r0, r3
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	3b41      	subs	r3, #65	; 0x41
 8001706:	fa00 f203 	lsl.w	r2, r0, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001712:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <HAL_ADC_ConfigChannel+0x250>)
 8001714:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a28      	ldr	r2, [pc, #160]	; (80017bc <HAL_ADC_ConfigChannel+0x254>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d10f      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x1d8>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b12      	cmp	r3, #18
 8001726:	d10b      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a1d      	ldr	r2, [pc, #116]	; (80017bc <HAL_ADC_ConfigChannel+0x254>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d12b      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x23a>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a1c      	ldr	r2, [pc, #112]	; (80017c0 <HAL_ADC_ConfigChannel+0x258>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d003      	beq.n	800175c <HAL_ADC_ConfigChannel+0x1f4>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b11      	cmp	r3, #17
 800175a:	d122      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a11      	ldr	r2, [pc, #68]	; (80017c0 <HAL_ADC_ConfigChannel+0x258>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d111      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_ADC_ConfigChannel+0x25c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a11      	ldr	r2, [pc, #68]	; (80017c8 <HAL_ADC_ConfigChannel+0x260>)
 8001784:	fba2 2303 	umull	r2, r3, r2, r3
 8001788:	0c9a      	lsrs	r2, r3, #18
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001794:	e002      	b.n	800179c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	3b01      	subs	r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f9      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	40012300 	.word	0x40012300
 80017bc:	40012000 	.word	0x40012000
 80017c0:	10000012 	.word	0x10000012
 80017c4:	2000000c 	.word	0x2000000c
 80017c8:	431bde83 	.word	0x431bde83

080017cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017d4:	4b79      	ldr	r3, [pc, #484]	; (80019bc <ADC_Init+0x1f0>)
 80017d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	431a      	orrs	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001800:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	021a      	lsls	r2, r3, #8
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001824:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001846:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6899      	ldr	r1, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	4a58      	ldr	r2, [pc, #352]	; (80019c0 <ADC_Init+0x1f4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d022      	beq.n	80018aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001872:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6899      	ldr	r1, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001894:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6899      	ldr	r1, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	e00f      	b.n	80018ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0202 	bic.w	r2, r2, #2
 80018d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6899      	ldr	r1, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7e1b      	ldrb	r3, [r3, #24]
 80018e4:	005a      	lsls	r2, r3, #1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01b      	beq.n	8001930 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001906:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001916:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6859      	ldr	r1, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	3b01      	subs	r3, #1
 8001924:	035a      	lsls	r2, r3, #13
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	e007      	b.n	8001940 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800193e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	3b01      	subs	r3, #1
 800195c:	051a      	lsls	r2, r3, #20
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001974:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6899      	ldr	r1, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001982:	025a      	lsls	r2, r3, #9
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800199a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6899      	ldr	r1, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	029a      	lsls	r2, r3, #10
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	609a      	str	r2, [r3, #8]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	40012300 	.word	0x40012300
 80019c0:	0f000001 	.word	0x0f000001

080019c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <__NVIC_GetPriorityGrouping+0x18>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	f003 0307 	and.w	r3, r3, #7
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db0b      	blt.n	8001a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	4907      	ldr	r1, [pc, #28]	; (8001a60 <__NVIC_EnableIRQ+0x38>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e100 	.word	0xe000e100

08001a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	; (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f1c3 0307 	rsb	r3, r3, #7
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf28      	it	cs
 8001ad6:	2304      	movcs	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d902      	bls.n	8001ae8 <NVIC_EncodePriority+0x30>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3b03      	subs	r3, #3
 8001ae6:	e000      	b.n	8001aea <NVIC_EncodePriority+0x32>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	4313      	orrs	r3, r2
         );
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	; 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ff4c 	bl	80019c4 <__NVIC_SetPriorityGrouping>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b46:	f7ff ff61 	bl	8001a0c <__NVIC_GetPriorityGrouping>
 8001b4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	68b9      	ldr	r1, [r7, #8]
 8001b50:	6978      	ldr	r0, [r7, #20]
 8001b52:	f7ff ffb1 	bl	8001ab8 <NVIC_EncodePriority>
 8001b56:	4602      	mov	r2, r0
 8001b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ff80 	bl	8001a64 <__NVIC_SetPriority>
}
 8001b64:	bf00      	nop
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff54 	bl	8001a28 <__NVIC_EnableIRQ>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b96:	f7ff fb4b 	bl	8001230 <HAL_GetTick>
 8001b9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d008      	beq.n	8001bba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2280      	movs	r2, #128	; 0x80
 8001bac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e052      	b.n	8001c60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0216 	bic.w	r2, r2, #22
 8001bc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d103      	bne.n	8001bea <HAL_DMA_Abort+0x62>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d007      	beq.n	8001bfa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0208 	bic.w	r2, r2, #8
 8001bf8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0201 	bic.w	r2, r2, #1
 8001c08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c0a:	e013      	b.n	8001c34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c0c:	f7ff fb10 	bl	8001230 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b05      	cmp	r3, #5
 8001c18:	d90c      	bls.n	8001c34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2203      	movs	r2, #3
 8001c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e015      	b.n	8001c60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1e4      	bne.n	8001c0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c46:	223f      	movs	r2, #63	; 0x3f
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d004      	beq.n	8001c86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00c      	b.n	8001ca0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2205      	movs	r2, #5
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0201 	bic.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	e165      	b.n	8001f94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	f040 8154 	bne.w	8001f8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d005      	beq.n	8001cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d130      	bne.n	8001d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	2203      	movs	r2, #3
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d34:	2201      	movs	r2, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	f003 0201 	and.w	r2, r3, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d017      	beq.n	8001d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d123      	bne.n	8001df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	08da      	lsrs	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3208      	adds	r2, #8
 8001db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	220f      	movs	r2, #15
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	08da      	lsrs	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3208      	adds	r2, #8
 8001dea:	69b9      	ldr	r1, [r7, #24]
 8001dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0203 	and.w	r2, r3, #3
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80ae 	beq.w	8001f8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b5d      	ldr	r3, [pc, #372]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	4a5c      	ldr	r2, [pc, #368]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e40:	6453      	str	r3, [r2, #68]	; 0x44
 8001e42:	4b5a      	ldr	r3, [pc, #360]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e4e:	4a58      	ldr	r2, [pc, #352]	; (8001fb0 <HAL_GPIO_Init+0x304>)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	3302      	adds	r3, #2
 8001e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	220f      	movs	r2, #15
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4f      	ldr	r2, [pc, #316]	; (8001fb4 <HAL_GPIO_Init+0x308>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d025      	beq.n	8001ec6 <HAL_GPIO_Init+0x21a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4e      	ldr	r2, [pc, #312]	; (8001fb8 <HAL_GPIO_Init+0x30c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01f      	beq.n	8001ec2 <HAL_GPIO_Init+0x216>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4d      	ldr	r2, [pc, #308]	; (8001fbc <HAL_GPIO_Init+0x310>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d019      	beq.n	8001ebe <HAL_GPIO_Init+0x212>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4c      	ldr	r2, [pc, #304]	; (8001fc0 <HAL_GPIO_Init+0x314>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_GPIO_Init+0x20e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4b      	ldr	r2, [pc, #300]	; (8001fc4 <HAL_GPIO_Init+0x318>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00d      	beq.n	8001eb6 <HAL_GPIO_Init+0x20a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4a      	ldr	r2, [pc, #296]	; (8001fc8 <HAL_GPIO_Init+0x31c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d007      	beq.n	8001eb2 <HAL_GPIO_Init+0x206>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a49      	ldr	r2, [pc, #292]	; (8001fcc <HAL_GPIO_Init+0x320>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d101      	bne.n	8001eae <HAL_GPIO_Init+0x202>
 8001eaa:	2306      	movs	r3, #6
 8001eac:	e00c      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001eae:	2307      	movs	r3, #7
 8001eb0:	e00a      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001eb2:	2305      	movs	r3, #5
 8001eb4:	e008      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e004      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e002      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	f002 0203 	and.w	r2, r2, #3
 8001ece:	0092      	lsls	r2, r2, #2
 8001ed0:	4093      	lsls	r3, r2
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ed8:	4935      	ldr	r1, [pc, #212]	; (8001fb0 <HAL_GPIO_Init+0x304>)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	3302      	adds	r3, #2
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ee6:	4b3a      	ldr	r3, [pc, #232]	; (8001fd0 <HAL_GPIO_Init+0x324>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f0a:	4a31      	ldr	r2, [pc, #196]	; (8001fd0 <HAL_GPIO_Init+0x324>)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f10:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <HAL_GPIO_Init+0x324>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f34:	4a26      	ldr	r2, [pc, #152]	; (8001fd0 <HAL_GPIO_Init+0x324>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f3a:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <HAL_GPIO_Init+0x324>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f5e:	4a1c      	ldr	r2, [pc, #112]	; (8001fd0 <HAL_GPIO_Init+0x324>)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f64:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <HAL_GPIO_Init+0x324>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f88:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <HAL_GPIO_Init+0x324>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3301      	adds	r3, #1
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	2b0f      	cmp	r3, #15
 8001f98:	f67f ae96 	bls.w	8001cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3724      	adds	r7, #36	; 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40013800 	.word	0x40013800
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	40020400 	.word	0x40020400
 8001fbc:	40020800 	.word	0x40020800
 8001fc0:	40020c00 	.word	0x40020c00
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40021400 	.word	0x40021400
 8001fcc:	40021800 	.word	0x40021800
 8001fd0:	40013c00 	.word	0x40013c00

08001fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0cc      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b68      	ldr	r3, [pc, #416]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d90c      	bls.n	8002010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b65      	ldr	r3, [pc, #404]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b63      	ldr	r3, [pc, #396]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0b8      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d020      	beq.n	800205e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002028:	4b59      	ldr	r3, [pc, #356]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4a58      	ldr	r2, [pc, #352]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002032:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002040:	4b53      	ldr	r3, [pc, #332]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800204a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204c:	4b50      	ldr	r3, [pc, #320]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	494d      	ldr	r1, [pc, #308]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d044      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	4b47      	ldr	r3, [pc, #284]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d119      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e07f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d003      	beq.n	8002092 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208e:	2b03      	cmp	r3, #3
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002092:	4b3f      	ldr	r3, [pc, #252]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e06f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a2:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e067      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b2:	4b37      	ldr	r3, [pc, #220]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f023 0203 	bic.w	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4934      	ldr	r1, [pc, #208]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c4:	f7ff f8b4 	bl	8001230 <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7ff f8b0 	bl	8001230 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e04f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 020c 	and.w	r2, r3, #12
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d1eb      	bne.n	80020cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f4:	4b25      	ldr	r3, [pc, #148]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d20c      	bcs.n	800211c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e032      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4916      	ldr	r1, [pc, #88]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	490e      	ldr	r1, [pc, #56]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	4313      	orrs	r3, r2
 8002158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800215a:	f000 f821 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 800215e:	4602      	mov	r2, r0
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	490a      	ldr	r1, [pc, #40]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	5ccb      	ldrb	r3, [r1, r3]
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	4a09      	ldr	r2, [pc, #36]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe ff14 	bl	8000fa8 <HAL_InitTick>

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023c00 	.word	0x40023c00
 8002190:	40023800 	.word	0x40023800
 8002194:	08006ec0 	.word	0x08006ec0
 8002198:	2000000c 	.word	0x2000000c
 800219c:	20000010 	.word	0x20000010

080021a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021a4:	b090      	sub	sp, #64	; 0x40
 80021a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	637b      	str	r3, [r7, #52]	; 0x34
 80021ac:	2300      	movs	r3, #0
 80021ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b0:	2300      	movs	r3, #0
 80021b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021b8:	4b59      	ldr	r3, [pc, #356]	; (8002320 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d00d      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x40>
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	f200 80a1 	bhi.w	800230c <HAL_RCC_GetSysClockFreq+0x16c>
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x34>
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d003      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x3a>
 80021d2:	e09b      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4b53      	ldr	r3, [pc, #332]	; (8002324 <HAL_RCC_GetSysClockFreq+0x184>)
 80021d6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80021d8:	e09b      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021da:	4b53      	ldr	r3, [pc, #332]	; (8002328 <HAL_RCC_GetSysClockFreq+0x188>)
 80021dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021de:	e098      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e0:	4b4f      	ldr	r3, [pc, #316]	; (8002320 <HAL_RCC_GetSysClockFreq+0x180>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ea:	4b4d      	ldr	r3, [pc, #308]	; (8002320 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d028      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f6:	4b4a      	ldr	r3, [pc, #296]	; (8002320 <HAL_RCC_GetSysClockFreq+0x180>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	099b      	lsrs	r3, r3, #6
 80021fc:	2200      	movs	r2, #0
 80021fe:	623b      	str	r3, [r7, #32]
 8002200:	627a      	str	r2, [r7, #36]	; 0x24
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002208:	2100      	movs	r1, #0
 800220a:	4b47      	ldr	r3, [pc, #284]	; (8002328 <HAL_RCC_GetSysClockFreq+0x188>)
 800220c:	fb03 f201 	mul.w	r2, r3, r1
 8002210:	2300      	movs	r3, #0
 8002212:	fb00 f303 	mul.w	r3, r0, r3
 8002216:	4413      	add	r3, r2
 8002218:	4a43      	ldr	r2, [pc, #268]	; (8002328 <HAL_RCC_GetSysClockFreq+0x188>)
 800221a:	fba0 1202 	umull	r1, r2, r0, r2
 800221e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002220:	460a      	mov	r2, r1
 8002222:	62ba      	str	r2, [r7, #40]	; 0x28
 8002224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002226:	4413      	add	r3, r2
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800222a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222c:	2200      	movs	r2, #0
 800222e:	61bb      	str	r3, [r7, #24]
 8002230:	61fa      	str	r2, [r7, #28]
 8002232:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002236:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800223a:	f7fe f849 	bl	80002d0 <__aeabi_uldivmod>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4613      	mov	r3, r2
 8002244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002246:	e053      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <HAL_RCC_GetSysClockFreq+0x180>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	099b      	lsrs	r3, r3, #6
 800224e:	2200      	movs	r2, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	617a      	str	r2, [r7, #20]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800225a:	f04f 0b00 	mov.w	fp, #0
 800225e:	4652      	mov	r2, sl
 8002260:	465b      	mov	r3, fp
 8002262:	f04f 0000 	mov.w	r0, #0
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	0159      	lsls	r1, r3, #5
 800226c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002270:	0150      	lsls	r0, r2, #5
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	ebb2 080a 	subs.w	r8, r2, sl
 800227a:	eb63 090b 	sbc.w	r9, r3, fp
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800228a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800228e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002292:	ebb2 0408 	subs.w	r4, r2, r8
 8002296:	eb63 0509 	sbc.w	r5, r3, r9
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	00eb      	lsls	r3, r5, #3
 80022a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022a8:	00e2      	lsls	r2, r4, #3
 80022aa:	4614      	mov	r4, r2
 80022ac:	461d      	mov	r5, r3
 80022ae:	eb14 030a 	adds.w	r3, r4, sl
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	eb45 030b 	adc.w	r3, r5, fp
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022c6:	4629      	mov	r1, r5
 80022c8:	028b      	lsls	r3, r1, #10
 80022ca:	4621      	mov	r1, r4
 80022cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022d0:	4621      	mov	r1, r4
 80022d2:	028a      	lsls	r2, r1, #10
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022da:	2200      	movs	r2, #0
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	60fa      	str	r2, [r7, #12]
 80022e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022e4:	f7fd fff4 	bl	80002d0 <__aeabi_uldivmod>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4613      	mov	r3, r2
 80022ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_GetSysClockFreq+0x180>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	3301      	adds	r3, #1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002300:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002304:	fbb2 f3f3 	udiv	r3, r2, r3
 8002308:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800230a:	e002      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_RCC_GetSysClockFreq+0x184>)
 800230e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002314:	4618      	mov	r0, r3
 8002316:	3740      	adds	r7, #64	; 0x40
 8002318:	46bd      	mov	sp, r7
 800231a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800
 8002324:	00f42400 	.word	0x00f42400
 8002328:	017d7840 	.word	0x017d7840

0800232c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <HAL_RCC_GetHCLKFreq+0x14>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	2000000c 	.word	0x2000000c

08002344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002348:	f7ff fff0 	bl	800232c <HAL_RCC_GetHCLKFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	0a9b      	lsrs	r3, r3, #10
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4903      	ldr	r1, [pc, #12]	; (8002368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800235a:	5ccb      	ldrb	r3, [r1, r3]
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40023800 	.word	0x40023800
 8002368:	08006ed0 	.word	0x08006ed0

0800236c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002370:	f7ff ffdc 	bl	800232c <HAL_RCC_GetHCLKFreq>
 8002374:	4602      	mov	r2, r0
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	0b5b      	lsrs	r3, r3, #13
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	4903      	ldr	r1, [pc, #12]	; (8002390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002382:	5ccb      	ldrb	r3, [r1, r3]
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002388:	4618      	mov	r0, r3
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40023800 	.word	0x40023800
 8002390:	08006ed0 	.word	0x08006ed0

08002394 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	220f      	movs	r2, #15
 80023a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_RCC_GetClockConfig+0x5c>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0203 	and.w	r2, r3, #3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023b0:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <HAL_RCC_GetClockConfig+0x5c>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <HAL_RCC_GetClockConfig+0x5c>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_RCC_GetClockConfig+0x5c>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	08db      	lsrs	r3, r3, #3
 80023ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <HAL_RCC_GetClockConfig+0x60>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0207 	and.w	r2, r3, #7
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	601a      	str	r2, [r3, #0]
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40023c00 	.word	0x40023c00

080023f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e273      	b.n	80028f2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d075      	beq.n	8002502 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002416:	4b88      	ldr	r3, [pc, #544]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b04      	cmp	r3, #4
 8002420:	d00c      	beq.n	800243c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002422:	4b85      	ldr	r3, [pc, #532]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800242a:	2b08      	cmp	r3, #8
 800242c:	d112      	bne.n	8002454 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242e:	4b82      	ldr	r3, [pc, #520]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800243a:	d10b      	bne.n	8002454 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	4b7e      	ldr	r3, [pc, #504]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d05b      	beq.n	8002500 <HAL_RCC_OscConfig+0x108>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d157      	bne.n	8002500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e24e      	b.n	80028f2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245c:	d106      	bne.n	800246c <HAL_RCC_OscConfig+0x74>
 800245e:	4b76      	ldr	r3, [pc, #472]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a75      	ldr	r2, [pc, #468]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e01d      	b.n	80024a8 <HAL_RCC_OscConfig+0xb0>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x98>
 8002476:	4b70      	ldr	r3, [pc, #448]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a6f      	ldr	r2, [pc, #444]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b6d      	ldr	r3, [pc, #436]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a6c      	ldr	r2, [pc, #432]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0xb0>
 8002490:	4b69      	ldr	r3, [pc, #420]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a68      	ldr	r2, [pc, #416]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b66      	ldr	r3, [pc, #408]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a65      	ldr	r2, [pc, #404]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80024a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7fe febe 	bl	8001230 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b8:	f7fe feba 	bl	8001230 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e213      	b.n	80028f2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b5b      	ldr	r3, [pc, #364]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0xc0>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fe feaa 	bl	8001230 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e0:	f7fe fea6 	bl	8001230 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1ff      	b.n	80028f2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f2:	4b51      	ldr	r3, [pc, #324]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0xe8>
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d063      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800250e:	4b4a      	ldr	r3, [pc, #296]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251a:	4b47      	ldr	r3, [pc, #284]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002522:	2b08      	cmp	r3, #8
 8002524:	d11c      	bne.n	8002560 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002526:	4b44      	ldr	r3, [pc, #272]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d116      	bne.n	8002560 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002532:	4b41      	ldr	r3, [pc, #260]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_RCC_OscConfig+0x152>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d001      	beq.n	800254a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e1d3      	b.n	80028f2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254a:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4937      	ldr	r1, [pc, #220]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	e03a      	b.n	80025d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d020      	beq.n	80025aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002568:	4b34      	ldr	r3, [pc, #208]	; (800263c <HAL_RCC_OscConfig+0x244>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256e:	f7fe fe5f 	bl	8001230 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002576:	f7fe fe5b 	bl	8001230 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e1b4      	b.n	80028f2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002588:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b28      	ldr	r3, [pc, #160]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4925      	ldr	r1, [pc, #148]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
 80025a8:	e015      	b.n	80025d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_RCC_OscConfig+0x244>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe fe3e 	bl	8001230 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b8:	f7fe fe3a 	bl	8001230 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e193      	b.n	80028f2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d036      	beq.n	8002650 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d016      	beq.n	8002618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <HAL_RCC_OscConfig+0x248>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7fe fe1e 	bl	8001230 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f8:	f7fe fe1a 	bl	8001230 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e173      	b.n	80028f2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800260c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x200>
 8002616:	e01b      	b.n	8002650 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_RCC_OscConfig+0x248>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261e:	f7fe fe07 	bl	8001230 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002624:	e00e      	b.n	8002644 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002626:	f7fe fe03 	bl	8001230 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d907      	bls.n	8002644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e15c      	b.n	80028f2 <HAL_RCC_OscConfig+0x4fa>
 8002638:	40023800 	.word	0x40023800
 800263c:	42470000 	.word	0x42470000
 8002640:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002644:	4b8a      	ldr	r3, [pc, #552]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1ea      	bne.n	8002626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8097 	beq.w	800278c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265e:	2300      	movs	r3, #0
 8002660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002662:	4b83      	ldr	r3, [pc, #524]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10f      	bne.n	800268e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	4b7f      	ldr	r3, [pc, #508]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a7e      	ldr	r2, [pc, #504]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b7c      	ldr	r3, [pc, #496]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268a:	2301      	movs	r3, #1
 800268c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268e:	4b79      	ldr	r3, [pc, #484]	; (8002874 <HAL_RCC_OscConfig+0x47c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d118      	bne.n	80026cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269a:	4b76      	ldr	r3, [pc, #472]	; (8002874 <HAL_RCC_OscConfig+0x47c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a75      	ldr	r2, [pc, #468]	; (8002874 <HAL_RCC_OscConfig+0x47c>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a6:	f7fe fdc3 	bl	8001230 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ae:	f7fe fdbf 	bl	8001230 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e118      	b.n	80028f2 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	4b6c      	ldr	r3, [pc, #432]	; (8002874 <HAL_RCC_OscConfig+0x47c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x2ea>
 80026d4:	4b66      	ldr	r3, [pc, #408]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	4a65      	ldr	r2, [pc, #404]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6713      	str	r3, [r2, #112]	; 0x70
 80026e0:	e01c      	b.n	800271c <HAL_RCC_OscConfig+0x324>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b05      	cmp	r3, #5
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x30c>
 80026ea:	4b61      	ldr	r3, [pc, #388]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	4a60      	ldr	r2, [pc, #384]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	6713      	str	r3, [r2, #112]	; 0x70
 80026f6:	4b5e      	ldr	r3, [pc, #376]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	4a5d      	ldr	r2, [pc, #372]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6713      	str	r3, [r2, #112]	; 0x70
 8002702:	e00b      	b.n	800271c <HAL_RCC_OscConfig+0x324>
 8002704:	4b5a      	ldr	r3, [pc, #360]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	4a59      	ldr	r2, [pc, #356]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	6713      	str	r3, [r2, #112]	; 0x70
 8002710:	4b57      	ldr	r3, [pc, #348]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	4a56      	ldr	r2, [pc, #344]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002716:	f023 0304 	bic.w	r3, r3, #4
 800271a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d015      	beq.n	8002750 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7fe fd84 	bl	8001230 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272a:	e00a      	b.n	8002742 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272c:	f7fe fd80 	bl	8001230 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	; 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e0d7      	b.n	80028f2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002742:	4b4b      	ldr	r3, [pc, #300]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0ee      	beq.n	800272c <HAL_RCC_OscConfig+0x334>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7fe fd6e 	bl	8001230 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002756:	e00a      	b.n	800276e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002758:	f7fe fd6a 	bl	8001230 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e0c1      	b.n	80028f2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276e:	4b40      	ldr	r3, [pc, #256]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1ee      	bne.n	8002758 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800277a:	7dfb      	ldrb	r3, [r7, #23]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d105      	bne.n	800278c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002780:	4b3b      	ldr	r3, [pc, #236]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	4a3a      	ldr	r2, [pc, #232]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800278a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80ad 	beq.w	80028f0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002796:	4b36      	ldr	r3, [pc, #216]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d060      	beq.n	8002864 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d145      	bne.n	8002836 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027aa:	4b33      	ldr	r3, [pc, #204]	; (8002878 <HAL_RCC_OscConfig+0x480>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fe fd3e 	bl	8001230 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b8:	f7fe fd3a 	bl	8001230 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e093      	b.n	80028f2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ca:	4b29      	ldr	r3, [pc, #164]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69da      	ldr	r2, [r3, #28]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	3b01      	subs	r3, #1
 80027f0:	041b      	lsls	r3, r3, #16
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	061b      	lsls	r3, r3, #24
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	071b      	lsls	r3, r3, #28
 8002802:	491b      	ldr	r1, [pc, #108]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002808:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <HAL_RCC_OscConfig+0x480>)
 800280a:	2201      	movs	r2, #1
 800280c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280e:	f7fe fd0f 	bl	8001230 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002816:	f7fe fd0b 	bl	8001230 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e064      	b.n	80028f2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002828:	4b11      	ldr	r3, [pc, #68]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x41e>
 8002834:	e05c      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_RCC_OscConfig+0x480>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7fe fcf8 	bl	8001230 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002844:	f7fe fcf4 	bl	8001230 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e04d      	b.n	80028f2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x44c>
 8002862:	e045      	b.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d107      	bne.n	800287c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e040      	b.n	80028f2 <HAL_RCC_OscConfig+0x4fa>
 8002870:	40023800 	.word	0x40023800
 8002874:	40007000 	.word	0x40007000
 8002878:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800287c:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d030      	beq.n	80028ec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d129      	bne.n	80028ec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d122      	bne.n	80028ec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028ac:	4013      	ands	r3, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d119      	bne.n	80028ec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	085b      	lsrs	r3, r3, #1
 80028c4:	3b01      	subs	r3, #1
 80028c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d10f      	bne.n	80028ec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d107      	bne.n	80028ec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800

08002900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e041      	b.n	8002996 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f839 	bl	800299e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3304      	adds	r3, #4
 800293c:	4619      	mov	r1, r3
 800293e:	4610      	mov	r0, r2
 8002940:	f000 f9d8 	bl	8002cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d001      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e04e      	b.n	8002a6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a23      	ldr	r2, [pc, #140]	; (8002a78 <HAL_TIM_Base_Start_IT+0xc4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d022      	beq.n	8002a34 <HAL_TIM_Base_Start_IT+0x80>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f6:	d01d      	beq.n	8002a34 <HAL_TIM_Base_Start_IT+0x80>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <HAL_TIM_Base_Start_IT+0xc8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d018      	beq.n	8002a34 <HAL_TIM_Base_Start_IT+0x80>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d013      	beq.n	8002a34 <HAL_TIM_Base_Start_IT+0x80>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1c      	ldr	r2, [pc, #112]	; (8002a84 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00e      	beq.n	8002a34 <HAL_TIM_Base_Start_IT+0x80>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d009      	beq.n	8002a34 <HAL_TIM_Base_Start_IT+0x80>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <HAL_TIM_Base_Start_IT+0xd8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d004      	beq.n	8002a34 <HAL_TIM_Base_Start_IT+0x80>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d111      	bne.n	8002a58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b06      	cmp	r3, #6
 8002a44:	d010      	beq.n	8002a68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0201 	orr.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a56:	e007      	b.n	8002a68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40010000 	.word	0x40010000
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40000800 	.word	0x40000800
 8002a84:	40000c00 	.word	0x40000c00
 8002a88:	40010400 	.word	0x40010400
 8002a8c:	40014000 	.word	0x40014000
 8002a90:	40001800 	.word	0x40001800

08002a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d122      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d11b      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0202 	mvn.w	r2, #2
 8002ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f8ee 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f8e0 	bl	8002ca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f8f1 	bl	8002ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d122      	bne.n	8002b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d11b      	bne.n	8002b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0204 	mvn.w	r2, #4
 8002b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8c4 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
 8002b30:	e005      	b.n	8002b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8b6 	bl	8002ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f8c7 	bl	8002ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d122      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d11b      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0208 	mvn.w	r2, #8
 8002b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f89a 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
 8002b84:	e005      	b.n	8002b92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f88c 	bl	8002ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f89d 	bl	8002ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b10      	cmp	r3, #16
 8002ba4:	d122      	bne.n	8002bec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b10      	cmp	r3, #16
 8002bb2:	d11b      	bne.n	8002bec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0210 	mvn.w	r2, #16
 8002bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f870 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f862 	bl	8002ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f873 	bl	8002ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d10e      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d107      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0201 	mvn.w	r2, #1
 8002c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fe f8b8 	bl	8000d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b80      	cmp	r3, #128	; 0x80
 8002c24:	d10e      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c30:	2b80      	cmp	r3, #128	; 0x80
 8002c32:	d107      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f902 	bl	8002e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4e:	2b40      	cmp	r3, #64	; 0x40
 8002c50:	d10e      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5c:	2b40      	cmp	r3, #64	; 0x40
 8002c5e:	d107      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f838 	bl	8002ce0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d10e      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d107      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0220 	mvn.w	r2, #32
 8002c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f8cc 	bl	8002e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a40      	ldr	r2, [pc, #256]	; (8002e08 <TIM_Base_SetConfig+0x114>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d013      	beq.n	8002d34 <TIM_Base_SetConfig+0x40>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d12:	d00f      	beq.n	8002d34 <TIM_Base_SetConfig+0x40>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a3d      	ldr	r2, [pc, #244]	; (8002e0c <TIM_Base_SetConfig+0x118>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00b      	beq.n	8002d34 <TIM_Base_SetConfig+0x40>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a3c      	ldr	r2, [pc, #240]	; (8002e10 <TIM_Base_SetConfig+0x11c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d007      	beq.n	8002d34 <TIM_Base_SetConfig+0x40>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a3b      	ldr	r2, [pc, #236]	; (8002e14 <TIM_Base_SetConfig+0x120>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d003      	beq.n	8002d34 <TIM_Base_SetConfig+0x40>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a3a      	ldr	r2, [pc, #232]	; (8002e18 <TIM_Base_SetConfig+0x124>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d108      	bne.n	8002d46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a2f      	ldr	r2, [pc, #188]	; (8002e08 <TIM_Base_SetConfig+0x114>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d02b      	beq.n	8002da6 <TIM_Base_SetConfig+0xb2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d54:	d027      	beq.n	8002da6 <TIM_Base_SetConfig+0xb2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a2c      	ldr	r2, [pc, #176]	; (8002e0c <TIM_Base_SetConfig+0x118>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d023      	beq.n	8002da6 <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a2b      	ldr	r2, [pc, #172]	; (8002e10 <TIM_Base_SetConfig+0x11c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01f      	beq.n	8002da6 <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a2a      	ldr	r2, [pc, #168]	; (8002e14 <TIM_Base_SetConfig+0x120>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d01b      	beq.n	8002da6 <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a29      	ldr	r2, [pc, #164]	; (8002e18 <TIM_Base_SetConfig+0x124>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d017      	beq.n	8002da6 <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a28      	ldr	r2, [pc, #160]	; (8002e1c <TIM_Base_SetConfig+0x128>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d013      	beq.n	8002da6 <TIM_Base_SetConfig+0xb2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a27      	ldr	r2, [pc, #156]	; (8002e20 <TIM_Base_SetConfig+0x12c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00f      	beq.n	8002da6 <TIM_Base_SetConfig+0xb2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a26      	ldr	r2, [pc, #152]	; (8002e24 <TIM_Base_SetConfig+0x130>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00b      	beq.n	8002da6 <TIM_Base_SetConfig+0xb2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a25      	ldr	r2, [pc, #148]	; (8002e28 <TIM_Base_SetConfig+0x134>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d007      	beq.n	8002da6 <TIM_Base_SetConfig+0xb2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a24      	ldr	r2, [pc, #144]	; (8002e2c <TIM_Base_SetConfig+0x138>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d003      	beq.n	8002da6 <TIM_Base_SetConfig+0xb2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a23      	ldr	r2, [pc, #140]	; (8002e30 <TIM_Base_SetConfig+0x13c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d108      	bne.n	8002db8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <TIM_Base_SetConfig+0x114>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d003      	beq.n	8002dec <TIM_Base_SetConfig+0xf8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a0c      	ldr	r2, [pc, #48]	; (8002e18 <TIM_Base_SetConfig+0x124>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d103      	bne.n	8002df4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	615a      	str	r2, [r3, #20]
}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40010000 	.word	0x40010000
 8002e0c:	40000400 	.word	0x40000400
 8002e10:	40000800 	.word	0x40000800
 8002e14:	40000c00 	.word	0x40000c00
 8002e18:	40010400 	.word	0x40010400
 8002e1c:	40014000 	.word	0x40014000
 8002e20:	40014400 	.word	0x40014400
 8002e24:	40014800 	.word	0x40014800
 8002e28:	40001800 	.word	0x40001800
 8002e2c:	40001c00 	.word	0x40001c00
 8002e30:	40002000 	.word	0x40002000

08002e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e03f      	b.n	8002eee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7fe f808 	bl	8000e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2224      	movs	r2, #36	; 0x24
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fe1d 	bl	8003ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695a      	ldr	r2, [r3, #20]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ec4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ed4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b08a      	sub	sp, #40	; 0x28
 8002efa:	af02      	add	r7, sp, #8
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	603b      	str	r3, [r7, #0]
 8002f02:	4613      	mov	r3, r2
 8002f04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	d17c      	bne.n	8003010 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_UART_Transmit+0x2c>
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e075      	b.n	8003012 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_UART_Transmit+0x3e>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e06e      	b.n	8003012 <HAL_UART_Transmit+0x11c>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2221      	movs	r2, #33	; 0x21
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f4a:	f7fe f971 	bl	8001230 <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	88fa      	ldrh	r2, [r7, #6]
 8002f54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	88fa      	ldrh	r2, [r7, #6]
 8002f5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f64:	d108      	bne.n	8002f78 <HAL_UART_Transmit+0x82>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d104      	bne.n	8002f78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	e003      	b.n	8002f80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f88:	e02a      	b.n	8002fe0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2200      	movs	r2, #0
 8002f92:	2180      	movs	r1, #128	; 0x80
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 fb9b 	bl	80036d0 <UART_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e036      	b.n	8003012 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10b      	bne.n	8002fc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	e007      	b.n	8002fd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	781a      	ldrb	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1cf      	bne.n	8002f8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2140      	movs	r1, #64	; 0x40
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 fb6b 	bl	80036d0 <UART_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e006      	b.n	8003012 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	e000      	b.n	8003012 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003010:	2302      	movs	r3, #2
  }
}
 8003012:	4618      	mov	r0, r3
 8003014:	3720      	adds	r7, #32
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b08a      	sub	sp, #40	; 0x28
 800301e:	af02      	add	r7, sp, #8
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	4613      	mov	r3, r2
 8003028:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b20      	cmp	r3, #32
 8003038:	f040 808c 	bne.w	8003154 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_UART_Receive+0x2e>
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e084      	b.n	8003156 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_UART_Receive+0x40>
 8003056:	2302      	movs	r3, #2
 8003058:	e07d      	b.n	8003156 <HAL_UART_Receive+0x13c>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2222      	movs	r2, #34	; 0x22
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003076:	f7fe f8db 	bl	8001230 <HAL_GetTick>
 800307a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	88fa      	ldrh	r2, [r7, #6]
 8003080:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	88fa      	ldrh	r2, [r7, #6]
 8003086:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003090:	d108      	bne.n	80030a4 <HAL_UART_Receive+0x8a>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d104      	bne.n	80030a4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	e003      	b.n	80030ac <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80030b4:	e043      	b.n	800313e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2200      	movs	r2, #0
 80030be:	2120      	movs	r1, #32
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fb05 	bl	80036d0 <UART_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e042      	b.n	8003156 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10c      	bne.n	80030f0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	3302      	adds	r3, #2
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	e01f      	b.n	8003130 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f8:	d007      	beq.n	800310a <HAL_UART_Receive+0xf0>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10a      	bne.n	8003118 <HAL_UART_Receive+0xfe>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e008      	b.n	800312a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003124:	b2da      	uxtb	r2, r3
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3301      	adds	r3, #1
 800312e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1b6      	bne.n	80030b6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	e000      	b.n	8003156 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003154:	2302      	movs	r3, #2
  }
}
 8003156:	4618      	mov	r0, r3
 8003158:	3720      	adds	r7, #32
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b0ba      	sub	sp, #232	; 0xe8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003186:	2300      	movs	r3, #0
 8003188:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800318c:	2300      	movs	r3, #0
 800318e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800319e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10f      	bne.n	80031c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_UART_IRQHandler+0x66>
 80031b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fbd3 	bl	800396a <UART_Receive_IT>
      return;
 80031c4:	e256      	b.n	8003674 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 80de 	beq.w	800338c <HAL_UART_IRQHandler+0x22c>
 80031d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80d1 	beq.w	800338c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_UART_IRQHandler+0xae>
 80031f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800320e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <HAL_UART_IRQHandler+0xd2>
 800321a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f043 0202 	orr.w	r2, r3, #2
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_UART_IRQHandler+0xf6>
 800323e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f043 0204 	orr.w	r2, r3, #4
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d011      	beq.n	8003286 <HAL_UART_IRQHandler+0x126>
 8003262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d105      	bne.n	800327a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800326e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f043 0208 	orr.w	r2, r3, #8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 81ed 	beq.w	800366a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_UART_IRQHandler+0x14e>
 800329c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fb5e 	bl	800396a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b8:	2b40      	cmp	r3, #64	; 0x40
 80032ba:	bf0c      	ite	eq
 80032bc:	2301      	moveq	r3, #1
 80032be:	2300      	movne	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d103      	bne.n	80032da <HAL_UART_IRQHandler+0x17a>
 80032d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d04f      	beq.n	800337a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fa66 	bl	80037ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b40      	cmp	r3, #64	; 0x40
 80032ec:	d141      	bne.n	8003372 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3314      	adds	r3, #20
 80032f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032fc:	e853 3f00 	ldrex	r3, [r3]
 8003300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003304:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800330c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3314      	adds	r3, #20
 8003316:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800331a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800331e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003326:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800332a:	e841 2300 	strex	r3, r2, [r1]
 800332e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1d9      	bne.n	80032ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	2b00      	cmp	r3, #0
 8003340:	d013      	beq.n	800336a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	4a7d      	ldr	r2, [pc, #500]	; (800353c <HAL_UART_IRQHandler+0x3dc>)
 8003348:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe fc8a 	bl	8001c68 <HAL_DMA_Abort_IT>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d016      	beq.n	8003388 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003364:	4610      	mov	r0, r2
 8003366:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003368:	e00e      	b.n	8003388 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f99a 	bl	80036a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003370:	e00a      	b.n	8003388 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f996 	bl	80036a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003378:	e006      	b.n	8003388 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f992 	bl	80036a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003386:	e170      	b.n	800366a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003388:	bf00      	nop
    return;
 800338a:	e16e      	b.n	800366a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	2b01      	cmp	r3, #1
 8003392:	f040 814a 	bne.w	800362a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8143 	beq.w	800362a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 813c 	beq.w	800362a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d2:	2b40      	cmp	r3, #64	; 0x40
 80033d4:	f040 80b4 	bne.w	8003540 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8140 	beq.w	800366e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033f6:	429a      	cmp	r2, r3
 80033f8:	f080 8139 	bcs.w	800366e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003402:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800340e:	f000 8088 	beq.w	8003522 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	330c      	adds	r3, #12
 8003418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003428:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800342c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003430:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	330c      	adds	r3, #12
 800343a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800343e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800344a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1d9      	bne.n	8003412 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3314      	adds	r3, #20
 8003464:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003468:	e853 3f00 	ldrex	r3, [r3]
 800346c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800346e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003470:	f023 0301 	bic.w	r3, r3, #1
 8003474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3314      	adds	r3, #20
 800347e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003482:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003486:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003488:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800348a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e1      	bne.n	800345e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3314      	adds	r3, #20
 80034a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034a4:	e853 3f00 	ldrex	r3, [r3]
 80034a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3314      	adds	r3, #20
 80034ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034c6:	e841 2300 	strex	r3, r2, [r1]
 80034ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e3      	bne.n	800349a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	330c      	adds	r3, #12
 80034e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ea:	e853 3f00 	ldrex	r3, [r3]
 80034ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f2:	f023 0310 	bic.w	r3, r3, #16
 80034f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	330c      	adds	r3, #12
 8003500:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003504:	65ba      	str	r2, [r7, #88]	; 0x58
 8003506:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003508:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800350a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800350c:	e841 2300 	strex	r3, r2, [r1]
 8003510:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1e3      	bne.n	80034e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	4618      	mov	r0, r3
 800351e:	f7fe fb33 	bl	8001b88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800352a:	b29b      	uxth	r3, r3
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	b29b      	uxth	r3, r3
 8003530:	4619      	mov	r1, r3
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f8c0 	bl	80036b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003538:	e099      	b.n	800366e <HAL_UART_IRQHandler+0x50e>
 800353a:	bf00      	nop
 800353c:	08003873 	.word	0x08003873
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003548:	b29b      	uxth	r3, r3
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 808b 	beq.w	8003672 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800355c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8086 	beq.w	8003672 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	330c      	adds	r3, #12
 800356c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	e853 3f00 	ldrex	r3, [r3]
 8003574:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003578:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800357c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	330c      	adds	r3, #12
 8003586:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800358a:	647a      	str	r2, [r7, #68]	; 0x44
 800358c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003590:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003592:	e841 2300 	strex	r3, r2, [r1]
 8003596:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1e3      	bne.n	8003566 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3314      	adds	r3, #20
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	623b      	str	r3, [r7, #32]
   return(result);
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3314      	adds	r3, #20
 80035be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035c2:	633a      	str	r2, [r7, #48]	; 0x30
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ca:	e841 2300 	strex	r3, r2, [r1]
 80035ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e3      	bne.n	800359e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	330c      	adds	r3, #12
 80035ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	e853 3f00 	ldrex	r3, [r3]
 80035f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0310 	bic.w	r3, r3, #16
 80035fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	330c      	adds	r3, #12
 8003604:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003608:	61fa      	str	r2, [r7, #28]
 800360a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	69b9      	ldr	r1, [r7, #24]
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	617b      	str	r3, [r7, #20]
   return(result);
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e3      	bne.n	80035e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800361c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003620:	4619      	mov	r1, r3
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f848 	bl	80036b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003628:	e023      	b.n	8003672 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800362a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_UART_IRQHandler+0x4ea>
 8003636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800363a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f929 	bl	800389a <UART_Transmit_IT>
    return;
 8003648:	e014      	b.n	8003674 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800364a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00e      	beq.n	8003674 <HAL_UART_IRQHandler+0x514>
 8003656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f969 	bl	800393a <UART_EndTransmit_IT>
    return;
 8003668:	e004      	b.n	8003674 <HAL_UART_IRQHandler+0x514>
    return;
 800366a:	bf00      	nop
 800366c:	e002      	b.n	8003674 <HAL_UART_IRQHandler+0x514>
      return;
 800366e:	bf00      	nop
 8003670:	e000      	b.n	8003674 <HAL_UART_IRQHandler+0x514>
      return;
 8003672:	bf00      	nop
  }
}
 8003674:	37e8      	adds	r7, #232	; 0xe8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop

0800367c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b090      	sub	sp, #64	; 0x40
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	4613      	mov	r3, r2
 80036de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e0:	e050      	b.n	8003784 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d04c      	beq.n	8003784 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d007      	beq.n	8003700 <UART_WaitOnFlagUntilTimeout+0x30>
 80036f0:	f7fd fd9e 	bl	8001230 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d241      	bcs.n	8003784 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	330c      	adds	r3, #12
 8003706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	330c      	adds	r3, #12
 800371e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003720:	637a      	str	r2, [r7, #52]	; 0x34
 8003722:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e5      	bne.n	8003700 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3314      	adds	r3, #20
 800373a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	e853 3f00 	ldrex	r3, [r3]
 8003742:	613b      	str	r3, [r7, #16]
   return(result);
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f023 0301 	bic.w	r3, r3, #1
 800374a:	63bb      	str	r3, [r7, #56]	; 0x38
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3314      	adds	r3, #20
 8003752:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003754:	623a      	str	r2, [r7, #32]
 8003756:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003758:	69f9      	ldr	r1, [r7, #28]
 800375a:	6a3a      	ldr	r2, [r7, #32]
 800375c:	e841 2300 	strex	r3, r2, [r1]
 8003760:	61bb      	str	r3, [r7, #24]
   return(result);
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e5      	bne.n	8003734 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e00f      	b.n	80037a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4013      	ands	r3, r2
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	429a      	cmp	r2, r3
 8003792:	bf0c      	ite	eq
 8003794:	2301      	moveq	r3, #1
 8003796:	2300      	movne	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d09f      	beq.n	80036e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3740      	adds	r7, #64	; 0x40
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b095      	sub	sp, #84	; 0x54
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	330c      	adds	r3, #12
 80037ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037be:	e853 3f00 	ldrex	r3, [r3]
 80037c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	330c      	adds	r3, #12
 80037d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037d4:	643a      	str	r2, [r7, #64]	; 0x40
 80037d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037dc:	e841 2300 	strex	r3, r2, [r1]
 80037e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e5      	bne.n	80037b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3314      	adds	r3, #20
 80037ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	e853 3f00 	ldrex	r3, [r3]
 80037f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3314      	adds	r3, #20
 8003806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003808:	62fa      	str	r2, [r7, #44]	; 0x2c
 800380a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800380e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003810:	e841 2300 	strex	r3, r2, [r1]
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e5      	bne.n	80037e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	2b01      	cmp	r3, #1
 8003822:	d119      	bne.n	8003858 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	60bb      	str	r3, [r7, #8]
   return(result);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f023 0310 	bic.w	r3, r3, #16
 800383a:	647b      	str	r3, [r7, #68]	; 0x44
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	330c      	adds	r3, #12
 8003842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003844:	61ba      	str	r2, [r7, #24]
 8003846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	6979      	ldr	r1, [r7, #20]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	613b      	str	r3, [r7, #16]
   return(result);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e5      	bne.n	8003824 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003866:	bf00      	nop
 8003868:	3754      	adds	r7, #84	; 0x54
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f7ff ff09 	bl	80036a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003892:	bf00      	nop
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800389a:	b480      	push	{r7}
 800389c:	b085      	sub	sp, #20
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b21      	cmp	r3, #33	; 0x21
 80038ac:	d13e      	bne.n	800392c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b6:	d114      	bne.n	80038e2 <UART_Transmit_IT+0x48>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d110      	bne.n	80038e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	1c9a      	adds	r2, r3, #2
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	621a      	str	r2, [r3, #32]
 80038e0:	e008      	b.n	80038f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	1c59      	adds	r1, r3, #1
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6211      	str	r1, [r2, #32]
 80038ec:	781a      	ldrb	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	4619      	mov	r1, r3
 8003902:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10f      	bne.n	8003928 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003916:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003926:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	e000      	b.n	800392e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
  }
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003950:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff fe8e 	bl	800367c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b08c      	sub	sp, #48	; 0x30
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b22      	cmp	r3, #34	; 0x22
 800397c:	f040 80ab 	bne.w	8003ad6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003988:	d117      	bne.n	80039ba <UART_Receive_IT+0x50>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d113      	bne.n	80039ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003992:	2300      	movs	r3, #0
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	1c9a      	adds	r2, r3, #2
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	; 0x28
 80039b8:	e026      	b.n	8003a08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039cc:	d007      	beq.n	80039de <UART_Receive_IT+0x74>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <UART_Receive_IT+0x82>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	e008      	b.n	80039fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	4619      	mov	r1, r3
 8003a16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d15a      	bne.n	8003ad2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0220 	bic.w	r2, r2, #32
 8003a2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d135      	bne.n	8003ac8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	330c      	adds	r3, #12
 8003a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	613b      	str	r3, [r7, #16]
   return(result);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f023 0310 	bic.w	r3, r3, #16
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	330c      	adds	r3, #12
 8003a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a82:	623a      	str	r2, [r7, #32]
 8003a84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	69f9      	ldr	r1, [r7, #28]
 8003a88:	6a3a      	ldr	r2, [r7, #32]
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e5      	bne.n	8003a62 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d10a      	bne.n	8003aba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003abe:	4619      	mov	r1, r3
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff fdf9 	bl	80036b8 <HAL_UARTEx_RxEventCallback>
 8003ac6:	e002      	b.n	8003ace <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff fde1 	bl	8003690 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e002      	b.n	8003ad8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e000      	b.n	8003ad8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003ad6:	2302      	movs	r3, #2
  }
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3730      	adds	r7, #48	; 0x30
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae4:	b0c0      	sub	sp, #256	; 0x100
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afc:	68d9      	ldr	r1, [r3, #12]
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	ea40 0301 	orr.w	r3, r0, r1
 8003b08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b38:	f021 010c 	bic.w	r1, r1, #12
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b46:	430b      	orrs	r3, r1
 8003b48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5a:	6999      	ldr	r1, [r3, #24]
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	ea40 0301 	orr.w	r3, r0, r1
 8003b66:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	4b95      	ldr	r3, [pc, #596]	; (8003dc4 <UART_SetConfig+0x2e4>)
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d011      	beq.n	8003b98 <UART_SetConfig+0xb8>
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	4b93      	ldr	r3, [pc, #588]	; (8003dc8 <UART_SetConfig+0x2e8>)
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d00b      	beq.n	8003b98 <UART_SetConfig+0xb8>
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4b91      	ldr	r3, [pc, #580]	; (8003dcc <UART_SetConfig+0x2ec>)
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d005      	beq.n	8003b98 <UART_SetConfig+0xb8>
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4b8f      	ldr	r3, [pc, #572]	; (8003dd0 <UART_SetConfig+0x2f0>)
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d104      	bne.n	8003ba2 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b98:	f7fe fbe8 	bl	800236c <HAL_RCC_GetPCLK2Freq>
 8003b9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ba0:	e003      	b.n	8003baa <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ba2:	f7fe fbcf 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8003ba6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb4:	f040 8110 	bne.w	8003dd8 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bca:	4622      	mov	r2, r4
 8003bcc:	462b      	mov	r3, r5
 8003bce:	1891      	adds	r1, r2, r2
 8003bd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bd2:	415b      	adcs	r3, r3
 8003bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bda:	4621      	mov	r1, r4
 8003bdc:	eb12 0801 	adds.w	r8, r2, r1
 8003be0:	4629      	mov	r1, r5
 8003be2:	eb43 0901 	adc.w	r9, r3, r1
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bfa:	4690      	mov	r8, r2
 8003bfc:	4699      	mov	r9, r3
 8003bfe:	4623      	mov	r3, r4
 8003c00:	eb18 0303 	adds.w	r3, r8, r3
 8003c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c08:	462b      	mov	r3, r5
 8003c0a:	eb49 0303 	adc.w	r3, r9, r3
 8003c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c26:	460b      	mov	r3, r1
 8003c28:	18db      	adds	r3, r3, r3
 8003c2a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	eb42 0303 	adc.w	r3, r2, r3
 8003c32:	657b      	str	r3, [r7, #84]	; 0x54
 8003c34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c3c:	f7fc fb48 	bl	80002d0 <__aeabi_uldivmod>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4b63      	ldr	r3, [pc, #396]	; (8003dd4 <UART_SetConfig+0x2f4>)
 8003c46:	fba3 2302 	umull	r2, r3, r3, r2
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	011c      	lsls	r4, r3, #4
 8003c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c60:	4642      	mov	r2, r8
 8003c62:	464b      	mov	r3, r9
 8003c64:	1891      	adds	r1, r2, r2
 8003c66:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c68:	415b      	adcs	r3, r3
 8003c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c70:	4641      	mov	r1, r8
 8003c72:	eb12 0a01 	adds.w	sl, r2, r1
 8003c76:	4649      	mov	r1, r9
 8003c78:	eb43 0b01 	adc.w	fp, r3, r1
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c90:	4692      	mov	sl, r2
 8003c92:	469b      	mov	fp, r3
 8003c94:	4643      	mov	r3, r8
 8003c96:	eb1a 0303 	adds.w	r3, sl, r3
 8003c9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c9e:	464b      	mov	r3, r9
 8003ca0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	18db      	adds	r3, r3, r3
 8003cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	eb42 0303 	adc.w	r3, r2, r3
 8003cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cd2:	f7fc fafd 	bl	80002d0 <__aeabi_uldivmod>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4b3d      	ldr	r3, [pc, #244]	; (8003dd4 <UART_SetConfig+0x2f4>)
 8003cde:	fba3 2301 	umull	r2, r3, r3, r1
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	2264      	movs	r2, #100	; 0x64
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	1acb      	subs	r3, r1, r3
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cf2:	4b38      	ldr	r3, [pc, #224]	; (8003dd4 <UART_SetConfig+0x2f4>)
 8003cf4:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d00:	441c      	add	r4, r3
 8003d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d14:	4642      	mov	r2, r8
 8003d16:	464b      	mov	r3, r9
 8003d18:	1891      	adds	r1, r2, r2
 8003d1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d1c:	415b      	adcs	r3, r3
 8003d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d24:	4641      	mov	r1, r8
 8003d26:	1851      	adds	r1, r2, r1
 8003d28:	6339      	str	r1, [r7, #48]	; 0x30
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	414b      	adcs	r3, r1
 8003d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d3c:	4659      	mov	r1, fp
 8003d3e:	00cb      	lsls	r3, r1, #3
 8003d40:	4651      	mov	r1, sl
 8003d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d46:	4651      	mov	r1, sl
 8003d48:	00ca      	lsls	r2, r1, #3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4642      	mov	r2, r8
 8003d52:	189b      	adds	r3, r3, r2
 8003d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d58:	464b      	mov	r3, r9
 8003d5a:	460a      	mov	r2, r1
 8003d5c:	eb42 0303 	adc.w	r3, r2, r3
 8003d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d78:	460b      	mov	r3, r1
 8003d7a:	18db      	adds	r3, r3, r3
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d7e:	4613      	mov	r3, r2
 8003d80:	eb42 0303 	adc.w	r3, r2, r3
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d8e:	f7fc fa9f 	bl	80002d0 <__aeabi_uldivmod>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <UART_SetConfig+0x2f4>)
 8003d98:	fba3 1302 	umull	r1, r3, r3, r2
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	2164      	movs	r1, #100	; 0x64
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	3332      	adds	r3, #50	; 0x32
 8003daa:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <UART_SetConfig+0x2f4>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	f003 0207 	and.w	r2, r3, #7
 8003db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4422      	add	r2, r4
 8003dbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dc0:	e109      	b.n	8003fd6 <UART_SetConfig+0x4f6>
 8003dc2:	bf00      	nop
 8003dc4:	40011000 	.word	0x40011000
 8003dc8:	40011400 	.word	0x40011400
 8003dcc:	40011800 	.word	0x40011800
 8003dd0:	40011c00 	.word	0x40011c00
 8003dd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003de2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003de6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003dea:	4642      	mov	r2, r8
 8003dec:	464b      	mov	r3, r9
 8003dee:	1891      	adds	r1, r2, r2
 8003df0:	6239      	str	r1, [r7, #32]
 8003df2:	415b      	adcs	r3, r3
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
 8003df6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dfa:	4641      	mov	r1, r8
 8003dfc:	1854      	adds	r4, r2, r1
 8003dfe:	4649      	mov	r1, r9
 8003e00:	eb43 0501 	adc.w	r5, r3, r1
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	00eb      	lsls	r3, r5, #3
 8003e0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e12:	00e2      	lsls	r2, r4, #3
 8003e14:	4614      	mov	r4, r2
 8003e16:	461d      	mov	r5, r3
 8003e18:	4643      	mov	r3, r8
 8003e1a:	18e3      	adds	r3, r4, r3
 8003e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e20:	464b      	mov	r3, r9
 8003e22:	eb45 0303 	adc.w	r3, r5, r3
 8003e26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e46:	4629      	mov	r1, r5
 8003e48:	008b      	lsls	r3, r1, #2
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e50:	4621      	mov	r1, r4
 8003e52:	008a      	lsls	r2, r1, #2
 8003e54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e58:	f7fc fa3a 	bl	80002d0 <__aeabi_uldivmod>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4b60      	ldr	r3, [pc, #384]	; (8003fe4 <UART_SetConfig+0x504>)
 8003e62:	fba3 2302 	umull	r2, r3, r3, r2
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	011c      	lsls	r4, r3, #4
 8003e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e7c:	4642      	mov	r2, r8
 8003e7e:	464b      	mov	r3, r9
 8003e80:	1891      	adds	r1, r2, r2
 8003e82:	61b9      	str	r1, [r7, #24]
 8003e84:	415b      	adcs	r3, r3
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e8c:	4641      	mov	r1, r8
 8003e8e:	1851      	adds	r1, r2, r1
 8003e90:	6139      	str	r1, [r7, #16]
 8003e92:	4649      	mov	r1, r9
 8003e94:	414b      	adcs	r3, r1
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ea4:	4659      	mov	r1, fp
 8003ea6:	00cb      	lsls	r3, r1, #3
 8003ea8:	4651      	mov	r1, sl
 8003eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eae:	4651      	mov	r1, sl
 8003eb0:	00ca      	lsls	r2, r1, #3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	4642      	mov	r2, r8
 8003eba:	189b      	adds	r3, r3, r2
 8003ebc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ec0:	464b      	mov	r3, r9
 8003ec2:	460a      	mov	r2, r1
 8003ec4:	eb42 0303 	adc.w	r3, r2, r3
 8003ec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ed6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	008b      	lsls	r3, r1, #2
 8003ee8:	4641      	mov	r1, r8
 8003eea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eee:	4641      	mov	r1, r8
 8003ef0:	008a      	lsls	r2, r1, #2
 8003ef2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ef6:	f7fc f9eb 	bl	80002d0 <__aeabi_uldivmod>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4b39      	ldr	r3, [pc, #228]	; (8003fe4 <UART_SetConfig+0x504>)
 8003f00:	fba3 1302 	umull	r1, r3, r3, r2
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	2164      	movs	r1, #100	; 0x64
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	3332      	adds	r3, #50	; 0x32
 8003f12:	4a34      	ldr	r2, [pc, #208]	; (8003fe4 <UART_SetConfig+0x504>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f1e:	441c      	add	r4, r3
 8003f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f24:	2200      	movs	r2, #0
 8003f26:	673b      	str	r3, [r7, #112]	; 0x70
 8003f28:	677a      	str	r2, [r7, #116]	; 0x74
 8003f2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f2e:	4642      	mov	r2, r8
 8003f30:	464b      	mov	r3, r9
 8003f32:	1891      	adds	r1, r2, r2
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	415b      	adcs	r3, r3
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f3e:	4641      	mov	r1, r8
 8003f40:	1851      	adds	r1, r2, r1
 8003f42:	6039      	str	r1, [r7, #0]
 8003f44:	4649      	mov	r1, r9
 8003f46:	414b      	adcs	r3, r1
 8003f48:	607b      	str	r3, [r7, #4]
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f56:	4659      	mov	r1, fp
 8003f58:	00cb      	lsls	r3, r1, #3
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f60:	4651      	mov	r1, sl
 8003f62:	00ca      	lsls	r2, r1, #3
 8003f64:	4610      	mov	r0, r2
 8003f66:	4619      	mov	r1, r3
 8003f68:	4603      	mov	r3, r0
 8003f6a:	4642      	mov	r2, r8
 8003f6c:	189b      	adds	r3, r3, r2
 8003f6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f70:	464b      	mov	r3, r9
 8003f72:	460a      	mov	r2, r1
 8003f74:	eb42 0303 	adc.w	r3, r2, r3
 8003f78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	663b      	str	r3, [r7, #96]	; 0x60
 8003f84:	667a      	str	r2, [r7, #100]	; 0x64
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f92:	4649      	mov	r1, r9
 8003f94:	008b      	lsls	r3, r1, #2
 8003f96:	4641      	mov	r1, r8
 8003f98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	008a      	lsls	r2, r1, #2
 8003fa0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fa4:	f7fc f994 	bl	80002d0 <__aeabi_uldivmod>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <UART_SetConfig+0x504>)
 8003fae:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	2164      	movs	r1, #100	; 0x64
 8003fb6:	fb01 f303 	mul.w	r3, r1, r3
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	3332      	adds	r3, #50	; 0x32
 8003fc0:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <UART_SetConfig+0x504>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	f003 020f 	and.w	r2, r3, #15
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4422      	add	r2, r4
 8003fd4:	609a      	str	r2, [r3, #8]
}
 8003fd6:	bf00      	nop
 8003fd8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fe2:	bf00      	nop
 8003fe4:	51eb851f 	.word	0x51eb851f

08003fe8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ffa:	2b84      	cmp	r3, #132	; 0x84
 8003ffc:	d005      	beq.n	800400a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003ffe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4413      	add	r3, r2
 8004006:	3303      	adds	r3, #3
 8004008:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800400a:	68fb      	ldr	r3, [r7, #12]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800401c:	f001 f80c 	bl	8005038 <vTaskStartScheduler>
  
  return osOK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	bd80      	pop	{r7, pc}

08004026 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004026:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004028:	b089      	sub	sp, #36	; 0x24
 800402a:	af04      	add	r7, sp, #16
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d020      	beq.n	800407a <osThreadCreate+0x54>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01c      	beq.n	800407a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685c      	ldr	r4, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681d      	ldr	r5, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691e      	ldr	r6, [r3, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff ffc8 	bl	8003fe8 <makeFreeRtosPriority>
 8004058:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004062:	9202      	str	r2, [sp, #8]
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	9100      	str	r1, [sp, #0]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	4632      	mov	r2, r6
 800406c:	4629      	mov	r1, r5
 800406e:	4620      	mov	r0, r4
 8004070:	f000 fdd1 	bl	8004c16 <xTaskCreateStatic>
 8004074:	4603      	mov	r3, r0
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	e01c      	b.n	80040b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685c      	ldr	r4, [r3, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004086:	b29e      	uxth	r6, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ffaa 	bl	8003fe8 <makeFreeRtosPriority>
 8004094:	4602      	mov	r2, r0
 8004096:	f107 030c 	add.w	r3, r7, #12
 800409a:	9301      	str	r3, [sp, #4]
 800409c:	9200      	str	r2, [sp, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	4632      	mov	r2, r6
 80040a2:	4629      	mov	r1, r5
 80040a4:	4620      	mov	r0, r4
 80040a6:	f000 fe13 	bl	8004cd0 <xTaskCreate>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d001      	beq.n	80040b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	e000      	b.n	80040b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80040b4:	68fb      	ldr	r3, [r7, #12]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f103 0208 	add.w	r2, r3, #8
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f04f 32ff 	mov.w	r2, #4294967295
 80040d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f103 0208 	add.w	r2, r3, #8
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f103 0208 	add.w	r2, r3, #8
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	601a      	str	r2, [r3, #0]
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004176:	d103      	bne.n	8004180 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	e00c      	b.n	800419a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3308      	adds	r3, #8
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	e002      	b.n	800418e <vListInsert+0x2e>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	429a      	cmp	r2, r3
 8004198:	d2f6      	bcs.n	8004188 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
}
 80041c6:	bf00      	nop
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6892      	ldr	r2, [r2, #8]
 80041e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6852      	ldr	r2, [r2, #4]
 80041f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d103      	bne.n	8004206 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	1e5a      	subs	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800424e:	bf00      	nop
 8004250:	e7fe      	b.n	8004250 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004252:	f001 fe4f 	bl	8005ef4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	68f9      	ldr	r1, [r7, #12]
 8004260:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	441a      	add	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004282:	3b01      	subs	r3, #1
 8004284:	68f9      	ldr	r1, [r7, #12]
 8004286:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	441a      	add	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	22ff      	movs	r2, #255	; 0xff
 8004296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	22ff      	movs	r2, #255	; 0xff
 800429e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d114      	bne.n	80042d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01a      	beq.n	80042e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	3310      	adds	r3, #16
 80042b4:	4618      	mov	r0, r3
 80042b6:	f001 f911 	bl	80054dc <xTaskRemoveFromEventList>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d012      	beq.n	80042e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <xQueueGenericReset+0xcc>)
 80042c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	e009      	b.n	80042e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3310      	adds	r3, #16
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fef1 	bl	80040be <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3324      	adds	r3, #36	; 0x24
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff feec 	bl	80040be <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042e6:	f001 fe35 	bl	8005f54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042ea:	2301      	movs	r3, #1
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	e000ed04 	.word	0xe000ed04

080042f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08a      	sub	sp, #40	; 0x28
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	4613      	mov	r3, r2
 8004304:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10a      	bne.n	8004322 <xQueueGenericCreate+0x2a>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	613b      	str	r3, [r7, #16]
}
 800431e:	bf00      	nop
 8004320:	e7fe      	b.n	8004320 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	3348      	adds	r3, #72	; 0x48
 8004330:	4618      	mov	r0, r3
 8004332:	f001 fec1 	bl	80060b8 <pvPortMalloc>
 8004336:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d011      	beq.n	8004362 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	3348      	adds	r3, #72	; 0x48
 8004346:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004350:	79fa      	ldrb	r2, [r7, #7]
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	4613      	mov	r3, r2
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	68b9      	ldr	r1, [r7, #8]
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f805 	bl	800436c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004362:	69bb      	ldr	r3, [r7, #24]
	}
 8004364:	4618      	mov	r0, r3
 8004366:	3720      	adds	r7, #32
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d103      	bne.n	8004388 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	e002      	b.n	800438e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800439a:	2101      	movs	r1, #1
 800439c:	69b8      	ldr	r0, [r7, #24]
 800439e:	f7ff ff43 	bl	8004228 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043a2:	bf00      	nop
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08e      	sub	sp, #56	; 0x38
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80043ba:	2300      	movs	r3, #0
 80043bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <xQueueGenericSend+0x32>
	__asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043da:	bf00      	nop
 80043dc:	e7fe      	b.n	80043dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d103      	bne.n	80043ec <xQueueGenericSend+0x40>
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <xQueueGenericSend+0x44>
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <xQueueGenericSend+0x46>
 80043f0:	2300      	movs	r3, #0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <xQueueGenericSend+0x60>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004408:	bf00      	nop
 800440a:	e7fe      	b.n	800440a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d103      	bne.n	800441a <xQueueGenericSend+0x6e>
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <xQueueGenericSend+0x72>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <xQueueGenericSend+0x74>
 800441e:	2300      	movs	r3, #0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <xQueueGenericSend+0x8e>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	623b      	str	r3, [r7, #32]
}
 8004436:	bf00      	nop
 8004438:	e7fe      	b.n	8004438 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800443a:	f001 fa0b 	bl	8005854 <xTaskGetSchedulerState>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <xQueueGenericSend+0x9e>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <xQueueGenericSend+0xa2>
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <xQueueGenericSend+0xa4>
 800444e:	2300      	movs	r3, #0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <xQueueGenericSend+0xbe>
	__asm volatile
 8004454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	61fb      	str	r3, [r7, #28]
}
 8004466:	bf00      	nop
 8004468:	e7fe      	b.n	8004468 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800446a:	f001 fd43 	bl	8005ef4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004476:	429a      	cmp	r2, r3
 8004478:	d302      	bcc.n	8004480 <xQueueGenericSend+0xd4>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d129      	bne.n	80044d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	68b9      	ldr	r1, [r7, #8]
 8004484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004486:	f000 fab6 	bl	80049f6 <prvCopyDataToQueue>
 800448a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800448c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	2b00      	cmp	r3, #0
 8004492:	d010      	beq.n	80044b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	3324      	adds	r3, #36	; 0x24
 8004498:	4618      	mov	r0, r3
 800449a:	f001 f81f 	bl	80054dc <xTaskRemoveFromEventList>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d013      	beq.n	80044cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044a4:	4b3f      	ldr	r3, [pc, #252]	; (80045a4 <xQueueGenericSend+0x1f8>)
 80044a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	e00a      	b.n	80044cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80044b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80044bc:	4b39      	ldr	r3, [pc, #228]	; (80045a4 <xQueueGenericSend+0x1f8>)
 80044be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044cc:	f001 fd42 	bl	8005f54 <vPortExitCritical>
				return pdPASS;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e063      	b.n	800459c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d103      	bne.n	80044e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044da:	f001 fd3b 	bl	8005f54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	e05c      	b.n	800459c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d106      	bne.n	80044f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044e8:	f107 0314 	add.w	r3, r7, #20
 80044ec:	4618      	mov	r0, r3
 80044ee:	f001 f857 	bl	80055a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044f2:	2301      	movs	r3, #1
 80044f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044f6:	f001 fd2d 	bl	8005f54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044fa:	f000 fdfd 	bl	80050f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044fe:	f001 fcf9 	bl	8005ef4 <vPortEnterCritical>
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004508:	b25b      	sxtb	r3, r3
 800450a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450e:	d103      	bne.n	8004518 <xQueueGenericSend+0x16c>
 8004510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800451e:	b25b      	sxtb	r3, r3
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d103      	bne.n	800452e <xQueueGenericSend+0x182>
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800452e:	f001 fd11 	bl	8005f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004532:	1d3a      	adds	r2, r7, #4
 8004534:	f107 0314 	add.w	r3, r7, #20
 8004538:	4611      	mov	r1, r2
 800453a:	4618      	mov	r0, r3
 800453c:	f001 f846 	bl	80055cc <xTaskCheckForTimeOut>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d124      	bne.n	8004590 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004546:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004548:	f000 fb4d 	bl	8004be6 <prvIsQueueFull>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d018      	beq.n	8004584 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	3310      	adds	r3, #16
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	4611      	mov	r1, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f000 ff9a 	bl	8005494 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004562:	f000 fad8 	bl	8004b16 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004566:	f000 fdd5 	bl	8005114 <xTaskResumeAll>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	f47f af7c 	bne.w	800446a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004572:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <xQueueGenericSend+0x1f8>)
 8004574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	e772      	b.n	800446a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004586:	f000 fac6 	bl	8004b16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800458a:	f000 fdc3 	bl	8005114 <xTaskResumeAll>
 800458e:	e76c      	b.n	800446a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004592:	f000 fac0 	bl	8004b16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004596:	f000 fdbd 	bl	8005114 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800459a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800459c:	4618      	mov	r0, r3
 800459e:	3738      	adds	r7, #56	; 0x38
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	e000ed04 	.word	0xe000ed04

080045a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08c      	sub	sp, #48	; 0x30
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80045b4:	2300      	movs	r3, #0
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <xQueueReceive+0x30>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	623b      	str	r3, [r7, #32]
}
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d103      	bne.n	80045e6 <xQueueReceive+0x3e>
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <xQueueReceive+0x42>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <xQueueReceive+0x44>
 80045ea:	2300      	movs	r3, #0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <xQueueReceive+0x5e>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	61fb      	str	r3, [r7, #28]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004606:	f001 f925 	bl	8005854 <xTaskGetSchedulerState>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d102      	bne.n	8004616 <xQueueReceive+0x6e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <xQueueReceive+0x72>
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <xQueueReceive+0x74>
 800461a:	2300      	movs	r3, #0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10a      	bne.n	8004636 <xQueueReceive+0x8e>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	61bb      	str	r3, [r7, #24]
}
 8004632:	bf00      	nop
 8004634:	e7fe      	b.n	8004634 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004636:	f001 fc5d 	bl	8005ef4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01f      	beq.n	8004686 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800464a:	f000 fa3e 	bl	8004aca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	1e5a      	subs	r2, r3, #1
 8004652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004654:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00f      	beq.n	800467e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004660:	3310      	adds	r3, #16
 8004662:	4618      	mov	r0, r3
 8004664:	f000 ff3a 	bl	80054dc <xTaskRemoveFromEventList>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d007      	beq.n	800467e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800466e:	4b3d      	ldr	r3, [pc, #244]	; (8004764 <xQueueReceive+0x1bc>)
 8004670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800467e:	f001 fc69 	bl	8005f54 <vPortExitCritical>
				return pdPASS;
 8004682:	2301      	movs	r3, #1
 8004684:	e069      	b.n	800475a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d103      	bne.n	8004694 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800468c:	f001 fc62 	bl	8005f54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004690:	2300      	movs	r3, #0
 8004692:	e062      	b.n	800475a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800469a:	f107 0310 	add.w	r3, r7, #16
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 ff7e 	bl	80055a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046a4:	2301      	movs	r3, #1
 80046a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046a8:	f001 fc54 	bl	8005f54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046ac:	f000 fd24 	bl	80050f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046b0:	f001 fc20 	bl	8005ef4 <vPortEnterCritical>
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046ba:	b25b      	sxtb	r3, r3
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c0:	d103      	bne.n	80046ca <xQueueReceive+0x122>
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046d0:	b25b      	sxtb	r3, r3
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d6:	d103      	bne.n	80046e0 <xQueueReceive+0x138>
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046e0:	f001 fc38 	bl	8005f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046e4:	1d3a      	adds	r2, r7, #4
 80046e6:	f107 0310 	add.w	r3, r7, #16
 80046ea:	4611      	mov	r1, r2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 ff6d 	bl	80055cc <xTaskCheckForTimeOut>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d123      	bne.n	8004740 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046fa:	f000 fa5e 	bl	8004bba <prvIsQueueEmpty>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d017      	beq.n	8004734 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	3324      	adds	r3, #36	; 0x24
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	4611      	mov	r1, r2
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fec1 	bl	8005494 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004714:	f000 f9ff 	bl	8004b16 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004718:	f000 fcfc 	bl	8005114 <xTaskResumeAll>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d189      	bne.n	8004636 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004722:	4b10      	ldr	r3, [pc, #64]	; (8004764 <xQueueReceive+0x1bc>)
 8004724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	e780      	b.n	8004636 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004736:	f000 f9ee 	bl	8004b16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800473a:	f000 fceb 	bl	8005114 <xTaskResumeAll>
 800473e:	e77a      	b.n	8004636 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004742:	f000 f9e8 	bl	8004b16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004746:	f000 fce5 	bl	8005114 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800474a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800474c:	f000 fa35 	bl	8004bba <prvIsQueueEmpty>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	f43f af6f 	beq.w	8004636 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004758:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800475a:	4618      	mov	r0, r3
 800475c:	3730      	adds	r7, #48	; 0x30
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08e      	sub	sp, #56	; 0x38
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004772:	2300      	movs	r3, #0
 8004774:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800477a:	2300      	movs	r3, #0
 800477c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10a      	bne.n	800479a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	623b      	str	r3, [r7, #32]
}
 8004796:	bf00      	nop
 8004798:	e7fe      	b.n	8004798 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	61fb      	str	r3, [r7, #28]
}
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047b8:	f001 f84c 	bl	8005854 <xTaskGetSchedulerState>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d102      	bne.n	80047c8 <xQueueSemaphoreTake+0x60>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <xQueueSemaphoreTake+0x64>
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <xQueueSemaphoreTake+0x66>
 80047cc:	2300      	movs	r3, #0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10a      	bne.n	80047e8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	61bb      	str	r3, [r7, #24]
}
 80047e4:	bf00      	nop
 80047e6:	e7fe      	b.n	80047e6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047e8:	f001 fb84 	bl	8005ef4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80047ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80047f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d024      	beq.n	8004842 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	1e5a      	subs	r2, r3, #1
 80047fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d104      	bne.n	8004812 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004808:	f001 f9cc 	bl	8005ba4 <pvTaskIncrementMutexHeldCount>
 800480c:	4602      	mov	r2, r0
 800480e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004810:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00f      	beq.n	800483a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	3310      	adds	r3, #16
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fe5c 	bl	80054dc <xTaskRemoveFromEventList>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d007      	beq.n	800483a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800482a:	4b54      	ldr	r3, [pc, #336]	; (800497c <xQueueSemaphoreTake+0x214>)
 800482c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800483a:	f001 fb8b 	bl	8005f54 <vPortExitCritical>
				return pdPASS;
 800483e:	2301      	movs	r3, #1
 8004840:	e097      	b.n	8004972 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d111      	bne.n	800486c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	617b      	str	r3, [r7, #20]
}
 8004860:	bf00      	nop
 8004862:	e7fe      	b.n	8004862 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004864:	f001 fb76 	bl	8005f54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004868:	2300      	movs	r3, #0
 800486a:	e082      	b.n	8004972 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800486c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004872:	f107 030c 	add.w	r3, r7, #12
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fe92 	bl	80055a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800487c:	2301      	movs	r3, #1
 800487e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004880:	f001 fb68 	bl	8005f54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004884:	f000 fc38 	bl	80050f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004888:	f001 fb34 	bl	8005ef4 <vPortEnterCritical>
 800488c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004892:	b25b      	sxtb	r3, r3
 8004894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004898:	d103      	bne.n	80048a2 <xQueueSemaphoreTake+0x13a>
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048a8:	b25b      	sxtb	r3, r3
 80048aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ae:	d103      	bne.n	80048b8 <xQueueSemaphoreTake+0x150>
 80048b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048b8:	f001 fb4c 	bl	8005f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048bc:	463a      	mov	r2, r7
 80048be:	f107 030c 	add.w	r3, r7, #12
 80048c2:	4611      	mov	r1, r2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fe81 	bl	80055cc <xTaskCheckForTimeOut>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d132      	bne.n	8004936 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048d2:	f000 f972 	bl	8004bba <prvIsQueueEmpty>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d026      	beq.n	800492a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d109      	bne.n	80048f8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80048e4:	f001 fb06 	bl	8005ef4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 ffcf 	bl	8005890 <xTaskPriorityInherit>
 80048f2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80048f4:	f001 fb2e 	bl	8005f54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fa:	3324      	adds	r3, #36	; 0x24
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	4611      	mov	r1, r2
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fdc7 	bl	8005494 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004906:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004908:	f000 f905 	bl	8004b16 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800490c:	f000 fc02 	bl	8005114 <xTaskResumeAll>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	f47f af68 	bne.w	80047e8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004918:	4b18      	ldr	r3, [pc, #96]	; (800497c <xQueueSemaphoreTake+0x214>)
 800491a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	e75e      	b.n	80047e8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800492a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800492c:	f000 f8f3 	bl	8004b16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004930:	f000 fbf0 	bl	8005114 <xTaskResumeAll>
 8004934:	e758      	b.n	80047e8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004936:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004938:	f000 f8ed 	bl	8004b16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800493c:	f000 fbea 	bl	8005114 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004940:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004942:	f000 f93a 	bl	8004bba <prvIsQueueEmpty>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	f43f af4d 	beq.w	80047e8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00d      	beq.n	8004970 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004954:	f001 face 	bl	8005ef4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004958:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800495a:	f000 f834 	bl	80049c6 <prvGetDisinheritPriorityAfterTimeout>
 800495e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004966:	4618      	mov	r0, r3
 8004968:	f001 f88e 	bl	8005a88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800496c:	f001 faf2 	bl	8005f54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004970:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004972:	4618      	mov	r0, r3
 8004974:	3738      	adds	r7, #56	; 0x38
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	e000ed04 	.word	0xe000ed04

08004980 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10a      	bne.n	80049a8 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 8004992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	60fb      	str	r3, [r7, #12]
}
 80049a4:	bf00      	nop
 80049a6:	e7fe      	b.n	80049a6 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 80049a8:	f001 faa4 	bl	8005ef4 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80049b8:	f001 facc 	bl	8005f54 <vPortExitCritical>

	return uxReturn;
 80049bc:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d006      	beq.n	80049e4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f1c3 0307 	rsb	r3, r3, #7
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	e001      	b.n	80049e8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80049e8:	68fb      	ldr	r3, [r7, #12]
	}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b086      	sub	sp, #24
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10d      	bne.n	8004a30 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d14d      	bne.n	8004ab8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 ffab 	bl	800597c <xTaskPriorityDisinherit>
 8004a26:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	609a      	str	r2, [r3, #8]
 8004a2e:	e043      	b.n	8004ab8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d119      	bne.n	8004a6a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6858      	ldr	r0, [r3, #4]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	461a      	mov	r2, r3
 8004a40:	68b9      	ldr	r1, [r7, #8]
 8004a42:	f001 fd4d 	bl	80064e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	441a      	add	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d32b      	bcc.n	8004ab8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	605a      	str	r2, [r3, #4]
 8004a68:	e026      	b.n	8004ab8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	68d8      	ldr	r0, [r3, #12]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	461a      	mov	r2, r3
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	f001 fd33 	bl	80064e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	425b      	negs	r3, r3
 8004a84:	441a      	add	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d207      	bcs.n	8004aa6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	425b      	negs	r3, r3
 8004aa0:	441a      	add	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d105      	bne.n	8004ab8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ac0:	697b      	ldr	r3, [r7, #20]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b082      	sub	sp, #8
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d018      	beq.n	8004b0e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	441a      	add	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d303      	bcc.n	8004afe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68d9      	ldr	r1, [r3, #12]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	461a      	mov	r2, r3
 8004b08:	6838      	ldr	r0, [r7, #0]
 8004b0a:	f001 fce9 	bl	80064e0 <memcpy>
	}
}
 8004b0e:	bf00      	nop
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b1e:	f001 f9e9 	bl	8005ef4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b28:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b2a:	e011      	b.n	8004b50 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d012      	beq.n	8004b5a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3324      	adds	r3, #36	; 0x24
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fccf 	bl	80054dc <xTaskRemoveFromEventList>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b44:	f000 fda4 	bl	8005690 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	dce9      	bgt.n	8004b2c <prvUnlockQueue+0x16>
 8004b58:	e000      	b.n	8004b5c <prvUnlockQueue+0x46>
					break;
 8004b5a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	22ff      	movs	r2, #255	; 0xff
 8004b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b64:	f001 f9f6 	bl	8005f54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b68:	f001 f9c4 	bl	8005ef4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b72:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b74:	e011      	b.n	8004b9a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d012      	beq.n	8004ba4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	3310      	adds	r3, #16
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fcaa 	bl	80054dc <xTaskRemoveFromEventList>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b8e:	f000 fd7f 	bl	8005690 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b92:	7bbb      	ldrb	r3, [r7, #14]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	dce9      	bgt.n	8004b76 <prvUnlockQueue+0x60>
 8004ba2:	e000      	b.n	8004ba6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ba4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	22ff      	movs	r2, #255	; 0xff
 8004baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004bae:	f001 f9d1 	bl	8005f54 <vPortExitCritical>
}
 8004bb2:	bf00      	nop
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bc2:	f001 f997 	bl	8005ef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d102      	bne.n	8004bd4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	e001      	b.n	8004bd8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bd8:	f001 f9bc 	bl	8005f54 <vPortExitCritical>

	return xReturn;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bee:	f001 f981 	bl	8005ef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d102      	bne.n	8004c04 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	e001      	b.n	8004c08 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c08:	f001 f9a4 	bl	8005f54 <vPortExitCritical>

	return xReturn;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b08e      	sub	sp, #56	; 0x38
 8004c1a:	af04      	add	r7, sp, #16
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	623b      	str	r3, [r7, #32]
}
 8004c3c:	bf00      	nop
 8004c3e:	e7fe      	b.n	8004c3e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10a      	bne.n	8004c5c <xTaskCreateStatic+0x46>
	__asm volatile
 8004c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	61fb      	str	r3, [r7, #28]
}
 8004c58:	bf00      	nop
 8004c5a:	e7fe      	b.n	8004c5a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c5c:	2354      	movs	r3, #84	; 0x54
 8004c5e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b54      	cmp	r3, #84	; 0x54
 8004c64:	d00a      	beq.n	8004c7c <xTaskCreateStatic+0x66>
	__asm volatile
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	61bb      	str	r3, [r7, #24]
}
 8004c78:	bf00      	nop
 8004c7a:	e7fe      	b.n	8004c7a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01e      	beq.n	8004cc2 <xTaskCreateStatic+0xac>
 8004c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d01b      	beq.n	8004cc2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c92:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	9303      	str	r3, [sp, #12]
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	9302      	str	r3, [sp, #8]
 8004ca4:	f107 0314 	add.w	r3, r7, #20
 8004ca8:	9301      	str	r3, [sp, #4]
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f850 	bl	8004d5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cbc:	f000 f8d4 	bl	8004e68 <prvAddNewTaskToReadyList>
 8004cc0:	e001      	b.n	8004cc6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004cc6:	697b      	ldr	r3, [r7, #20]
	}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3728      	adds	r7, #40	; 0x28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08c      	sub	sp, #48	; 0x30
 8004cd4:	af04      	add	r7, sp, #16
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ce0:	88fb      	ldrh	r3, [r7, #6]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f001 f9e7 	bl	80060b8 <pvPortMalloc>
 8004cea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00e      	beq.n	8004d10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004cf2:	2054      	movs	r0, #84	; 0x54
 8004cf4:	f001 f9e0 	bl	80060b8 <pvPortMalloc>
 8004cf8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	631a      	str	r2, [r3, #48]	; 0x30
 8004d06:	e005      	b.n	8004d14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d08:	6978      	ldr	r0, [r7, #20]
 8004d0a:	f001 faa1 	bl	8006250 <vPortFree>
 8004d0e:	e001      	b.n	8004d14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d017      	beq.n	8004d4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	2300      	movs	r3, #0
 8004d26:	9303      	str	r3, [sp, #12]
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	9302      	str	r3, [sp, #8]
 8004d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68b9      	ldr	r1, [r7, #8]
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f80e 	bl	8004d5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d3e:	69f8      	ldr	r0, [r7, #28]
 8004d40:	f000 f892 	bl	8004e68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d44:	2301      	movs	r3, #1
 8004d46:	61bb      	str	r3, [r7, #24]
 8004d48:	e002      	b.n	8004d50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d50:	69bb      	ldr	r3, [r7, #24]
	}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3720      	adds	r7, #32
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b088      	sub	sp, #32
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
 8004d66:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d72:	3b01      	subs	r3, #1
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	f023 0307 	bic.w	r3, r3, #7
 8004d80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	617b      	str	r3, [r7, #20]
}
 8004d9e:	bf00      	nop
 8004da0:	e7fe      	b.n	8004da0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01f      	beq.n	8004de8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004da8:	2300      	movs	r3, #0
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	e012      	b.n	8004dd4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	4413      	add	r3, r2
 8004db4:	7819      	ldrb	r1, [r3, #0]
 8004db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	4413      	add	r3, r2
 8004dbc:	3334      	adds	r3, #52	; 0x34
 8004dbe:	460a      	mov	r2, r1
 8004dc0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d006      	beq.n	8004ddc <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	61fb      	str	r3, [r7, #28]
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	2b0f      	cmp	r3, #15
 8004dd8:	d9e9      	bls.n	8004dae <prvInitialiseNewTask+0x54>
 8004dda:	e000      	b.n	8004dde <prvInitialiseNewTask+0x84>
			{
				break;
 8004ddc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004de6:	e003      	b.n	8004df0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df2:	2b06      	cmp	r3, #6
 8004df4:	d901      	bls.n	8004dfa <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004df6:	2306      	movs	r3, #6
 8004df8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dfe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e04:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	2200      	movs	r2, #0
 8004e0a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff f974 	bl	80040fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	3318      	adds	r3, #24
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff f96f 	bl	80040fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	f1c3 0207 	rsb	r2, r3, #7
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e38:	2200      	movs	r2, #0
 8004e3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	68f9      	ldr	r1, [r7, #12]
 8004e48:	69b8      	ldr	r0, [r7, #24]
 8004e4a:	f000 ff25 	bl	8005c98 <pxPortInitialiseStack>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e60:	bf00      	nop
 8004e62:	3720      	adds	r7, #32
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e70:	f001 f840 	bl	8005ef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e74:	4b2a      	ldr	r3, [pc, #168]	; (8004f20 <prvAddNewTaskToReadyList+0xb8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	4a29      	ldr	r2, [pc, #164]	; (8004f20 <prvAddNewTaskToReadyList+0xb8>)
 8004e7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e7e:	4b29      	ldr	r3, [pc, #164]	; (8004f24 <prvAddNewTaskToReadyList+0xbc>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e86:	4a27      	ldr	r2, [pc, #156]	; (8004f24 <prvAddNewTaskToReadyList+0xbc>)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e8c:	4b24      	ldr	r3, [pc, #144]	; (8004f20 <prvAddNewTaskToReadyList+0xb8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d110      	bne.n	8004eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e94:	f000 fc20 	bl	80056d8 <prvInitialiseTaskLists>
 8004e98:	e00d      	b.n	8004eb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e9a:	4b23      	ldr	r3, [pc, #140]	; (8004f28 <prvAddNewTaskToReadyList+0xc0>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d109      	bne.n	8004eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ea2:	4b20      	ldr	r3, [pc, #128]	; (8004f24 <prvAddNewTaskToReadyList+0xbc>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d802      	bhi.n	8004eb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004eb0:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <prvAddNewTaskToReadyList+0xbc>)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004eb6:	4b1d      	ldr	r3, [pc, #116]	; (8004f2c <prvAddNewTaskToReadyList+0xc4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	4a1b      	ldr	r2, [pc, #108]	; (8004f2c <prvAddNewTaskToReadyList+0xc4>)
 8004ebe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	409a      	lsls	r2, r3
 8004ec8:	4b19      	ldr	r3, [pc, #100]	; (8004f30 <prvAddNewTaskToReadyList+0xc8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	4a18      	ldr	r2, [pc, #96]	; (8004f30 <prvAddNewTaskToReadyList+0xc8>)
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <prvAddNewTaskToReadyList+0xcc>)
 8004ee0:	441a      	add	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f7ff f915 	bl	8004118 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004eee:	f001 f831 	bl	8005f54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ef2:	4b0d      	ldr	r3, [pc, #52]	; (8004f28 <prvAddNewTaskToReadyList+0xc0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00e      	beq.n	8004f18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004efa:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <prvAddNewTaskToReadyList+0xbc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d207      	bcs.n	8004f18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <prvAddNewTaskToReadyList+0xd0>)
 8004f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f18:	bf00      	nop
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	20000538 	.word	0x20000538
 8004f24:	20000438 	.word	0x20000438
 8004f28:	20000544 	.word	0x20000544
 8004f2c:	20000554 	.word	0x20000554
 8004f30:	20000540 	.word	0x20000540
 8004f34:	2000043c 	.word	0x2000043c
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08a      	sub	sp, #40	; 0x28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004f46:	2300      	movs	r3, #0
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10a      	bne.n	8004f66 <vTaskDelayUntil+0x2a>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	617b      	str	r3, [r7, #20]
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <vTaskDelayUntil+0x46>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	613b      	str	r3, [r7, #16]
}
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004f82:	4b2a      	ldr	r3, [pc, #168]	; (800502c <vTaskDelayUntil+0xf0>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <vTaskDelayUntil+0x64>
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	60fb      	str	r3, [r7, #12]
}
 8004f9c:	bf00      	nop
 8004f9e:	e7fe      	b.n	8004f9e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004fa0:	f000 f8aa 	bl	80050f8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004fa4:	4b22      	ldr	r3, [pc, #136]	; (8005030 <vTaskDelayUntil+0xf4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6a3a      	ldr	r2, [r7, #32]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d20b      	bcs.n	8004fd6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d211      	bcs.n	8004fec <vTaskDelayUntil+0xb0>
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d90d      	bls.n	8004fec <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd4:	e00a      	b.n	8004fec <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69fa      	ldr	r2, [r7, #28]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d303      	bcc.n	8004fe8 <vTaskDelayUntil+0xac>
 8004fe0:	69fa      	ldr	r2, [r7, #28]
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d901      	bls.n	8004fec <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69fa      	ldr	r2, [r7, #28]
 8004ff0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d006      	beq.n	8005006 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2100      	movs	r1, #0
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fde3 	bl	8005bcc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005006:	f000 f885 	bl	8005114 <xTaskResumeAll>
 800500a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d107      	bne.n	8005022 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005012:	4b08      	ldr	r3, [pc, #32]	; (8005034 <vTaskDelayUntil+0xf8>)
 8005014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005022:	bf00      	nop
 8005024:	3728      	adds	r7, #40	; 0x28
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000560 	.word	0x20000560
 8005030:	2000053c 	.word	0x2000053c
 8005034:	e000ed04 	.word	0xe000ed04

08005038 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800503e:	2300      	movs	r3, #0
 8005040:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005042:	2300      	movs	r3, #0
 8005044:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005046:	463a      	mov	r2, r7
 8005048:	1d39      	adds	r1, r7, #4
 800504a:	f107 0308 	add.w	r3, r7, #8
 800504e:	4618      	mov	r0, r3
 8005050:	f7fb fac0 	bl	80005d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005054:	6839      	ldr	r1, [r7, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	9202      	str	r2, [sp, #8]
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	2300      	movs	r3, #0
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	2300      	movs	r3, #0
 8005064:	460a      	mov	r2, r1
 8005066:	491e      	ldr	r1, [pc, #120]	; (80050e0 <vTaskStartScheduler+0xa8>)
 8005068:	481e      	ldr	r0, [pc, #120]	; (80050e4 <vTaskStartScheduler+0xac>)
 800506a:	f7ff fdd4 	bl	8004c16 <xTaskCreateStatic>
 800506e:	4603      	mov	r3, r0
 8005070:	4a1d      	ldr	r2, [pc, #116]	; (80050e8 <vTaskStartScheduler+0xb0>)
 8005072:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005074:	4b1c      	ldr	r3, [pc, #112]	; (80050e8 <vTaskStartScheduler+0xb0>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800507c:	2301      	movs	r3, #1
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	e001      	b.n	8005086 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d116      	bne.n	80050ba <vTaskStartScheduler+0x82>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	613b      	str	r3, [r7, #16]
}
 800509e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050a0:	4b12      	ldr	r3, [pc, #72]	; (80050ec <vTaskStartScheduler+0xb4>)
 80050a2:	f04f 32ff 	mov.w	r2, #4294967295
 80050a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050a8:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <vTaskStartScheduler+0xb8>)
 80050aa:	2201      	movs	r2, #1
 80050ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80050ae:	4b11      	ldr	r3, [pc, #68]	; (80050f4 <vTaskStartScheduler+0xbc>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050b4:	f000 fe7c 	bl	8005db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050b8:	e00e      	b.n	80050d8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c0:	d10a      	bne.n	80050d8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	60fb      	str	r3, [r7, #12]
}
 80050d4:	bf00      	nop
 80050d6:	e7fe      	b.n	80050d6 <vTaskStartScheduler+0x9e>
}
 80050d8:	bf00      	nop
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	08006eb8 	.word	0x08006eb8
 80050e4:	080056a9 	.word	0x080056a9
 80050e8:	2000055c 	.word	0x2000055c
 80050ec:	20000558 	.word	0x20000558
 80050f0:	20000544 	.word	0x20000544
 80050f4:	2000053c 	.word	0x2000053c

080050f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80050fc:	4b04      	ldr	r3, [pc, #16]	; (8005110 <vTaskSuspendAll+0x18>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3301      	adds	r3, #1
 8005102:	4a03      	ldr	r2, [pc, #12]	; (8005110 <vTaskSuspendAll+0x18>)
 8005104:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005106:	bf00      	nop
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	20000560 	.word	0x20000560

08005114 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005122:	4b41      	ldr	r3, [pc, #260]	; (8005228 <xTaskResumeAll+0x114>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10a      	bne.n	8005140 <xTaskResumeAll+0x2c>
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	603b      	str	r3, [r7, #0]
}
 800513c:	bf00      	nop
 800513e:	e7fe      	b.n	800513e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005140:	f000 fed8 	bl	8005ef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005144:	4b38      	ldr	r3, [pc, #224]	; (8005228 <xTaskResumeAll+0x114>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3b01      	subs	r3, #1
 800514a:	4a37      	ldr	r2, [pc, #220]	; (8005228 <xTaskResumeAll+0x114>)
 800514c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800514e:	4b36      	ldr	r3, [pc, #216]	; (8005228 <xTaskResumeAll+0x114>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d161      	bne.n	800521a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005156:	4b35      	ldr	r3, [pc, #212]	; (800522c <xTaskResumeAll+0x118>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d05d      	beq.n	800521a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800515e:	e02e      	b.n	80051be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005160:	4b33      	ldr	r3, [pc, #204]	; (8005230 <xTaskResumeAll+0x11c>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3318      	adds	r3, #24
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff f830 	bl	80041d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3304      	adds	r3, #4
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff f82b 	bl	80041d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	2201      	movs	r2, #1
 8005182:	409a      	lsls	r2, r3
 8005184:	4b2b      	ldr	r3, [pc, #172]	; (8005234 <xTaskResumeAll+0x120>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4313      	orrs	r3, r2
 800518a:	4a2a      	ldr	r2, [pc, #168]	; (8005234 <xTaskResumeAll+0x120>)
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4a27      	ldr	r2, [pc, #156]	; (8005238 <xTaskResumeAll+0x124>)
 800519c:	441a      	add	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3304      	adds	r3, #4
 80051a2:	4619      	mov	r1, r3
 80051a4:	4610      	mov	r0, r2
 80051a6:	f7fe ffb7 	bl	8004118 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ae:	4b23      	ldr	r3, [pc, #140]	; (800523c <xTaskResumeAll+0x128>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d302      	bcc.n	80051be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80051b8:	4b21      	ldr	r3, [pc, #132]	; (8005240 <xTaskResumeAll+0x12c>)
 80051ba:	2201      	movs	r2, #1
 80051bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051be:	4b1c      	ldr	r3, [pc, #112]	; (8005230 <xTaskResumeAll+0x11c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1cc      	bne.n	8005160 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051cc:	f000 fb22 	bl	8005814 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80051d0:	4b1c      	ldr	r3, [pc, #112]	; (8005244 <xTaskResumeAll+0x130>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d010      	beq.n	80051fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051dc:	f000 f846 	bl	800526c <xTaskIncrementTick>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80051e6:	4b16      	ldr	r3, [pc, #88]	; (8005240 <xTaskResumeAll+0x12c>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1f1      	bne.n	80051dc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80051f8:	4b12      	ldr	r3, [pc, #72]	; (8005244 <xTaskResumeAll+0x130>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051fe:	4b10      	ldr	r3, [pc, #64]	; (8005240 <xTaskResumeAll+0x12c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d009      	beq.n	800521a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005206:	2301      	movs	r3, #1
 8005208:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800520a:	4b0f      	ldr	r3, [pc, #60]	; (8005248 <xTaskResumeAll+0x134>)
 800520c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800521a:	f000 fe9b 	bl	8005f54 <vPortExitCritical>

	return xAlreadyYielded;
 800521e:	68bb      	ldr	r3, [r7, #8]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20000560 	.word	0x20000560
 800522c:	20000538 	.word	0x20000538
 8005230:	200004f8 	.word	0x200004f8
 8005234:	20000540 	.word	0x20000540
 8005238:	2000043c 	.word	0x2000043c
 800523c:	20000438 	.word	0x20000438
 8005240:	2000054c 	.word	0x2000054c
 8005244:	20000548 	.word	0x20000548
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005252:	4b05      	ldr	r3, [pc, #20]	; (8005268 <xTaskGetTickCount+0x1c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005258:	687b      	ldr	r3, [r7, #4]
}
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	2000053c 	.word	0x2000053c

0800526c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005272:	2300      	movs	r3, #0
 8005274:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005276:	4b4e      	ldr	r3, [pc, #312]	; (80053b0 <xTaskIncrementTick+0x144>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	f040 808e 	bne.w	800539c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005280:	4b4c      	ldr	r3, [pc, #304]	; (80053b4 <xTaskIncrementTick+0x148>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3301      	adds	r3, #1
 8005286:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005288:	4a4a      	ldr	r2, [pc, #296]	; (80053b4 <xTaskIncrementTick+0x148>)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d120      	bne.n	80052d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005294:	4b48      	ldr	r3, [pc, #288]	; (80053b8 <xTaskIncrementTick+0x14c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	603b      	str	r3, [r7, #0]
}
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <xTaskIncrementTick+0x46>
 80052b4:	4b40      	ldr	r3, [pc, #256]	; (80053b8 <xTaskIncrementTick+0x14c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	4b40      	ldr	r3, [pc, #256]	; (80053bc <xTaskIncrementTick+0x150>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a3e      	ldr	r2, [pc, #248]	; (80053b8 <xTaskIncrementTick+0x14c>)
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	4a3e      	ldr	r2, [pc, #248]	; (80053bc <xTaskIncrementTick+0x150>)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	4b3d      	ldr	r3, [pc, #244]	; (80053c0 <xTaskIncrementTick+0x154>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3301      	adds	r3, #1
 80052ce:	4a3c      	ldr	r2, [pc, #240]	; (80053c0 <xTaskIncrementTick+0x154>)
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	f000 fa9f 	bl	8005814 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052d6:	4b3b      	ldr	r3, [pc, #236]	; (80053c4 <xTaskIncrementTick+0x158>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d348      	bcc.n	8005372 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052e0:	4b35      	ldr	r3, [pc, #212]	; (80053b8 <xTaskIncrementTick+0x14c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d104      	bne.n	80052f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ea:	4b36      	ldr	r3, [pc, #216]	; (80053c4 <xTaskIncrementTick+0x158>)
 80052ec:	f04f 32ff 	mov.w	r2, #4294967295
 80052f0:	601a      	str	r2, [r3, #0]
					break;
 80052f2:	e03e      	b.n	8005372 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052f4:	4b30      	ldr	r3, [pc, #192]	; (80053b8 <xTaskIncrementTick+0x14c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	429a      	cmp	r2, r3
 800530a:	d203      	bcs.n	8005314 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800530c:	4a2d      	ldr	r2, [pc, #180]	; (80053c4 <xTaskIncrementTick+0x158>)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005312:	e02e      	b.n	8005372 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	3304      	adds	r3, #4
 8005318:	4618      	mov	r0, r3
 800531a:	f7fe ff5a 	bl	80041d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005322:	2b00      	cmp	r3, #0
 8005324:	d004      	beq.n	8005330 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	3318      	adds	r3, #24
 800532a:	4618      	mov	r0, r3
 800532c:	f7fe ff51 	bl	80041d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	2201      	movs	r2, #1
 8005336:	409a      	lsls	r2, r3
 8005338:	4b23      	ldr	r3, [pc, #140]	; (80053c8 <xTaskIncrementTick+0x15c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4313      	orrs	r3, r2
 800533e:	4a22      	ldr	r2, [pc, #136]	; (80053c8 <xTaskIncrementTick+0x15c>)
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4a1f      	ldr	r2, [pc, #124]	; (80053cc <xTaskIncrementTick+0x160>)
 8005350:	441a      	add	r2, r3
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	3304      	adds	r3, #4
 8005356:	4619      	mov	r1, r3
 8005358:	4610      	mov	r0, r2
 800535a:	f7fe fedd 	bl	8004118 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005362:	4b1b      	ldr	r3, [pc, #108]	; (80053d0 <xTaskIncrementTick+0x164>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	429a      	cmp	r2, r3
 800536a:	d3b9      	bcc.n	80052e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800536c:	2301      	movs	r3, #1
 800536e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005370:	e7b6      	b.n	80052e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005372:	4b17      	ldr	r3, [pc, #92]	; (80053d0 <xTaskIncrementTick+0x164>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005378:	4914      	ldr	r1, [pc, #80]	; (80053cc <xTaskIncrementTick+0x160>)
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d901      	bls.n	800538e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800538a:	2301      	movs	r3, #1
 800538c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800538e:	4b11      	ldr	r3, [pc, #68]	; (80053d4 <xTaskIncrementTick+0x168>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005396:	2301      	movs	r3, #1
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	e004      	b.n	80053a6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <xTaskIncrementTick+0x16c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3301      	adds	r3, #1
 80053a2:	4a0d      	ldr	r2, [pc, #52]	; (80053d8 <xTaskIncrementTick+0x16c>)
 80053a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80053a6:	697b      	ldr	r3, [r7, #20]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	20000560 	.word	0x20000560
 80053b4:	2000053c 	.word	0x2000053c
 80053b8:	200004f0 	.word	0x200004f0
 80053bc:	200004f4 	.word	0x200004f4
 80053c0:	20000550 	.word	0x20000550
 80053c4:	20000558 	.word	0x20000558
 80053c8:	20000540 	.word	0x20000540
 80053cc:	2000043c 	.word	0x2000043c
 80053d0:	20000438 	.word	0x20000438
 80053d4:	2000054c 	.word	0x2000054c
 80053d8:	20000548 	.word	0x20000548

080053dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053e2:	4b27      	ldr	r3, [pc, #156]	; (8005480 <vTaskSwitchContext+0xa4>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053ea:	4b26      	ldr	r3, [pc, #152]	; (8005484 <vTaskSwitchContext+0xa8>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053f0:	e03f      	b.n	8005472 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80053f2:	4b24      	ldr	r3, [pc, #144]	; (8005484 <vTaskSwitchContext+0xa8>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053f8:	4b23      	ldr	r3, [pc, #140]	; (8005488 <vTaskSwitchContext+0xac>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	fab3 f383 	clz	r3, r3
 8005404:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005406:	7afb      	ldrb	r3, [r7, #11]
 8005408:	f1c3 031f 	rsb	r3, r3, #31
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	491f      	ldr	r1, [pc, #124]	; (800548c <vTaskSwitchContext+0xb0>)
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	440b      	add	r3, r1
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	607b      	str	r3, [r7, #4]
}
 8005434:	bf00      	nop
 8005436:	e7fe      	b.n	8005436 <vTaskSwitchContext+0x5a>
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4a12      	ldr	r2, [pc, #72]	; (800548c <vTaskSwitchContext+0xb0>)
 8005444:	4413      	add	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	605a      	str	r2, [r3, #4]
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	3308      	adds	r3, #8
 800545a:	429a      	cmp	r2, r3
 800545c:	d104      	bne.n	8005468 <vTaskSwitchContext+0x8c>
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	605a      	str	r2, [r3, #4]
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	4a08      	ldr	r2, [pc, #32]	; (8005490 <vTaskSwitchContext+0xb4>)
 8005470:	6013      	str	r3, [r2, #0]
}
 8005472:	bf00      	nop
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	20000560 	.word	0x20000560
 8005484:	2000054c 	.word	0x2000054c
 8005488:	20000540 	.word	0x20000540
 800548c:	2000043c 	.word	0x2000043c
 8005490:	20000438 	.word	0x20000438

08005494 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	60fb      	str	r3, [r7, #12]
}
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054ba:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <vTaskPlaceOnEventList+0x44>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3318      	adds	r3, #24
 80054c0:	4619      	mov	r1, r3
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fe fe4c 	bl	8004160 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054c8:	2101      	movs	r1, #1
 80054ca:	6838      	ldr	r0, [r7, #0]
 80054cc:	f000 fb7e 	bl	8005bcc <prvAddCurrentTaskToDelayedList>
}
 80054d0:	bf00      	nop
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	20000438 	.word	0x20000438

080054dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10a      	bne.n	8005508 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	60fb      	str	r3, [r7, #12]
}
 8005504:	bf00      	nop
 8005506:	e7fe      	b.n	8005506 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	3318      	adds	r3, #24
 800550c:	4618      	mov	r0, r3
 800550e:	f7fe fe60 	bl	80041d2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005512:	4b1d      	ldr	r3, [pc, #116]	; (8005588 <xTaskRemoveFromEventList+0xac>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d11c      	bne.n	8005554 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	3304      	adds	r3, #4
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe fe57 	bl	80041d2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	2201      	movs	r2, #1
 800552a:	409a      	lsls	r2, r3
 800552c:	4b17      	ldr	r3, [pc, #92]	; (800558c <xTaskRemoveFromEventList+0xb0>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4313      	orrs	r3, r2
 8005532:	4a16      	ldr	r2, [pc, #88]	; (800558c <xTaskRemoveFromEventList+0xb0>)
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553a:	4613      	mov	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4a13      	ldr	r2, [pc, #76]	; (8005590 <xTaskRemoveFromEventList+0xb4>)
 8005544:	441a      	add	r2, r3
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	3304      	adds	r3, #4
 800554a:	4619      	mov	r1, r3
 800554c:	4610      	mov	r0, r2
 800554e:	f7fe fde3 	bl	8004118 <vListInsertEnd>
 8005552:	e005      	b.n	8005560 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	3318      	adds	r3, #24
 8005558:	4619      	mov	r1, r3
 800555a:	480e      	ldr	r0, [pc, #56]	; (8005594 <xTaskRemoveFromEventList+0xb8>)
 800555c:	f7fe fddc 	bl	8004118 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005564:	4b0c      	ldr	r3, [pc, #48]	; (8005598 <xTaskRemoveFromEventList+0xbc>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	429a      	cmp	r2, r3
 800556c:	d905      	bls.n	800557a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800556e:	2301      	movs	r3, #1
 8005570:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005572:	4b0a      	ldr	r3, [pc, #40]	; (800559c <xTaskRemoveFromEventList+0xc0>)
 8005574:	2201      	movs	r2, #1
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	e001      	b.n	800557e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800557a:	2300      	movs	r3, #0
 800557c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800557e:	697b      	ldr	r3, [r7, #20]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	20000560 	.word	0x20000560
 800558c:	20000540 	.word	0x20000540
 8005590:	2000043c 	.word	0x2000043c
 8005594:	200004f8 	.word	0x200004f8
 8005598:	20000438 	.word	0x20000438
 800559c:	2000054c 	.word	0x2000054c

080055a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055a8:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <vTaskInternalSetTimeOutState+0x24>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055b0:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <vTaskInternalSetTimeOutState+0x28>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	605a      	str	r2, [r3, #4]
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	20000550 	.word	0x20000550
 80055c8:	2000053c 	.word	0x2000053c

080055cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	613b      	str	r3, [r7, #16]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10a      	bne.n	800560e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	60fb      	str	r3, [r7, #12]
}
 800560a:	bf00      	nop
 800560c:	e7fe      	b.n	800560c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800560e:	f000 fc71 	bl	8005ef4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005612:	4b1d      	ldr	r3, [pc, #116]	; (8005688 <xTaskCheckForTimeOut+0xbc>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562a:	d102      	bne.n	8005632 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800562c:	2300      	movs	r3, #0
 800562e:	61fb      	str	r3, [r7, #28]
 8005630:	e023      	b.n	800567a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	4b15      	ldr	r3, [pc, #84]	; (800568c <xTaskCheckForTimeOut+0xc0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d007      	beq.n	800564e <xTaskCheckForTimeOut+0x82>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	429a      	cmp	r2, r3
 8005646:	d302      	bcc.n	800564e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005648:	2301      	movs	r3, #1
 800564a:	61fb      	str	r3, [r7, #28]
 800564c:	e015      	b.n	800567a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	429a      	cmp	r2, r3
 8005656:	d20b      	bcs.n	8005670 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	1ad2      	subs	r2, r2, r3
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff ff9b 	bl	80055a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800566a:	2300      	movs	r3, #0
 800566c:	61fb      	str	r3, [r7, #28]
 800566e:	e004      	b.n	800567a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005676:	2301      	movs	r3, #1
 8005678:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800567a:	f000 fc6b 	bl	8005f54 <vPortExitCritical>

	return xReturn;
 800567e:	69fb      	ldr	r3, [r7, #28]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3720      	adds	r7, #32
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	2000053c 	.word	0x2000053c
 800568c:	20000550 	.word	0x20000550

08005690 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005694:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <vTaskMissedYield+0x14>)
 8005696:	2201      	movs	r2, #1
 8005698:	601a      	str	r2, [r3, #0]
}
 800569a:	bf00      	nop
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	2000054c 	.word	0x2000054c

080056a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056b0:	f000 f852 	bl	8005758 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056b4:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <prvIdleTask+0x28>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d9f9      	bls.n	80056b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <prvIdleTask+0x2c>)
 80056be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056cc:	e7f0      	b.n	80056b0 <prvIdleTask+0x8>
 80056ce:	bf00      	nop
 80056d0:	2000043c 	.word	0x2000043c
 80056d4:	e000ed04 	.word	0xe000ed04

080056d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056de:	2300      	movs	r3, #0
 80056e0:	607b      	str	r3, [r7, #4]
 80056e2:	e00c      	b.n	80056fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	4613      	mov	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4a12      	ldr	r2, [pc, #72]	; (8005738 <prvInitialiseTaskLists+0x60>)
 80056f0:	4413      	add	r3, r2
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fe fce3 	bl	80040be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3301      	adds	r3, #1
 80056fc:	607b      	str	r3, [r7, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b06      	cmp	r3, #6
 8005702:	d9ef      	bls.n	80056e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005704:	480d      	ldr	r0, [pc, #52]	; (800573c <prvInitialiseTaskLists+0x64>)
 8005706:	f7fe fcda 	bl	80040be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800570a:	480d      	ldr	r0, [pc, #52]	; (8005740 <prvInitialiseTaskLists+0x68>)
 800570c:	f7fe fcd7 	bl	80040be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005710:	480c      	ldr	r0, [pc, #48]	; (8005744 <prvInitialiseTaskLists+0x6c>)
 8005712:	f7fe fcd4 	bl	80040be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005716:	480c      	ldr	r0, [pc, #48]	; (8005748 <prvInitialiseTaskLists+0x70>)
 8005718:	f7fe fcd1 	bl	80040be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800571c:	480b      	ldr	r0, [pc, #44]	; (800574c <prvInitialiseTaskLists+0x74>)
 800571e:	f7fe fcce 	bl	80040be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005722:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <prvInitialiseTaskLists+0x78>)
 8005724:	4a05      	ldr	r2, [pc, #20]	; (800573c <prvInitialiseTaskLists+0x64>)
 8005726:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005728:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <prvInitialiseTaskLists+0x7c>)
 800572a:	4a05      	ldr	r2, [pc, #20]	; (8005740 <prvInitialiseTaskLists+0x68>)
 800572c:	601a      	str	r2, [r3, #0]
}
 800572e:	bf00      	nop
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	2000043c 	.word	0x2000043c
 800573c:	200004c8 	.word	0x200004c8
 8005740:	200004dc 	.word	0x200004dc
 8005744:	200004f8 	.word	0x200004f8
 8005748:	2000050c 	.word	0x2000050c
 800574c:	20000524 	.word	0x20000524
 8005750:	200004f0 	.word	0x200004f0
 8005754:	200004f4 	.word	0x200004f4

08005758 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800575e:	e019      	b.n	8005794 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005760:	f000 fbc8 	bl	8005ef4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005764:	4b10      	ldr	r3, [pc, #64]	; (80057a8 <prvCheckTasksWaitingTermination+0x50>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3304      	adds	r3, #4
 8005770:	4618      	mov	r0, r3
 8005772:	f7fe fd2e 	bl	80041d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005776:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <prvCheckTasksWaitingTermination+0x54>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3b01      	subs	r3, #1
 800577c:	4a0b      	ldr	r2, [pc, #44]	; (80057ac <prvCheckTasksWaitingTermination+0x54>)
 800577e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <prvCheckTasksWaitingTermination+0x58>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3b01      	subs	r3, #1
 8005786:	4a0a      	ldr	r2, [pc, #40]	; (80057b0 <prvCheckTasksWaitingTermination+0x58>)
 8005788:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800578a:	f000 fbe3 	bl	8005f54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f810 	bl	80057b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005794:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <prvCheckTasksWaitingTermination+0x58>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e1      	bne.n	8005760 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800579c:	bf00      	nop
 800579e:	bf00      	nop
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	2000050c 	.word	0x2000050c
 80057ac:	20000538 	.word	0x20000538
 80057b0:	20000520 	.word	0x20000520

080057b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d108      	bne.n	80057d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fd40 	bl	8006250 <vPortFree>
				vPortFree( pxTCB );
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fd3d 	bl	8006250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057d6:	e018      	b.n	800580a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d103      	bne.n	80057ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fd34 	bl	8006250 <vPortFree>
	}
 80057e8:	e00f      	b.n	800580a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d00a      	beq.n	800580a <prvDeleteTCB+0x56>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	60fb      	str	r3, [r7, #12]
}
 8005806:	bf00      	nop
 8005808:	e7fe      	b.n	8005808 <prvDeleteTCB+0x54>
	}
 800580a:	bf00      	nop
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
	...

08005814 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800581a:	4b0c      	ldr	r3, [pc, #48]	; (800584c <prvResetNextTaskUnblockTime+0x38>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d104      	bne.n	800582e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005824:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <prvResetNextTaskUnblockTime+0x3c>)
 8005826:	f04f 32ff 	mov.w	r2, #4294967295
 800582a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800582c:	e008      	b.n	8005840 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800582e:	4b07      	ldr	r3, [pc, #28]	; (800584c <prvResetNextTaskUnblockTime+0x38>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4a04      	ldr	r2, [pc, #16]	; (8005850 <prvResetNextTaskUnblockTime+0x3c>)
 800583e:	6013      	str	r3, [r2, #0]
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	200004f0 	.word	0x200004f0
 8005850:	20000558 	.word	0x20000558

08005854 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800585a:	4b0b      	ldr	r3, [pc, #44]	; (8005888 <xTaskGetSchedulerState+0x34>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005862:	2301      	movs	r3, #1
 8005864:	607b      	str	r3, [r7, #4]
 8005866:	e008      	b.n	800587a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005868:	4b08      	ldr	r3, [pc, #32]	; (800588c <xTaskGetSchedulerState+0x38>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d102      	bne.n	8005876 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005870:	2302      	movs	r3, #2
 8005872:	607b      	str	r3, [r7, #4]
 8005874:	e001      	b.n	800587a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005876:	2300      	movs	r3, #0
 8005878:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800587a:	687b      	ldr	r3, [r7, #4]
	}
 800587c:	4618      	mov	r0, r3
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	20000544 	.word	0x20000544
 800588c:	20000560 	.word	0x20000560

08005890 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d05e      	beq.n	8005964 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058aa:	4b31      	ldr	r3, [pc, #196]	; (8005970 <xTaskPriorityInherit+0xe0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d24e      	bcs.n	8005952 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	db06      	blt.n	80058ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058bc:	4b2c      	ldr	r3, [pc, #176]	; (8005970 <xTaskPriorityInherit+0xe0>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c2:	f1c3 0207 	rsb	r2, r3, #7
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6959      	ldr	r1, [r3, #20]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4a26      	ldr	r2, [pc, #152]	; (8005974 <xTaskPriorityInherit+0xe4>)
 80058dc:	4413      	add	r3, r2
 80058de:	4299      	cmp	r1, r3
 80058e0:	d12f      	bne.n	8005942 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	3304      	adds	r3, #4
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fe fc73 	bl	80041d2 <uxListRemove>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10a      	bne.n	8005908 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f6:	2201      	movs	r2, #1
 80058f8:	fa02 f303 	lsl.w	r3, r2, r3
 80058fc:	43da      	mvns	r2, r3
 80058fe:	4b1e      	ldr	r3, [pc, #120]	; (8005978 <xTaskPriorityInherit+0xe8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4013      	ands	r3, r2
 8005904:	4a1c      	ldr	r2, [pc, #112]	; (8005978 <xTaskPriorityInherit+0xe8>)
 8005906:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005908:	4b19      	ldr	r3, [pc, #100]	; (8005970 <xTaskPriorityInherit+0xe0>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005916:	2201      	movs	r2, #1
 8005918:	409a      	lsls	r2, r3
 800591a:	4b17      	ldr	r3, [pc, #92]	; (8005978 <xTaskPriorityInherit+0xe8>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4313      	orrs	r3, r2
 8005920:	4a15      	ldr	r2, [pc, #84]	; (8005978 <xTaskPriorityInherit+0xe8>)
 8005922:	6013      	str	r3, [r2, #0]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005928:	4613      	mov	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4a10      	ldr	r2, [pc, #64]	; (8005974 <xTaskPriorityInherit+0xe4>)
 8005932:	441a      	add	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	3304      	adds	r3, #4
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f7fe fbec 	bl	8004118 <vListInsertEnd>
 8005940:	e004      	b.n	800594c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005942:	4b0b      	ldr	r3, [pc, #44]	; (8005970 <xTaskPriorityInherit+0xe0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800594c:	2301      	movs	r3, #1
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	e008      	b.n	8005964 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005956:	4b06      	ldr	r3, [pc, #24]	; (8005970 <xTaskPriorityInherit+0xe0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	429a      	cmp	r2, r3
 800595e:	d201      	bcs.n	8005964 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005960:	2301      	movs	r3, #1
 8005962:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005964:	68fb      	ldr	r3, [r7, #12]
	}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000438 	.word	0x20000438
 8005974:	2000043c 	.word	0x2000043c
 8005978:	20000540 	.word	0x20000540

0800597c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005988:	2300      	movs	r3, #0
 800598a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d06e      	beq.n	8005a70 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005992:	4b3a      	ldr	r3, [pc, #232]	; (8005a7c <xTaskPriorityDisinherit+0x100>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	429a      	cmp	r2, r3
 800599a:	d00a      	beq.n	80059b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	60fb      	str	r3, [r7, #12]
}
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	60bb      	str	r3, [r7, #8]
}
 80059cc:	bf00      	nop
 80059ce:	e7fe      	b.n	80059ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d4:	1e5a      	subs	r2, r3, #1
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d044      	beq.n	8005a70 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d140      	bne.n	8005a70 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	3304      	adds	r3, #4
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe fbed 	bl	80041d2 <uxListRemove>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d115      	bne.n	8005a2a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a02:	491f      	ldr	r1, [pc, #124]	; (8005a80 <xTaskPriorityDisinherit+0x104>)
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10a      	bne.n	8005a2a <xTaskPriorityDisinherit+0xae>
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	2201      	movs	r2, #1
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	43da      	mvns	r2, r3
 8005a20:	4b18      	ldr	r3, [pc, #96]	; (8005a84 <xTaskPriorityDisinherit+0x108>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4013      	ands	r3, r2
 8005a26:	4a17      	ldr	r2, [pc, #92]	; (8005a84 <xTaskPriorityDisinherit+0x108>)
 8005a28:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	f1c3 0207 	rsb	r2, r3, #7
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a42:	2201      	movs	r2, #1
 8005a44:	409a      	lsls	r2, r3
 8005a46:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <xTaskPriorityDisinherit+0x108>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	4a0d      	ldr	r2, [pc, #52]	; (8005a84 <xTaskPriorityDisinherit+0x108>)
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4a08      	ldr	r2, [pc, #32]	; (8005a80 <xTaskPriorityDisinherit+0x104>)
 8005a5e:	441a      	add	r2, r3
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f7fe fb56 	bl	8004118 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a70:	697b      	ldr	r3, [r7, #20]
	}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000438 	.word	0x20000438
 8005a80:	2000043c 	.word	0x2000043c
 8005a84:	20000540 	.word	0x20000540

08005a88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005a96:	2301      	movs	r3, #1
 8005a98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d077      	beq.n	8005b90 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	60fb      	str	r3, [r7, #12]
}
 8005aba:	bf00      	nop
 8005abc:	e7fe      	b.n	8005abc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d902      	bls.n	8005ace <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	61fb      	str	r3, [r7, #28]
 8005acc:	e002      	b.n	8005ad4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d058      	beq.n	8005b90 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d153      	bne.n	8005b90 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005ae8:	4b2b      	ldr	r3, [pc, #172]	; (8005b98 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d10a      	bne.n	8005b08 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	60bb      	str	r3, [r7, #8]
}
 8005b04:	bf00      	nop
 8005b06:	e7fe      	b.n	8005b06 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	69fa      	ldr	r2, [r7, #28]
 8005b12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	db04      	blt.n	8005b26 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	f1c3 0207 	rsb	r2, r3, #7
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	6959      	ldr	r1, [r3, #20]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4a19      	ldr	r2, [pc, #100]	; (8005b9c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005b36:	4413      	add	r3, r2
 8005b38:	4299      	cmp	r1, r3
 8005b3a:	d129      	bne.n	8005b90 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	3304      	adds	r3, #4
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fe fb46 	bl	80041d2 <uxListRemove>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10a      	bne.n	8005b62 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	2201      	movs	r2, #1
 8005b52:	fa02 f303 	lsl.w	r3, r2, r3
 8005b56:	43da      	mvns	r2, r3
 8005b58:	4b11      	ldr	r3, [pc, #68]	; (8005ba0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	4a10      	ldr	r2, [pc, #64]	; (8005ba0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005b60:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b66:	2201      	movs	r2, #1
 8005b68:	409a      	lsls	r2, r3
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	4a0b      	ldr	r2, [pc, #44]	; (8005ba0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4a06      	ldr	r2, [pc, #24]	; (8005b9c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005b82:	441a      	add	r2, r3
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	3304      	adds	r3, #4
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	f7fe fac4 	bl	8004118 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b90:	bf00      	nop
 8005b92:	3720      	adds	r7, #32
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20000438 	.word	0x20000438
 8005b9c:	2000043c 	.word	0x2000043c
 8005ba0:	20000540 	.word	0x20000540

08005ba4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005ba8:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d004      	beq.n	8005bba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005bb0:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bb6:	3201      	adds	r2, #1
 8005bb8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005bba:	4b03      	ldr	r3, [pc, #12]	; (8005bc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
	}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	20000438 	.word	0x20000438

08005bcc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bd6:	4b29      	ldr	r3, [pc, #164]	; (8005c7c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bdc:	4b28      	ldr	r3, [pc, #160]	; (8005c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3304      	adds	r3, #4
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fe faf5 	bl	80041d2 <uxListRemove>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10b      	bne.n	8005c06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005bee:	4b24      	ldr	r3, [pc, #144]	; (8005c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	43da      	mvns	r2, r3
 8005bfc:	4b21      	ldr	r3, [pc, #132]	; (8005c84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4013      	ands	r3, r2
 8005c02:	4a20      	ldr	r2, [pc, #128]	; (8005c84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d10a      	bne.n	8005c24 <prvAddCurrentTaskToDelayedList+0x58>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d007      	beq.n	8005c24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c14:	4b1a      	ldr	r3, [pc, #104]	; (8005c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	481a      	ldr	r0, [pc, #104]	; (8005c88 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005c1e:	f7fe fa7b 	bl	8004118 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c22:	e026      	b.n	8005c72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4413      	add	r3, r2
 8005c2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c2c:	4b14      	ldr	r3, [pc, #80]	; (8005c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d209      	bcs.n	8005c50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c3c:	4b13      	ldr	r3, [pc, #76]	; (8005c8c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	4b0f      	ldr	r3, [pc, #60]	; (8005c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3304      	adds	r3, #4
 8005c46:	4619      	mov	r1, r3
 8005c48:	4610      	mov	r0, r2
 8005c4a:	f7fe fa89 	bl	8004160 <vListInsert>
}
 8005c4e:	e010      	b.n	8005c72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c50:	4b0f      	ldr	r3, [pc, #60]	; (8005c90 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	4b0a      	ldr	r3, [pc, #40]	; (8005c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3304      	adds	r3, #4
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	f7fe fa7f 	bl	8004160 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c62:	4b0c      	ldr	r3, [pc, #48]	; (8005c94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d202      	bcs.n	8005c72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c6c:	4a09      	ldr	r2, [pc, #36]	; (8005c94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	6013      	str	r3, [r2, #0]
}
 8005c72:	bf00      	nop
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	2000053c 	.word	0x2000053c
 8005c80:	20000438 	.word	0x20000438
 8005c84:	20000540 	.word	0x20000540
 8005c88:	20000524 	.word	0x20000524
 8005c8c:	200004f4 	.word	0x200004f4
 8005c90:	200004f0 	.word	0x200004f0
 8005c94:	20000558 	.word	0x20000558

08005c98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	3b04      	subs	r3, #4
 8005ca8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3b04      	subs	r3, #4
 8005cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f023 0201 	bic.w	r2, r3, #1
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3b04      	subs	r3, #4
 8005cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005cc8:	4a0c      	ldr	r2, [pc, #48]	; (8005cfc <pxPortInitialiseStack+0x64>)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	3b14      	subs	r3, #20
 8005cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3b04      	subs	r3, #4
 8005cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f06f 0202 	mvn.w	r2, #2
 8005ce6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	3b20      	subs	r3, #32
 8005cec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005cee:	68fb      	ldr	r3, [r7, #12]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	08005d01 	.word	0x08005d01

08005d00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d06:	2300      	movs	r3, #0
 8005d08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d0a:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <prvTaskExitError+0x54>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d12:	d00a      	beq.n	8005d2a <prvTaskExitError+0x2a>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	60fb      	str	r3, [r7, #12]
}
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <prvTaskExitError+0x28>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	60bb      	str	r3, [r7, #8]
}
 8005d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d3e:	bf00      	nop
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0fc      	beq.n	8005d40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d46:	bf00      	nop
 8005d48:	bf00      	nop
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	20000018 	.word	0x20000018
	...

08005d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d60:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <pxCurrentTCBConst2>)
 8005d62:	6819      	ldr	r1, [r3, #0]
 8005d64:	6808      	ldr	r0, [r1, #0]
 8005d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6a:	f380 8809 	msr	PSP, r0
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f04f 0000 	mov.w	r0, #0
 8005d76:	f380 8811 	msr	BASEPRI, r0
 8005d7a:	4770      	bx	lr
 8005d7c:	f3af 8000 	nop.w

08005d80 <pxCurrentTCBConst2>:
 8005d80:	20000438 	.word	0x20000438
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop

08005d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d88:	4808      	ldr	r0, [pc, #32]	; (8005dac <prvPortStartFirstTask+0x24>)
 8005d8a:	6800      	ldr	r0, [r0, #0]
 8005d8c:	6800      	ldr	r0, [r0, #0]
 8005d8e:	f380 8808 	msr	MSP, r0
 8005d92:	f04f 0000 	mov.w	r0, #0
 8005d96:	f380 8814 	msr	CONTROL, r0
 8005d9a:	b662      	cpsie	i
 8005d9c:	b661      	cpsie	f
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	df00      	svc	0
 8005da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005daa:	bf00      	nop
 8005dac:	e000ed08 	.word	0xe000ed08

08005db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005db6:	4b46      	ldr	r3, [pc, #280]	; (8005ed0 <xPortStartScheduler+0x120>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a46      	ldr	r2, [pc, #280]	; (8005ed4 <xPortStartScheduler+0x124>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d10a      	bne.n	8005dd6 <xPortStartScheduler+0x26>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	613b      	str	r3, [r7, #16]
}
 8005dd2:	bf00      	nop
 8005dd4:	e7fe      	b.n	8005dd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005dd6:	4b3e      	ldr	r3, [pc, #248]	; (8005ed0 <xPortStartScheduler+0x120>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a3f      	ldr	r2, [pc, #252]	; (8005ed8 <xPortStartScheduler+0x128>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d10a      	bne.n	8005df6 <xPortStartScheduler+0x46>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	60fb      	str	r3, [r7, #12]
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005df6:	4b39      	ldr	r3, [pc, #228]	; (8005edc <xPortStartScheduler+0x12c>)
 8005df8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	22ff      	movs	r2, #255	; 0xff
 8005e06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	4b31      	ldr	r3, [pc, #196]	; (8005ee0 <xPortStartScheduler+0x130>)
 8005e1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e1e:	4b31      	ldr	r3, [pc, #196]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e20:	2207      	movs	r2, #7
 8005e22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e24:	e009      	b.n	8005e3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005e26:	4b2f      	ldr	r3, [pc, #188]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	4a2d      	ldr	r2, [pc, #180]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e42:	2b80      	cmp	r3, #128	; 0x80
 8005e44:	d0ef      	beq.n	8005e26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e46:	4b27      	ldr	r3, [pc, #156]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f1c3 0307 	rsb	r3, r3, #7
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d00a      	beq.n	8005e68 <xPortStartScheduler+0xb8>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	60bb      	str	r3, [r7, #8]
}
 8005e64:	bf00      	nop
 8005e66:	e7fe      	b.n	8005e66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e68:	4b1e      	ldr	r3, [pc, #120]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e72:	4b1c      	ldr	r3, [pc, #112]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e7a:	4a1a      	ldr	r2, [pc, #104]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e86:	4b18      	ldr	r3, [pc, #96]	; (8005ee8 <xPortStartScheduler+0x138>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a17      	ldr	r2, [pc, #92]	; (8005ee8 <xPortStartScheduler+0x138>)
 8005e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e92:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <xPortStartScheduler+0x138>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a14      	ldr	r2, [pc, #80]	; (8005ee8 <xPortStartScheduler+0x138>)
 8005e98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e9e:	f000 f8dd 	bl	800605c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ea2:	4b12      	ldr	r3, [pc, #72]	; (8005eec <xPortStartScheduler+0x13c>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ea8:	f000 f8fc 	bl	80060a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005eac:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <xPortStartScheduler+0x140>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a0f      	ldr	r2, [pc, #60]	; (8005ef0 <xPortStartScheduler+0x140>)
 8005eb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005eb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005eb8:	f7ff ff66 	bl	8005d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ebc:	f7ff fa8e 	bl	80053dc <vTaskSwitchContext>
	prvTaskExitError();
 8005ec0:	f7ff ff1e 	bl	8005d00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	e000ed00 	.word	0xe000ed00
 8005ed4:	410fc271 	.word	0x410fc271
 8005ed8:	410fc270 	.word	0x410fc270
 8005edc:	e000e400 	.word	0xe000e400
 8005ee0:	20000564 	.word	0x20000564
 8005ee4:	20000568 	.word	0x20000568
 8005ee8:	e000ed20 	.word	0xe000ed20
 8005eec:	20000018 	.word	0x20000018
 8005ef0:	e000ef34 	.word	0xe000ef34

08005ef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	607b      	str	r3, [r7, #4]
}
 8005f0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f0e:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <vPortEnterCritical+0x58>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3301      	adds	r3, #1
 8005f14:	4a0d      	ldr	r2, [pc, #52]	; (8005f4c <vPortEnterCritical+0x58>)
 8005f16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f18:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <vPortEnterCritical+0x58>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d10f      	bne.n	8005f40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f20:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <vPortEnterCritical+0x5c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <vPortEnterCritical+0x4c>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	603b      	str	r3, [r7, #0]
}
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <vPortEnterCritical+0x4a>
	}
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	20000018 	.word	0x20000018
 8005f50:	e000ed04 	.word	0xe000ed04

08005f54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f5a:	4b12      	ldr	r3, [pc, #72]	; (8005fa4 <vPortExitCritical+0x50>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <vPortExitCritical+0x24>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	607b      	str	r3, [r7, #4]
}
 8005f74:	bf00      	nop
 8005f76:	e7fe      	b.n	8005f76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f78:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <vPortExitCritical+0x50>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	4a09      	ldr	r2, [pc, #36]	; (8005fa4 <vPortExitCritical+0x50>)
 8005f80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f82:	4b08      	ldr	r3, [pc, #32]	; (8005fa4 <vPortExitCritical+0x50>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d105      	bne.n	8005f96 <vPortExitCritical+0x42>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20000018 	.word	0x20000018
	...

08005fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fb0:	f3ef 8009 	mrs	r0, PSP
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	4b15      	ldr	r3, [pc, #84]	; (8006010 <pxCurrentTCBConst>)
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	f01e 0f10 	tst.w	lr, #16
 8005fc0:	bf08      	it	eq
 8005fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fca:	6010      	str	r0, [r2, #0]
 8005fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005fd4:	f380 8811 	msr	BASEPRI, r0
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f7ff f9fc 	bl	80053dc <vTaskSwitchContext>
 8005fe4:	f04f 0000 	mov.w	r0, #0
 8005fe8:	f380 8811 	msr	BASEPRI, r0
 8005fec:	bc09      	pop	{r0, r3}
 8005fee:	6819      	ldr	r1, [r3, #0]
 8005ff0:	6808      	ldr	r0, [r1, #0]
 8005ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff6:	f01e 0f10 	tst.w	lr, #16
 8005ffa:	bf08      	it	eq
 8005ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006000:	f380 8809 	msr	PSP, r0
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	f3af 8000 	nop.w

08006010 <pxCurrentTCBConst>:
 8006010:	20000438 	.word	0x20000438
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop

08006018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	607b      	str	r3, [r7, #4]
}
 8006030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006032:	f7ff f91b 	bl	800526c <xTaskIncrementTick>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800603c:	4b06      	ldr	r3, [pc, #24]	; (8006058 <SysTick_Handler+0x40>)
 800603e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	2300      	movs	r3, #0
 8006046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	f383 8811 	msr	BASEPRI, r3
}
 800604e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	e000ed04 	.word	0xe000ed04

0800605c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <vPortSetupTimerInterrupt+0x34>)
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006066:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <vPortSetupTimerInterrupt+0x38>)
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <vPortSetupTimerInterrupt+0x3c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a0a      	ldr	r2, [pc, #40]	; (800609c <vPortSetupTimerInterrupt+0x40>)
 8006072:	fba2 2303 	umull	r2, r3, r2, r3
 8006076:	099b      	lsrs	r3, r3, #6
 8006078:	4a09      	ldr	r2, [pc, #36]	; (80060a0 <vPortSetupTimerInterrupt+0x44>)
 800607a:	3b01      	subs	r3, #1
 800607c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800607e:	4b04      	ldr	r3, [pc, #16]	; (8006090 <vPortSetupTimerInterrupt+0x34>)
 8006080:	2207      	movs	r2, #7
 8006082:	601a      	str	r2, [r3, #0]
}
 8006084:	bf00      	nop
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	e000e010 	.word	0xe000e010
 8006094:	e000e018 	.word	0xe000e018
 8006098:	2000000c 	.word	0x2000000c
 800609c:	10624dd3 	.word	0x10624dd3
 80060a0:	e000e014 	.word	0xe000e014

080060a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80060b4 <vPortEnableVFP+0x10>
 80060a8:	6801      	ldr	r1, [r0, #0]
 80060aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80060ae:	6001      	str	r1, [r0, #0]
 80060b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060b2:	bf00      	nop
 80060b4:	e000ed88 	.word	0xe000ed88

080060b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08a      	sub	sp, #40	; 0x28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80060c0:	2300      	movs	r3, #0
 80060c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80060c4:	f7ff f818 	bl	80050f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80060c8:	4b5b      	ldr	r3, [pc, #364]	; (8006238 <pvPortMalloc+0x180>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060d0:	f000 f920 	bl	8006314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060d4:	4b59      	ldr	r3, [pc, #356]	; (800623c <pvPortMalloc+0x184>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4013      	ands	r3, r2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f040 8093 	bne.w	8006208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01d      	beq.n	8006124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80060e8:	2208      	movs	r2, #8
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4413      	add	r3, r2
 80060ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d014      	beq.n	8006124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f023 0307 	bic.w	r3, r3, #7
 8006100:	3308      	adds	r3, #8
 8006102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <pvPortMalloc+0x6c>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	617b      	str	r3, [r7, #20]
}
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d06e      	beq.n	8006208 <pvPortMalloc+0x150>
 800612a:	4b45      	ldr	r3, [pc, #276]	; (8006240 <pvPortMalloc+0x188>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	429a      	cmp	r2, r3
 8006132:	d869      	bhi.n	8006208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006134:	4b43      	ldr	r3, [pc, #268]	; (8006244 <pvPortMalloc+0x18c>)
 8006136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006138:	4b42      	ldr	r3, [pc, #264]	; (8006244 <pvPortMalloc+0x18c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800613e:	e004      	b.n	800614a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	429a      	cmp	r2, r3
 8006152:	d903      	bls.n	800615c <pvPortMalloc+0xa4>
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1f1      	bne.n	8006140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800615c:	4b36      	ldr	r3, [pc, #216]	; (8006238 <pvPortMalloc+0x180>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006162:	429a      	cmp	r2, r3
 8006164:	d050      	beq.n	8006208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2208      	movs	r2, #8
 800616c:	4413      	add	r3, r2
 800616e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	1ad2      	subs	r2, r2, r3
 8006180:	2308      	movs	r3, #8
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	429a      	cmp	r2, r3
 8006186:	d91f      	bls.n	80061c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4413      	add	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <pvPortMalloc+0xf8>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	613b      	str	r3, [r7, #16]
}
 80061ac:	bf00      	nop
 80061ae:	e7fe      	b.n	80061ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	1ad2      	subs	r2, r2, r3
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061c2:	69b8      	ldr	r0, [r7, #24]
 80061c4:	f000 f908 	bl	80063d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061c8:	4b1d      	ldr	r3, [pc, #116]	; (8006240 <pvPortMalloc+0x188>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	4a1b      	ldr	r2, [pc, #108]	; (8006240 <pvPortMalloc+0x188>)
 80061d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061d6:	4b1a      	ldr	r3, [pc, #104]	; (8006240 <pvPortMalloc+0x188>)
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	4b1b      	ldr	r3, [pc, #108]	; (8006248 <pvPortMalloc+0x190>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d203      	bcs.n	80061ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061e2:	4b17      	ldr	r3, [pc, #92]	; (8006240 <pvPortMalloc+0x188>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a18      	ldr	r2, [pc, #96]	; (8006248 <pvPortMalloc+0x190>)
 80061e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	4b13      	ldr	r3, [pc, #76]	; (800623c <pvPortMalloc+0x184>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	431a      	orrs	r2, r3
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80061fe:	4b13      	ldr	r3, [pc, #76]	; (800624c <pvPortMalloc+0x194>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3301      	adds	r3, #1
 8006204:	4a11      	ldr	r2, [pc, #68]	; (800624c <pvPortMalloc+0x194>)
 8006206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006208:	f7fe ff84 	bl	8005114 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <pvPortMalloc+0x174>
	__asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	60fb      	str	r3, [r7, #12]
}
 8006228:	bf00      	nop
 800622a:	e7fe      	b.n	800622a <pvPortMalloc+0x172>
	return pvReturn;
 800622c:	69fb      	ldr	r3, [r7, #28]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3728      	adds	r7, #40	; 0x28
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	20004174 	.word	0x20004174
 800623c:	20004188 	.word	0x20004188
 8006240:	20004178 	.word	0x20004178
 8006244:	2000416c 	.word	0x2000416c
 8006248:	2000417c 	.word	0x2000417c
 800624c:	20004180 	.word	0x20004180

08006250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d04d      	beq.n	80062fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006262:	2308      	movs	r3, #8
 8006264:	425b      	negs	r3, r3
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4413      	add	r3, r2
 800626a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	4b24      	ldr	r3, [pc, #144]	; (8006308 <vPortFree+0xb8>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4013      	ands	r3, r2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <vPortFree+0x44>
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	60fb      	str	r3, [r7, #12]
}
 8006290:	bf00      	nop
 8006292:	e7fe      	b.n	8006292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00a      	beq.n	80062b2 <vPortFree+0x62>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	60bb      	str	r3, [r7, #8]
}
 80062ae:	bf00      	nop
 80062b0:	e7fe      	b.n	80062b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	4b14      	ldr	r3, [pc, #80]	; (8006308 <vPortFree+0xb8>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4013      	ands	r3, r2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d01e      	beq.n	80062fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d11a      	bne.n	80062fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	4b0e      	ldr	r3, [pc, #56]	; (8006308 <vPortFree+0xb8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	43db      	mvns	r3, r3
 80062d2:	401a      	ands	r2, r3
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062d8:	f7fe ff0e 	bl	80050f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	4b0a      	ldr	r3, [pc, #40]	; (800630c <vPortFree+0xbc>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4413      	add	r3, r2
 80062e6:	4a09      	ldr	r2, [pc, #36]	; (800630c <vPortFree+0xbc>)
 80062e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062ea:	6938      	ldr	r0, [r7, #16]
 80062ec:	f000 f874 	bl	80063d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80062f0:	4b07      	ldr	r3, [pc, #28]	; (8006310 <vPortFree+0xc0>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3301      	adds	r3, #1
 80062f6:	4a06      	ldr	r2, [pc, #24]	; (8006310 <vPortFree+0xc0>)
 80062f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80062fa:	f7fe ff0b 	bl	8005114 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062fe:	bf00      	nop
 8006300:	3718      	adds	r7, #24
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	20004188 	.word	0x20004188
 800630c:	20004178 	.word	0x20004178
 8006310:	20004184 	.word	0x20004184

08006314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800631a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800631e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006320:	4b27      	ldr	r3, [pc, #156]	; (80063c0 <prvHeapInit+0xac>)
 8006322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00c      	beq.n	8006348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3307      	adds	r3, #7
 8006332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0307 	bic.w	r3, r3, #7
 800633a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	4a1f      	ldr	r2, [pc, #124]	; (80063c0 <prvHeapInit+0xac>)
 8006344:	4413      	add	r3, r2
 8006346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800634c:	4a1d      	ldr	r2, [pc, #116]	; (80063c4 <prvHeapInit+0xb0>)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006352:	4b1c      	ldr	r3, [pc, #112]	; (80063c4 <prvHeapInit+0xb0>)
 8006354:	2200      	movs	r2, #0
 8006356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	4413      	add	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006360:	2208      	movs	r2, #8
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1a9b      	subs	r3, r3, r2
 8006366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0307 	bic.w	r3, r3, #7
 800636e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4a15      	ldr	r2, [pc, #84]	; (80063c8 <prvHeapInit+0xb4>)
 8006374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006376:	4b14      	ldr	r3, [pc, #80]	; (80063c8 <prvHeapInit+0xb4>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2200      	movs	r2, #0
 800637c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800637e:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <prvHeapInit+0xb4>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	1ad2      	subs	r2, r2, r3
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006394:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <prvHeapInit+0xb4>)
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	4a0a      	ldr	r2, [pc, #40]	; (80063cc <prvHeapInit+0xb8>)
 80063a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <prvHeapInit+0xbc>)
 80063aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80063ac:	4b09      	ldr	r3, [pc, #36]	; (80063d4 <prvHeapInit+0xc0>)
 80063ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80063b2:	601a      	str	r2, [r3, #0]
}
 80063b4:	bf00      	nop
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	2000056c 	.word	0x2000056c
 80063c4:	2000416c 	.word	0x2000416c
 80063c8:	20004174 	.word	0x20004174
 80063cc:	2000417c 	.word	0x2000417c
 80063d0:	20004178 	.word	0x20004178
 80063d4:	20004188 	.word	0x20004188

080063d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063e0:	4b28      	ldr	r3, [pc, #160]	; (8006484 <prvInsertBlockIntoFreeList+0xac>)
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	e002      	b.n	80063ec <prvInsertBlockIntoFreeList+0x14>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d8f7      	bhi.n	80063e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	4413      	add	r3, r2
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	429a      	cmp	r2, r3
 8006406:	d108      	bne.n	800641a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	441a      	add	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	441a      	add	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	429a      	cmp	r2, r3
 800642c:	d118      	bne.n	8006460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	4b15      	ldr	r3, [pc, #84]	; (8006488 <prvInsertBlockIntoFreeList+0xb0>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d00d      	beq.n	8006456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	441a      	add	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	e008      	b.n	8006468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006456:	4b0c      	ldr	r3, [pc, #48]	; (8006488 <prvInsertBlockIntoFreeList+0xb0>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	e003      	b.n	8006468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	429a      	cmp	r2, r3
 800646e:	d002      	beq.n	8006476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	2000416c 	.word	0x2000416c
 8006488:	20004174 	.word	0x20004174

0800648c <__errno>:
 800648c:	4b01      	ldr	r3, [pc, #4]	; (8006494 <__errno+0x8>)
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	2000001c 	.word	0x2000001c

08006498 <__libc_init_array>:
 8006498:	b570      	push	{r4, r5, r6, lr}
 800649a:	4d0d      	ldr	r5, [pc, #52]	; (80064d0 <__libc_init_array+0x38>)
 800649c:	4c0d      	ldr	r4, [pc, #52]	; (80064d4 <__libc_init_array+0x3c>)
 800649e:	1b64      	subs	r4, r4, r5
 80064a0:	10a4      	asrs	r4, r4, #2
 80064a2:	2600      	movs	r6, #0
 80064a4:	42a6      	cmp	r6, r4
 80064a6:	d109      	bne.n	80064bc <__libc_init_array+0x24>
 80064a8:	4d0b      	ldr	r5, [pc, #44]	; (80064d8 <__libc_init_array+0x40>)
 80064aa:	4c0c      	ldr	r4, [pc, #48]	; (80064dc <__libc_init_array+0x44>)
 80064ac:	f000 fc8e 	bl	8006dcc <_init>
 80064b0:	1b64      	subs	r4, r4, r5
 80064b2:	10a4      	asrs	r4, r4, #2
 80064b4:	2600      	movs	r6, #0
 80064b6:	42a6      	cmp	r6, r4
 80064b8:	d105      	bne.n	80064c6 <__libc_init_array+0x2e>
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
 80064bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80064c0:	4798      	blx	r3
 80064c2:	3601      	adds	r6, #1
 80064c4:	e7ee      	b.n	80064a4 <__libc_init_array+0xc>
 80064c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ca:	4798      	blx	r3
 80064cc:	3601      	adds	r6, #1
 80064ce:	e7f2      	b.n	80064b6 <__libc_init_array+0x1e>
 80064d0:	08006f14 	.word	0x08006f14
 80064d4:	08006f14 	.word	0x08006f14
 80064d8:	08006f14 	.word	0x08006f14
 80064dc:	08006f18 	.word	0x08006f18

080064e0 <memcpy>:
 80064e0:	440a      	add	r2, r1
 80064e2:	4291      	cmp	r1, r2
 80064e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80064e8:	d100      	bne.n	80064ec <memcpy+0xc>
 80064ea:	4770      	bx	lr
 80064ec:	b510      	push	{r4, lr}
 80064ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064f6:	4291      	cmp	r1, r2
 80064f8:	d1f9      	bne.n	80064ee <memcpy+0xe>
 80064fa:	bd10      	pop	{r4, pc}

080064fc <memset>:
 80064fc:	4402      	add	r2, r0
 80064fe:	4603      	mov	r3, r0
 8006500:	4293      	cmp	r3, r2
 8006502:	d100      	bne.n	8006506 <memset+0xa>
 8006504:	4770      	bx	lr
 8006506:	f803 1b01 	strb.w	r1, [r3], #1
 800650a:	e7f9      	b.n	8006500 <memset+0x4>

0800650c <siprintf>:
 800650c:	b40e      	push	{r1, r2, r3}
 800650e:	b500      	push	{lr}
 8006510:	b09c      	sub	sp, #112	; 0x70
 8006512:	ab1d      	add	r3, sp, #116	; 0x74
 8006514:	9002      	str	r0, [sp, #8]
 8006516:	9006      	str	r0, [sp, #24]
 8006518:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800651c:	4809      	ldr	r0, [pc, #36]	; (8006544 <siprintf+0x38>)
 800651e:	9107      	str	r1, [sp, #28]
 8006520:	9104      	str	r1, [sp, #16]
 8006522:	4909      	ldr	r1, [pc, #36]	; (8006548 <siprintf+0x3c>)
 8006524:	f853 2b04 	ldr.w	r2, [r3], #4
 8006528:	9105      	str	r1, [sp, #20]
 800652a:	6800      	ldr	r0, [r0, #0]
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	a902      	add	r1, sp, #8
 8006530:	f000 f868 	bl	8006604 <_svfiprintf_r>
 8006534:	9b02      	ldr	r3, [sp, #8]
 8006536:	2200      	movs	r2, #0
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	b01c      	add	sp, #112	; 0x70
 800653c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006540:	b003      	add	sp, #12
 8006542:	4770      	bx	lr
 8006544:	2000001c 	.word	0x2000001c
 8006548:	ffff0208 	.word	0xffff0208

0800654c <__ssputs_r>:
 800654c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006550:	688e      	ldr	r6, [r1, #8]
 8006552:	429e      	cmp	r6, r3
 8006554:	4682      	mov	sl, r0
 8006556:	460c      	mov	r4, r1
 8006558:	4690      	mov	r8, r2
 800655a:	461f      	mov	r7, r3
 800655c:	d838      	bhi.n	80065d0 <__ssputs_r+0x84>
 800655e:	898a      	ldrh	r2, [r1, #12]
 8006560:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006564:	d032      	beq.n	80065cc <__ssputs_r+0x80>
 8006566:	6825      	ldr	r5, [r4, #0]
 8006568:	6909      	ldr	r1, [r1, #16]
 800656a:	eba5 0901 	sub.w	r9, r5, r1
 800656e:	6965      	ldr	r5, [r4, #20]
 8006570:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006574:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006578:	3301      	adds	r3, #1
 800657a:	444b      	add	r3, r9
 800657c:	106d      	asrs	r5, r5, #1
 800657e:	429d      	cmp	r5, r3
 8006580:	bf38      	it	cc
 8006582:	461d      	movcc	r5, r3
 8006584:	0553      	lsls	r3, r2, #21
 8006586:	d531      	bpl.n	80065ec <__ssputs_r+0xa0>
 8006588:	4629      	mov	r1, r5
 800658a:	f000 fb55 	bl	8006c38 <_malloc_r>
 800658e:	4606      	mov	r6, r0
 8006590:	b950      	cbnz	r0, 80065a8 <__ssputs_r+0x5c>
 8006592:	230c      	movs	r3, #12
 8006594:	f8ca 3000 	str.w	r3, [sl]
 8006598:	89a3      	ldrh	r3, [r4, #12]
 800659a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800659e:	81a3      	strh	r3, [r4, #12]
 80065a0:	f04f 30ff 	mov.w	r0, #4294967295
 80065a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a8:	6921      	ldr	r1, [r4, #16]
 80065aa:	464a      	mov	r2, r9
 80065ac:	f7ff ff98 	bl	80064e0 <memcpy>
 80065b0:	89a3      	ldrh	r3, [r4, #12]
 80065b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ba:	81a3      	strh	r3, [r4, #12]
 80065bc:	6126      	str	r6, [r4, #16]
 80065be:	6165      	str	r5, [r4, #20]
 80065c0:	444e      	add	r6, r9
 80065c2:	eba5 0509 	sub.w	r5, r5, r9
 80065c6:	6026      	str	r6, [r4, #0]
 80065c8:	60a5      	str	r5, [r4, #8]
 80065ca:	463e      	mov	r6, r7
 80065cc:	42be      	cmp	r6, r7
 80065ce:	d900      	bls.n	80065d2 <__ssputs_r+0x86>
 80065d0:	463e      	mov	r6, r7
 80065d2:	6820      	ldr	r0, [r4, #0]
 80065d4:	4632      	mov	r2, r6
 80065d6:	4641      	mov	r1, r8
 80065d8:	f000 faa8 	bl	8006b2c <memmove>
 80065dc:	68a3      	ldr	r3, [r4, #8]
 80065de:	1b9b      	subs	r3, r3, r6
 80065e0:	60a3      	str	r3, [r4, #8]
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	4433      	add	r3, r6
 80065e6:	6023      	str	r3, [r4, #0]
 80065e8:	2000      	movs	r0, #0
 80065ea:	e7db      	b.n	80065a4 <__ssputs_r+0x58>
 80065ec:	462a      	mov	r2, r5
 80065ee:	f000 fb97 	bl	8006d20 <_realloc_r>
 80065f2:	4606      	mov	r6, r0
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d1e1      	bne.n	80065bc <__ssputs_r+0x70>
 80065f8:	6921      	ldr	r1, [r4, #16]
 80065fa:	4650      	mov	r0, sl
 80065fc:	f000 fab0 	bl	8006b60 <_free_r>
 8006600:	e7c7      	b.n	8006592 <__ssputs_r+0x46>
	...

08006604 <_svfiprintf_r>:
 8006604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006608:	4698      	mov	r8, r3
 800660a:	898b      	ldrh	r3, [r1, #12]
 800660c:	061b      	lsls	r3, r3, #24
 800660e:	b09d      	sub	sp, #116	; 0x74
 8006610:	4607      	mov	r7, r0
 8006612:	460d      	mov	r5, r1
 8006614:	4614      	mov	r4, r2
 8006616:	d50e      	bpl.n	8006636 <_svfiprintf_r+0x32>
 8006618:	690b      	ldr	r3, [r1, #16]
 800661a:	b963      	cbnz	r3, 8006636 <_svfiprintf_r+0x32>
 800661c:	2140      	movs	r1, #64	; 0x40
 800661e:	f000 fb0b 	bl	8006c38 <_malloc_r>
 8006622:	6028      	str	r0, [r5, #0]
 8006624:	6128      	str	r0, [r5, #16]
 8006626:	b920      	cbnz	r0, 8006632 <_svfiprintf_r+0x2e>
 8006628:	230c      	movs	r3, #12
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	f04f 30ff 	mov.w	r0, #4294967295
 8006630:	e0d1      	b.n	80067d6 <_svfiprintf_r+0x1d2>
 8006632:	2340      	movs	r3, #64	; 0x40
 8006634:	616b      	str	r3, [r5, #20]
 8006636:	2300      	movs	r3, #0
 8006638:	9309      	str	r3, [sp, #36]	; 0x24
 800663a:	2320      	movs	r3, #32
 800663c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006640:	f8cd 800c 	str.w	r8, [sp, #12]
 8006644:	2330      	movs	r3, #48	; 0x30
 8006646:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067f0 <_svfiprintf_r+0x1ec>
 800664a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800664e:	f04f 0901 	mov.w	r9, #1
 8006652:	4623      	mov	r3, r4
 8006654:	469a      	mov	sl, r3
 8006656:	f813 2b01 	ldrb.w	r2, [r3], #1
 800665a:	b10a      	cbz	r2, 8006660 <_svfiprintf_r+0x5c>
 800665c:	2a25      	cmp	r2, #37	; 0x25
 800665e:	d1f9      	bne.n	8006654 <_svfiprintf_r+0x50>
 8006660:	ebba 0b04 	subs.w	fp, sl, r4
 8006664:	d00b      	beq.n	800667e <_svfiprintf_r+0x7a>
 8006666:	465b      	mov	r3, fp
 8006668:	4622      	mov	r2, r4
 800666a:	4629      	mov	r1, r5
 800666c:	4638      	mov	r0, r7
 800666e:	f7ff ff6d 	bl	800654c <__ssputs_r>
 8006672:	3001      	adds	r0, #1
 8006674:	f000 80aa 	beq.w	80067cc <_svfiprintf_r+0x1c8>
 8006678:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800667a:	445a      	add	r2, fp
 800667c:	9209      	str	r2, [sp, #36]	; 0x24
 800667e:	f89a 3000 	ldrb.w	r3, [sl]
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 80a2 	beq.w	80067cc <_svfiprintf_r+0x1c8>
 8006688:	2300      	movs	r3, #0
 800668a:	f04f 32ff 	mov.w	r2, #4294967295
 800668e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006692:	f10a 0a01 	add.w	sl, sl, #1
 8006696:	9304      	str	r3, [sp, #16]
 8006698:	9307      	str	r3, [sp, #28]
 800669a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800669e:	931a      	str	r3, [sp, #104]	; 0x68
 80066a0:	4654      	mov	r4, sl
 80066a2:	2205      	movs	r2, #5
 80066a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a8:	4851      	ldr	r0, [pc, #324]	; (80067f0 <_svfiprintf_r+0x1ec>)
 80066aa:	f7f9 fdc1 	bl	8000230 <memchr>
 80066ae:	9a04      	ldr	r2, [sp, #16]
 80066b0:	b9d8      	cbnz	r0, 80066ea <_svfiprintf_r+0xe6>
 80066b2:	06d0      	lsls	r0, r2, #27
 80066b4:	bf44      	itt	mi
 80066b6:	2320      	movmi	r3, #32
 80066b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066bc:	0711      	lsls	r1, r2, #28
 80066be:	bf44      	itt	mi
 80066c0:	232b      	movmi	r3, #43	; 0x2b
 80066c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066c6:	f89a 3000 	ldrb.w	r3, [sl]
 80066ca:	2b2a      	cmp	r3, #42	; 0x2a
 80066cc:	d015      	beq.n	80066fa <_svfiprintf_r+0xf6>
 80066ce:	9a07      	ldr	r2, [sp, #28]
 80066d0:	4654      	mov	r4, sl
 80066d2:	2000      	movs	r0, #0
 80066d4:	f04f 0c0a 	mov.w	ip, #10
 80066d8:	4621      	mov	r1, r4
 80066da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066de:	3b30      	subs	r3, #48	; 0x30
 80066e0:	2b09      	cmp	r3, #9
 80066e2:	d94e      	bls.n	8006782 <_svfiprintf_r+0x17e>
 80066e4:	b1b0      	cbz	r0, 8006714 <_svfiprintf_r+0x110>
 80066e6:	9207      	str	r2, [sp, #28]
 80066e8:	e014      	b.n	8006714 <_svfiprintf_r+0x110>
 80066ea:	eba0 0308 	sub.w	r3, r0, r8
 80066ee:	fa09 f303 	lsl.w	r3, r9, r3
 80066f2:	4313      	orrs	r3, r2
 80066f4:	9304      	str	r3, [sp, #16]
 80066f6:	46a2      	mov	sl, r4
 80066f8:	e7d2      	b.n	80066a0 <_svfiprintf_r+0x9c>
 80066fa:	9b03      	ldr	r3, [sp, #12]
 80066fc:	1d19      	adds	r1, r3, #4
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	9103      	str	r1, [sp, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	bfbb      	ittet	lt
 8006706:	425b      	neglt	r3, r3
 8006708:	f042 0202 	orrlt.w	r2, r2, #2
 800670c:	9307      	strge	r3, [sp, #28]
 800670e:	9307      	strlt	r3, [sp, #28]
 8006710:	bfb8      	it	lt
 8006712:	9204      	strlt	r2, [sp, #16]
 8006714:	7823      	ldrb	r3, [r4, #0]
 8006716:	2b2e      	cmp	r3, #46	; 0x2e
 8006718:	d10c      	bne.n	8006734 <_svfiprintf_r+0x130>
 800671a:	7863      	ldrb	r3, [r4, #1]
 800671c:	2b2a      	cmp	r3, #42	; 0x2a
 800671e:	d135      	bne.n	800678c <_svfiprintf_r+0x188>
 8006720:	9b03      	ldr	r3, [sp, #12]
 8006722:	1d1a      	adds	r2, r3, #4
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	9203      	str	r2, [sp, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	bfb8      	it	lt
 800672c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006730:	3402      	adds	r4, #2
 8006732:	9305      	str	r3, [sp, #20]
 8006734:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006800 <_svfiprintf_r+0x1fc>
 8006738:	7821      	ldrb	r1, [r4, #0]
 800673a:	2203      	movs	r2, #3
 800673c:	4650      	mov	r0, sl
 800673e:	f7f9 fd77 	bl	8000230 <memchr>
 8006742:	b140      	cbz	r0, 8006756 <_svfiprintf_r+0x152>
 8006744:	2340      	movs	r3, #64	; 0x40
 8006746:	eba0 000a 	sub.w	r0, r0, sl
 800674a:	fa03 f000 	lsl.w	r0, r3, r0
 800674e:	9b04      	ldr	r3, [sp, #16]
 8006750:	4303      	orrs	r3, r0
 8006752:	3401      	adds	r4, #1
 8006754:	9304      	str	r3, [sp, #16]
 8006756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800675a:	4826      	ldr	r0, [pc, #152]	; (80067f4 <_svfiprintf_r+0x1f0>)
 800675c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006760:	2206      	movs	r2, #6
 8006762:	f7f9 fd65 	bl	8000230 <memchr>
 8006766:	2800      	cmp	r0, #0
 8006768:	d038      	beq.n	80067dc <_svfiprintf_r+0x1d8>
 800676a:	4b23      	ldr	r3, [pc, #140]	; (80067f8 <_svfiprintf_r+0x1f4>)
 800676c:	bb1b      	cbnz	r3, 80067b6 <_svfiprintf_r+0x1b2>
 800676e:	9b03      	ldr	r3, [sp, #12]
 8006770:	3307      	adds	r3, #7
 8006772:	f023 0307 	bic.w	r3, r3, #7
 8006776:	3308      	adds	r3, #8
 8006778:	9303      	str	r3, [sp, #12]
 800677a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800677c:	4433      	add	r3, r6
 800677e:	9309      	str	r3, [sp, #36]	; 0x24
 8006780:	e767      	b.n	8006652 <_svfiprintf_r+0x4e>
 8006782:	fb0c 3202 	mla	r2, ip, r2, r3
 8006786:	460c      	mov	r4, r1
 8006788:	2001      	movs	r0, #1
 800678a:	e7a5      	b.n	80066d8 <_svfiprintf_r+0xd4>
 800678c:	2300      	movs	r3, #0
 800678e:	3401      	adds	r4, #1
 8006790:	9305      	str	r3, [sp, #20]
 8006792:	4619      	mov	r1, r3
 8006794:	f04f 0c0a 	mov.w	ip, #10
 8006798:	4620      	mov	r0, r4
 800679a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800679e:	3a30      	subs	r2, #48	; 0x30
 80067a0:	2a09      	cmp	r2, #9
 80067a2:	d903      	bls.n	80067ac <_svfiprintf_r+0x1a8>
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0c5      	beq.n	8006734 <_svfiprintf_r+0x130>
 80067a8:	9105      	str	r1, [sp, #20]
 80067aa:	e7c3      	b.n	8006734 <_svfiprintf_r+0x130>
 80067ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80067b0:	4604      	mov	r4, r0
 80067b2:	2301      	movs	r3, #1
 80067b4:	e7f0      	b.n	8006798 <_svfiprintf_r+0x194>
 80067b6:	ab03      	add	r3, sp, #12
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	462a      	mov	r2, r5
 80067bc:	4b0f      	ldr	r3, [pc, #60]	; (80067fc <_svfiprintf_r+0x1f8>)
 80067be:	a904      	add	r1, sp, #16
 80067c0:	4638      	mov	r0, r7
 80067c2:	f3af 8000 	nop.w
 80067c6:	1c42      	adds	r2, r0, #1
 80067c8:	4606      	mov	r6, r0
 80067ca:	d1d6      	bne.n	800677a <_svfiprintf_r+0x176>
 80067cc:	89ab      	ldrh	r3, [r5, #12]
 80067ce:	065b      	lsls	r3, r3, #25
 80067d0:	f53f af2c 	bmi.w	800662c <_svfiprintf_r+0x28>
 80067d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067d6:	b01d      	add	sp, #116	; 0x74
 80067d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067dc:	ab03      	add	r3, sp, #12
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	462a      	mov	r2, r5
 80067e2:	4b06      	ldr	r3, [pc, #24]	; (80067fc <_svfiprintf_r+0x1f8>)
 80067e4:	a904      	add	r1, sp, #16
 80067e6:	4638      	mov	r0, r7
 80067e8:	f000 f87a 	bl	80068e0 <_printf_i>
 80067ec:	e7eb      	b.n	80067c6 <_svfiprintf_r+0x1c2>
 80067ee:	bf00      	nop
 80067f0:	08006ed8 	.word	0x08006ed8
 80067f4:	08006ee2 	.word	0x08006ee2
 80067f8:	00000000 	.word	0x00000000
 80067fc:	0800654d 	.word	0x0800654d
 8006800:	08006ede 	.word	0x08006ede

08006804 <_printf_common>:
 8006804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006808:	4616      	mov	r6, r2
 800680a:	4699      	mov	r9, r3
 800680c:	688a      	ldr	r2, [r1, #8]
 800680e:	690b      	ldr	r3, [r1, #16]
 8006810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006814:	4293      	cmp	r3, r2
 8006816:	bfb8      	it	lt
 8006818:	4613      	movlt	r3, r2
 800681a:	6033      	str	r3, [r6, #0]
 800681c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006820:	4607      	mov	r7, r0
 8006822:	460c      	mov	r4, r1
 8006824:	b10a      	cbz	r2, 800682a <_printf_common+0x26>
 8006826:	3301      	adds	r3, #1
 8006828:	6033      	str	r3, [r6, #0]
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	0699      	lsls	r1, r3, #26
 800682e:	bf42      	ittt	mi
 8006830:	6833      	ldrmi	r3, [r6, #0]
 8006832:	3302      	addmi	r3, #2
 8006834:	6033      	strmi	r3, [r6, #0]
 8006836:	6825      	ldr	r5, [r4, #0]
 8006838:	f015 0506 	ands.w	r5, r5, #6
 800683c:	d106      	bne.n	800684c <_printf_common+0x48>
 800683e:	f104 0a19 	add.w	sl, r4, #25
 8006842:	68e3      	ldr	r3, [r4, #12]
 8006844:	6832      	ldr	r2, [r6, #0]
 8006846:	1a9b      	subs	r3, r3, r2
 8006848:	42ab      	cmp	r3, r5
 800684a:	dc26      	bgt.n	800689a <_printf_common+0x96>
 800684c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006850:	1e13      	subs	r3, r2, #0
 8006852:	6822      	ldr	r2, [r4, #0]
 8006854:	bf18      	it	ne
 8006856:	2301      	movne	r3, #1
 8006858:	0692      	lsls	r2, r2, #26
 800685a:	d42b      	bmi.n	80068b4 <_printf_common+0xb0>
 800685c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006860:	4649      	mov	r1, r9
 8006862:	4638      	mov	r0, r7
 8006864:	47c0      	blx	r8
 8006866:	3001      	adds	r0, #1
 8006868:	d01e      	beq.n	80068a8 <_printf_common+0xa4>
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	68e5      	ldr	r5, [r4, #12]
 800686e:	6832      	ldr	r2, [r6, #0]
 8006870:	f003 0306 	and.w	r3, r3, #6
 8006874:	2b04      	cmp	r3, #4
 8006876:	bf08      	it	eq
 8006878:	1aad      	subeq	r5, r5, r2
 800687a:	68a3      	ldr	r3, [r4, #8]
 800687c:	6922      	ldr	r2, [r4, #16]
 800687e:	bf0c      	ite	eq
 8006880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006884:	2500      	movne	r5, #0
 8006886:	4293      	cmp	r3, r2
 8006888:	bfc4      	itt	gt
 800688a:	1a9b      	subgt	r3, r3, r2
 800688c:	18ed      	addgt	r5, r5, r3
 800688e:	2600      	movs	r6, #0
 8006890:	341a      	adds	r4, #26
 8006892:	42b5      	cmp	r5, r6
 8006894:	d11a      	bne.n	80068cc <_printf_common+0xc8>
 8006896:	2000      	movs	r0, #0
 8006898:	e008      	b.n	80068ac <_printf_common+0xa8>
 800689a:	2301      	movs	r3, #1
 800689c:	4652      	mov	r2, sl
 800689e:	4649      	mov	r1, r9
 80068a0:	4638      	mov	r0, r7
 80068a2:	47c0      	blx	r8
 80068a4:	3001      	adds	r0, #1
 80068a6:	d103      	bne.n	80068b0 <_printf_common+0xac>
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b0:	3501      	adds	r5, #1
 80068b2:	e7c6      	b.n	8006842 <_printf_common+0x3e>
 80068b4:	18e1      	adds	r1, r4, r3
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	2030      	movs	r0, #48	; 0x30
 80068ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068be:	4422      	add	r2, r4
 80068c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068c8:	3302      	adds	r3, #2
 80068ca:	e7c7      	b.n	800685c <_printf_common+0x58>
 80068cc:	2301      	movs	r3, #1
 80068ce:	4622      	mov	r2, r4
 80068d0:	4649      	mov	r1, r9
 80068d2:	4638      	mov	r0, r7
 80068d4:	47c0      	blx	r8
 80068d6:	3001      	adds	r0, #1
 80068d8:	d0e6      	beq.n	80068a8 <_printf_common+0xa4>
 80068da:	3601      	adds	r6, #1
 80068dc:	e7d9      	b.n	8006892 <_printf_common+0x8e>
	...

080068e0 <_printf_i>:
 80068e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068e4:	7e0f      	ldrb	r7, [r1, #24]
 80068e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068e8:	2f78      	cmp	r7, #120	; 0x78
 80068ea:	4691      	mov	r9, r2
 80068ec:	4680      	mov	r8, r0
 80068ee:	460c      	mov	r4, r1
 80068f0:	469a      	mov	sl, r3
 80068f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068f6:	d807      	bhi.n	8006908 <_printf_i+0x28>
 80068f8:	2f62      	cmp	r7, #98	; 0x62
 80068fa:	d80a      	bhi.n	8006912 <_printf_i+0x32>
 80068fc:	2f00      	cmp	r7, #0
 80068fe:	f000 80d8 	beq.w	8006ab2 <_printf_i+0x1d2>
 8006902:	2f58      	cmp	r7, #88	; 0x58
 8006904:	f000 80a3 	beq.w	8006a4e <_printf_i+0x16e>
 8006908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800690c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006910:	e03a      	b.n	8006988 <_printf_i+0xa8>
 8006912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006916:	2b15      	cmp	r3, #21
 8006918:	d8f6      	bhi.n	8006908 <_printf_i+0x28>
 800691a:	a101      	add	r1, pc, #4	; (adr r1, 8006920 <_printf_i+0x40>)
 800691c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006920:	08006979 	.word	0x08006979
 8006924:	0800698d 	.word	0x0800698d
 8006928:	08006909 	.word	0x08006909
 800692c:	08006909 	.word	0x08006909
 8006930:	08006909 	.word	0x08006909
 8006934:	08006909 	.word	0x08006909
 8006938:	0800698d 	.word	0x0800698d
 800693c:	08006909 	.word	0x08006909
 8006940:	08006909 	.word	0x08006909
 8006944:	08006909 	.word	0x08006909
 8006948:	08006909 	.word	0x08006909
 800694c:	08006a99 	.word	0x08006a99
 8006950:	080069bd 	.word	0x080069bd
 8006954:	08006a7b 	.word	0x08006a7b
 8006958:	08006909 	.word	0x08006909
 800695c:	08006909 	.word	0x08006909
 8006960:	08006abb 	.word	0x08006abb
 8006964:	08006909 	.word	0x08006909
 8006968:	080069bd 	.word	0x080069bd
 800696c:	08006909 	.word	0x08006909
 8006970:	08006909 	.word	0x08006909
 8006974:	08006a83 	.word	0x08006a83
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	1d1a      	adds	r2, r3, #4
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	602a      	str	r2, [r5, #0]
 8006980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006988:	2301      	movs	r3, #1
 800698a:	e0a3      	b.n	8006ad4 <_printf_i+0x1f4>
 800698c:	6820      	ldr	r0, [r4, #0]
 800698e:	6829      	ldr	r1, [r5, #0]
 8006990:	0606      	lsls	r6, r0, #24
 8006992:	f101 0304 	add.w	r3, r1, #4
 8006996:	d50a      	bpl.n	80069ae <_printf_i+0xce>
 8006998:	680e      	ldr	r6, [r1, #0]
 800699a:	602b      	str	r3, [r5, #0]
 800699c:	2e00      	cmp	r6, #0
 800699e:	da03      	bge.n	80069a8 <_printf_i+0xc8>
 80069a0:	232d      	movs	r3, #45	; 0x2d
 80069a2:	4276      	negs	r6, r6
 80069a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069a8:	485e      	ldr	r0, [pc, #376]	; (8006b24 <_printf_i+0x244>)
 80069aa:	230a      	movs	r3, #10
 80069ac:	e019      	b.n	80069e2 <_printf_i+0x102>
 80069ae:	680e      	ldr	r6, [r1, #0]
 80069b0:	602b      	str	r3, [r5, #0]
 80069b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069b6:	bf18      	it	ne
 80069b8:	b236      	sxthne	r6, r6
 80069ba:	e7ef      	b.n	800699c <_printf_i+0xbc>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	6820      	ldr	r0, [r4, #0]
 80069c0:	1d19      	adds	r1, r3, #4
 80069c2:	6029      	str	r1, [r5, #0]
 80069c4:	0601      	lsls	r1, r0, #24
 80069c6:	d501      	bpl.n	80069cc <_printf_i+0xec>
 80069c8:	681e      	ldr	r6, [r3, #0]
 80069ca:	e002      	b.n	80069d2 <_printf_i+0xf2>
 80069cc:	0646      	lsls	r6, r0, #25
 80069ce:	d5fb      	bpl.n	80069c8 <_printf_i+0xe8>
 80069d0:	881e      	ldrh	r6, [r3, #0]
 80069d2:	4854      	ldr	r0, [pc, #336]	; (8006b24 <_printf_i+0x244>)
 80069d4:	2f6f      	cmp	r7, #111	; 0x6f
 80069d6:	bf0c      	ite	eq
 80069d8:	2308      	moveq	r3, #8
 80069da:	230a      	movne	r3, #10
 80069dc:	2100      	movs	r1, #0
 80069de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069e2:	6865      	ldr	r5, [r4, #4]
 80069e4:	60a5      	str	r5, [r4, #8]
 80069e6:	2d00      	cmp	r5, #0
 80069e8:	bfa2      	ittt	ge
 80069ea:	6821      	ldrge	r1, [r4, #0]
 80069ec:	f021 0104 	bicge.w	r1, r1, #4
 80069f0:	6021      	strge	r1, [r4, #0]
 80069f2:	b90e      	cbnz	r6, 80069f8 <_printf_i+0x118>
 80069f4:	2d00      	cmp	r5, #0
 80069f6:	d04d      	beq.n	8006a94 <_printf_i+0x1b4>
 80069f8:	4615      	mov	r5, r2
 80069fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80069fe:	fb03 6711 	mls	r7, r3, r1, r6
 8006a02:	5dc7      	ldrb	r7, [r0, r7]
 8006a04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a08:	4637      	mov	r7, r6
 8006a0a:	42bb      	cmp	r3, r7
 8006a0c:	460e      	mov	r6, r1
 8006a0e:	d9f4      	bls.n	80069fa <_printf_i+0x11a>
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d10b      	bne.n	8006a2c <_printf_i+0x14c>
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	07de      	lsls	r6, r3, #31
 8006a18:	d508      	bpl.n	8006a2c <_printf_i+0x14c>
 8006a1a:	6923      	ldr	r3, [r4, #16]
 8006a1c:	6861      	ldr	r1, [r4, #4]
 8006a1e:	4299      	cmp	r1, r3
 8006a20:	bfde      	ittt	le
 8006a22:	2330      	movle	r3, #48	; 0x30
 8006a24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a2c:	1b52      	subs	r2, r2, r5
 8006a2e:	6122      	str	r2, [r4, #16]
 8006a30:	f8cd a000 	str.w	sl, [sp]
 8006a34:	464b      	mov	r3, r9
 8006a36:	aa03      	add	r2, sp, #12
 8006a38:	4621      	mov	r1, r4
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	f7ff fee2 	bl	8006804 <_printf_common>
 8006a40:	3001      	adds	r0, #1
 8006a42:	d14c      	bne.n	8006ade <_printf_i+0x1fe>
 8006a44:	f04f 30ff 	mov.w	r0, #4294967295
 8006a48:	b004      	add	sp, #16
 8006a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a4e:	4835      	ldr	r0, [pc, #212]	; (8006b24 <_printf_i+0x244>)
 8006a50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a54:	6829      	ldr	r1, [r5, #0]
 8006a56:	6823      	ldr	r3, [r4, #0]
 8006a58:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a5c:	6029      	str	r1, [r5, #0]
 8006a5e:	061d      	lsls	r5, r3, #24
 8006a60:	d514      	bpl.n	8006a8c <_printf_i+0x1ac>
 8006a62:	07df      	lsls	r7, r3, #31
 8006a64:	bf44      	itt	mi
 8006a66:	f043 0320 	orrmi.w	r3, r3, #32
 8006a6a:	6023      	strmi	r3, [r4, #0]
 8006a6c:	b91e      	cbnz	r6, 8006a76 <_printf_i+0x196>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	f023 0320 	bic.w	r3, r3, #32
 8006a74:	6023      	str	r3, [r4, #0]
 8006a76:	2310      	movs	r3, #16
 8006a78:	e7b0      	b.n	80069dc <_printf_i+0xfc>
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	f043 0320 	orr.w	r3, r3, #32
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	2378      	movs	r3, #120	; 0x78
 8006a84:	4828      	ldr	r0, [pc, #160]	; (8006b28 <_printf_i+0x248>)
 8006a86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a8a:	e7e3      	b.n	8006a54 <_printf_i+0x174>
 8006a8c:	0659      	lsls	r1, r3, #25
 8006a8e:	bf48      	it	mi
 8006a90:	b2b6      	uxthmi	r6, r6
 8006a92:	e7e6      	b.n	8006a62 <_printf_i+0x182>
 8006a94:	4615      	mov	r5, r2
 8006a96:	e7bb      	b.n	8006a10 <_printf_i+0x130>
 8006a98:	682b      	ldr	r3, [r5, #0]
 8006a9a:	6826      	ldr	r6, [r4, #0]
 8006a9c:	6961      	ldr	r1, [r4, #20]
 8006a9e:	1d18      	adds	r0, r3, #4
 8006aa0:	6028      	str	r0, [r5, #0]
 8006aa2:	0635      	lsls	r5, r6, #24
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	d501      	bpl.n	8006aac <_printf_i+0x1cc>
 8006aa8:	6019      	str	r1, [r3, #0]
 8006aaa:	e002      	b.n	8006ab2 <_printf_i+0x1d2>
 8006aac:	0670      	lsls	r0, r6, #25
 8006aae:	d5fb      	bpl.n	8006aa8 <_printf_i+0x1c8>
 8006ab0:	8019      	strh	r1, [r3, #0]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	6123      	str	r3, [r4, #16]
 8006ab6:	4615      	mov	r5, r2
 8006ab8:	e7ba      	b.n	8006a30 <_printf_i+0x150>
 8006aba:	682b      	ldr	r3, [r5, #0]
 8006abc:	1d1a      	adds	r2, r3, #4
 8006abe:	602a      	str	r2, [r5, #0]
 8006ac0:	681d      	ldr	r5, [r3, #0]
 8006ac2:	6862      	ldr	r2, [r4, #4]
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f7f9 fbb2 	bl	8000230 <memchr>
 8006acc:	b108      	cbz	r0, 8006ad2 <_printf_i+0x1f2>
 8006ace:	1b40      	subs	r0, r0, r5
 8006ad0:	6060      	str	r0, [r4, #4]
 8006ad2:	6863      	ldr	r3, [r4, #4]
 8006ad4:	6123      	str	r3, [r4, #16]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006adc:	e7a8      	b.n	8006a30 <_printf_i+0x150>
 8006ade:	6923      	ldr	r3, [r4, #16]
 8006ae0:	462a      	mov	r2, r5
 8006ae2:	4649      	mov	r1, r9
 8006ae4:	4640      	mov	r0, r8
 8006ae6:	47d0      	blx	sl
 8006ae8:	3001      	adds	r0, #1
 8006aea:	d0ab      	beq.n	8006a44 <_printf_i+0x164>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	079b      	lsls	r3, r3, #30
 8006af0:	d413      	bmi.n	8006b1a <_printf_i+0x23a>
 8006af2:	68e0      	ldr	r0, [r4, #12]
 8006af4:	9b03      	ldr	r3, [sp, #12]
 8006af6:	4298      	cmp	r0, r3
 8006af8:	bfb8      	it	lt
 8006afa:	4618      	movlt	r0, r3
 8006afc:	e7a4      	b.n	8006a48 <_printf_i+0x168>
 8006afe:	2301      	movs	r3, #1
 8006b00:	4632      	mov	r2, r6
 8006b02:	4649      	mov	r1, r9
 8006b04:	4640      	mov	r0, r8
 8006b06:	47d0      	blx	sl
 8006b08:	3001      	adds	r0, #1
 8006b0a:	d09b      	beq.n	8006a44 <_printf_i+0x164>
 8006b0c:	3501      	adds	r5, #1
 8006b0e:	68e3      	ldr	r3, [r4, #12]
 8006b10:	9903      	ldr	r1, [sp, #12]
 8006b12:	1a5b      	subs	r3, r3, r1
 8006b14:	42ab      	cmp	r3, r5
 8006b16:	dcf2      	bgt.n	8006afe <_printf_i+0x21e>
 8006b18:	e7eb      	b.n	8006af2 <_printf_i+0x212>
 8006b1a:	2500      	movs	r5, #0
 8006b1c:	f104 0619 	add.w	r6, r4, #25
 8006b20:	e7f5      	b.n	8006b0e <_printf_i+0x22e>
 8006b22:	bf00      	nop
 8006b24:	08006ee9 	.word	0x08006ee9
 8006b28:	08006efa 	.word	0x08006efa

08006b2c <memmove>:
 8006b2c:	4288      	cmp	r0, r1
 8006b2e:	b510      	push	{r4, lr}
 8006b30:	eb01 0402 	add.w	r4, r1, r2
 8006b34:	d902      	bls.n	8006b3c <memmove+0x10>
 8006b36:	4284      	cmp	r4, r0
 8006b38:	4623      	mov	r3, r4
 8006b3a:	d807      	bhi.n	8006b4c <memmove+0x20>
 8006b3c:	1e43      	subs	r3, r0, #1
 8006b3e:	42a1      	cmp	r1, r4
 8006b40:	d008      	beq.n	8006b54 <memmove+0x28>
 8006b42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b4a:	e7f8      	b.n	8006b3e <memmove+0x12>
 8006b4c:	4402      	add	r2, r0
 8006b4e:	4601      	mov	r1, r0
 8006b50:	428a      	cmp	r2, r1
 8006b52:	d100      	bne.n	8006b56 <memmove+0x2a>
 8006b54:	bd10      	pop	{r4, pc}
 8006b56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b5e:	e7f7      	b.n	8006b50 <memmove+0x24>

08006b60 <_free_r>:
 8006b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b62:	2900      	cmp	r1, #0
 8006b64:	d044      	beq.n	8006bf0 <_free_r+0x90>
 8006b66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b6a:	9001      	str	r0, [sp, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f1a1 0404 	sub.w	r4, r1, #4
 8006b72:	bfb8      	it	lt
 8006b74:	18e4      	addlt	r4, r4, r3
 8006b76:	f000 f913 	bl	8006da0 <__malloc_lock>
 8006b7a:	4a1e      	ldr	r2, [pc, #120]	; (8006bf4 <_free_r+0x94>)
 8006b7c:	9801      	ldr	r0, [sp, #4]
 8006b7e:	6813      	ldr	r3, [r2, #0]
 8006b80:	b933      	cbnz	r3, 8006b90 <_free_r+0x30>
 8006b82:	6063      	str	r3, [r4, #4]
 8006b84:	6014      	str	r4, [r2, #0]
 8006b86:	b003      	add	sp, #12
 8006b88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b8c:	f000 b90e 	b.w	8006dac <__malloc_unlock>
 8006b90:	42a3      	cmp	r3, r4
 8006b92:	d908      	bls.n	8006ba6 <_free_r+0x46>
 8006b94:	6825      	ldr	r5, [r4, #0]
 8006b96:	1961      	adds	r1, r4, r5
 8006b98:	428b      	cmp	r3, r1
 8006b9a:	bf01      	itttt	eq
 8006b9c:	6819      	ldreq	r1, [r3, #0]
 8006b9e:	685b      	ldreq	r3, [r3, #4]
 8006ba0:	1949      	addeq	r1, r1, r5
 8006ba2:	6021      	streq	r1, [r4, #0]
 8006ba4:	e7ed      	b.n	8006b82 <_free_r+0x22>
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	b10b      	cbz	r3, 8006bb0 <_free_r+0x50>
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	d9fa      	bls.n	8006ba6 <_free_r+0x46>
 8006bb0:	6811      	ldr	r1, [r2, #0]
 8006bb2:	1855      	adds	r5, r2, r1
 8006bb4:	42a5      	cmp	r5, r4
 8006bb6:	d10b      	bne.n	8006bd0 <_free_r+0x70>
 8006bb8:	6824      	ldr	r4, [r4, #0]
 8006bba:	4421      	add	r1, r4
 8006bbc:	1854      	adds	r4, r2, r1
 8006bbe:	42a3      	cmp	r3, r4
 8006bc0:	6011      	str	r1, [r2, #0]
 8006bc2:	d1e0      	bne.n	8006b86 <_free_r+0x26>
 8006bc4:	681c      	ldr	r4, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	6053      	str	r3, [r2, #4]
 8006bca:	4421      	add	r1, r4
 8006bcc:	6011      	str	r1, [r2, #0]
 8006bce:	e7da      	b.n	8006b86 <_free_r+0x26>
 8006bd0:	d902      	bls.n	8006bd8 <_free_r+0x78>
 8006bd2:	230c      	movs	r3, #12
 8006bd4:	6003      	str	r3, [r0, #0]
 8006bd6:	e7d6      	b.n	8006b86 <_free_r+0x26>
 8006bd8:	6825      	ldr	r5, [r4, #0]
 8006bda:	1961      	adds	r1, r4, r5
 8006bdc:	428b      	cmp	r3, r1
 8006bde:	bf04      	itt	eq
 8006be0:	6819      	ldreq	r1, [r3, #0]
 8006be2:	685b      	ldreq	r3, [r3, #4]
 8006be4:	6063      	str	r3, [r4, #4]
 8006be6:	bf04      	itt	eq
 8006be8:	1949      	addeq	r1, r1, r5
 8006bea:	6021      	streq	r1, [r4, #0]
 8006bec:	6054      	str	r4, [r2, #4]
 8006bee:	e7ca      	b.n	8006b86 <_free_r+0x26>
 8006bf0:	b003      	add	sp, #12
 8006bf2:	bd30      	pop	{r4, r5, pc}
 8006bf4:	2000418c 	.word	0x2000418c

08006bf8 <sbrk_aligned>:
 8006bf8:	b570      	push	{r4, r5, r6, lr}
 8006bfa:	4e0e      	ldr	r6, [pc, #56]	; (8006c34 <sbrk_aligned+0x3c>)
 8006bfc:	460c      	mov	r4, r1
 8006bfe:	6831      	ldr	r1, [r6, #0]
 8006c00:	4605      	mov	r5, r0
 8006c02:	b911      	cbnz	r1, 8006c0a <sbrk_aligned+0x12>
 8006c04:	f000 f8bc 	bl	8006d80 <_sbrk_r>
 8006c08:	6030      	str	r0, [r6, #0]
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	f000 f8b7 	bl	8006d80 <_sbrk_r>
 8006c12:	1c43      	adds	r3, r0, #1
 8006c14:	d00a      	beq.n	8006c2c <sbrk_aligned+0x34>
 8006c16:	1cc4      	adds	r4, r0, #3
 8006c18:	f024 0403 	bic.w	r4, r4, #3
 8006c1c:	42a0      	cmp	r0, r4
 8006c1e:	d007      	beq.n	8006c30 <sbrk_aligned+0x38>
 8006c20:	1a21      	subs	r1, r4, r0
 8006c22:	4628      	mov	r0, r5
 8006c24:	f000 f8ac 	bl	8006d80 <_sbrk_r>
 8006c28:	3001      	adds	r0, #1
 8006c2a:	d101      	bne.n	8006c30 <sbrk_aligned+0x38>
 8006c2c:	f04f 34ff 	mov.w	r4, #4294967295
 8006c30:	4620      	mov	r0, r4
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
 8006c34:	20004190 	.word	0x20004190

08006c38 <_malloc_r>:
 8006c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3c:	1ccd      	adds	r5, r1, #3
 8006c3e:	f025 0503 	bic.w	r5, r5, #3
 8006c42:	3508      	adds	r5, #8
 8006c44:	2d0c      	cmp	r5, #12
 8006c46:	bf38      	it	cc
 8006c48:	250c      	movcc	r5, #12
 8006c4a:	2d00      	cmp	r5, #0
 8006c4c:	4607      	mov	r7, r0
 8006c4e:	db01      	blt.n	8006c54 <_malloc_r+0x1c>
 8006c50:	42a9      	cmp	r1, r5
 8006c52:	d905      	bls.n	8006c60 <_malloc_r+0x28>
 8006c54:	230c      	movs	r3, #12
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	2600      	movs	r6, #0
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c60:	4e2e      	ldr	r6, [pc, #184]	; (8006d1c <_malloc_r+0xe4>)
 8006c62:	f000 f89d 	bl	8006da0 <__malloc_lock>
 8006c66:	6833      	ldr	r3, [r6, #0]
 8006c68:	461c      	mov	r4, r3
 8006c6a:	bb34      	cbnz	r4, 8006cba <_malloc_r+0x82>
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	4638      	mov	r0, r7
 8006c70:	f7ff ffc2 	bl	8006bf8 <sbrk_aligned>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	4604      	mov	r4, r0
 8006c78:	d14d      	bne.n	8006d16 <_malloc_r+0xde>
 8006c7a:	6834      	ldr	r4, [r6, #0]
 8006c7c:	4626      	mov	r6, r4
 8006c7e:	2e00      	cmp	r6, #0
 8006c80:	d140      	bne.n	8006d04 <_malloc_r+0xcc>
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	4631      	mov	r1, r6
 8006c86:	4638      	mov	r0, r7
 8006c88:	eb04 0803 	add.w	r8, r4, r3
 8006c8c:	f000 f878 	bl	8006d80 <_sbrk_r>
 8006c90:	4580      	cmp	r8, r0
 8006c92:	d13a      	bne.n	8006d0a <_malloc_r+0xd2>
 8006c94:	6821      	ldr	r1, [r4, #0]
 8006c96:	3503      	adds	r5, #3
 8006c98:	1a6d      	subs	r5, r5, r1
 8006c9a:	f025 0503 	bic.w	r5, r5, #3
 8006c9e:	3508      	adds	r5, #8
 8006ca0:	2d0c      	cmp	r5, #12
 8006ca2:	bf38      	it	cc
 8006ca4:	250c      	movcc	r5, #12
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4638      	mov	r0, r7
 8006caa:	f7ff ffa5 	bl	8006bf8 <sbrk_aligned>
 8006cae:	3001      	adds	r0, #1
 8006cb0:	d02b      	beq.n	8006d0a <_malloc_r+0xd2>
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	442b      	add	r3, r5
 8006cb6:	6023      	str	r3, [r4, #0]
 8006cb8:	e00e      	b.n	8006cd8 <_malloc_r+0xa0>
 8006cba:	6822      	ldr	r2, [r4, #0]
 8006cbc:	1b52      	subs	r2, r2, r5
 8006cbe:	d41e      	bmi.n	8006cfe <_malloc_r+0xc6>
 8006cc0:	2a0b      	cmp	r2, #11
 8006cc2:	d916      	bls.n	8006cf2 <_malloc_r+0xba>
 8006cc4:	1961      	adds	r1, r4, r5
 8006cc6:	42a3      	cmp	r3, r4
 8006cc8:	6025      	str	r5, [r4, #0]
 8006cca:	bf18      	it	ne
 8006ccc:	6059      	strne	r1, [r3, #4]
 8006cce:	6863      	ldr	r3, [r4, #4]
 8006cd0:	bf08      	it	eq
 8006cd2:	6031      	streq	r1, [r6, #0]
 8006cd4:	5162      	str	r2, [r4, r5]
 8006cd6:	604b      	str	r3, [r1, #4]
 8006cd8:	4638      	mov	r0, r7
 8006cda:	f104 060b 	add.w	r6, r4, #11
 8006cde:	f000 f865 	bl	8006dac <__malloc_unlock>
 8006ce2:	f026 0607 	bic.w	r6, r6, #7
 8006ce6:	1d23      	adds	r3, r4, #4
 8006ce8:	1af2      	subs	r2, r6, r3
 8006cea:	d0b6      	beq.n	8006c5a <_malloc_r+0x22>
 8006cec:	1b9b      	subs	r3, r3, r6
 8006cee:	50a3      	str	r3, [r4, r2]
 8006cf0:	e7b3      	b.n	8006c5a <_malloc_r+0x22>
 8006cf2:	6862      	ldr	r2, [r4, #4]
 8006cf4:	42a3      	cmp	r3, r4
 8006cf6:	bf0c      	ite	eq
 8006cf8:	6032      	streq	r2, [r6, #0]
 8006cfa:	605a      	strne	r2, [r3, #4]
 8006cfc:	e7ec      	b.n	8006cd8 <_malloc_r+0xa0>
 8006cfe:	4623      	mov	r3, r4
 8006d00:	6864      	ldr	r4, [r4, #4]
 8006d02:	e7b2      	b.n	8006c6a <_malloc_r+0x32>
 8006d04:	4634      	mov	r4, r6
 8006d06:	6876      	ldr	r6, [r6, #4]
 8006d08:	e7b9      	b.n	8006c7e <_malloc_r+0x46>
 8006d0a:	230c      	movs	r3, #12
 8006d0c:	603b      	str	r3, [r7, #0]
 8006d0e:	4638      	mov	r0, r7
 8006d10:	f000 f84c 	bl	8006dac <__malloc_unlock>
 8006d14:	e7a1      	b.n	8006c5a <_malloc_r+0x22>
 8006d16:	6025      	str	r5, [r4, #0]
 8006d18:	e7de      	b.n	8006cd8 <_malloc_r+0xa0>
 8006d1a:	bf00      	nop
 8006d1c:	2000418c 	.word	0x2000418c

08006d20 <_realloc_r>:
 8006d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d24:	4680      	mov	r8, r0
 8006d26:	4614      	mov	r4, r2
 8006d28:	460e      	mov	r6, r1
 8006d2a:	b921      	cbnz	r1, 8006d36 <_realloc_r+0x16>
 8006d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d30:	4611      	mov	r1, r2
 8006d32:	f7ff bf81 	b.w	8006c38 <_malloc_r>
 8006d36:	b92a      	cbnz	r2, 8006d44 <_realloc_r+0x24>
 8006d38:	f7ff ff12 	bl	8006b60 <_free_r>
 8006d3c:	4625      	mov	r5, r4
 8006d3e:	4628      	mov	r0, r5
 8006d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d44:	f000 f838 	bl	8006db8 <_malloc_usable_size_r>
 8006d48:	4284      	cmp	r4, r0
 8006d4a:	4607      	mov	r7, r0
 8006d4c:	d802      	bhi.n	8006d54 <_realloc_r+0x34>
 8006d4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d52:	d812      	bhi.n	8006d7a <_realloc_r+0x5a>
 8006d54:	4621      	mov	r1, r4
 8006d56:	4640      	mov	r0, r8
 8006d58:	f7ff ff6e 	bl	8006c38 <_malloc_r>
 8006d5c:	4605      	mov	r5, r0
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d0ed      	beq.n	8006d3e <_realloc_r+0x1e>
 8006d62:	42bc      	cmp	r4, r7
 8006d64:	4622      	mov	r2, r4
 8006d66:	4631      	mov	r1, r6
 8006d68:	bf28      	it	cs
 8006d6a:	463a      	movcs	r2, r7
 8006d6c:	f7ff fbb8 	bl	80064e0 <memcpy>
 8006d70:	4631      	mov	r1, r6
 8006d72:	4640      	mov	r0, r8
 8006d74:	f7ff fef4 	bl	8006b60 <_free_r>
 8006d78:	e7e1      	b.n	8006d3e <_realloc_r+0x1e>
 8006d7a:	4635      	mov	r5, r6
 8006d7c:	e7df      	b.n	8006d3e <_realloc_r+0x1e>
	...

08006d80 <_sbrk_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	4d06      	ldr	r5, [pc, #24]	; (8006d9c <_sbrk_r+0x1c>)
 8006d84:	2300      	movs	r3, #0
 8006d86:	4604      	mov	r4, r0
 8006d88:	4608      	mov	r0, r1
 8006d8a:	602b      	str	r3, [r5, #0]
 8006d8c:	f7fa f9a8 	bl	80010e0 <_sbrk>
 8006d90:	1c43      	adds	r3, r0, #1
 8006d92:	d102      	bne.n	8006d9a <_sbrk_r+0x1a>
 8006d94:	682b      	ldr	r3, [r5, #0]
 8006d96:	b103      	cbz	r3, 8006d9a <_sbrk_r+0x1a>
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
 8006d9c:	20004194 	.word	0x20004194

08006da0 <__malloc_lock>:
 8006da0:	4801      	ldr	r0, [pc, #4]	; (8006da8 <__malloc_lock+0x8>)
 8006da2:	f000 b811 	b.w	8006dc8 <__retarget_lock_acquire_recursive>
 8006da6:	bf00      	nop
 8006da8:	20004198 	.word	0x20004198

08006dac <__malloc_unlock>:
 8006dac:	4801      	ldr	r0, [pc, #4]	; (8006db4 <__malloc_unlock+0x8>)
 8006dae:	f000 b80c 	b.w	8006dca <__retarget_lock_release_recursive>
 8006db2:	bf00      	nop
 8006db4:	20004198 	.word	0x20004198

08006db8 <_malloc_usable_size_r>:
 8006db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dbc:	1f18      	subs	r0, r3, #4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	bfbc      	itt	lt
 8006dc2:	580b      	ldrlt	r3, [r1, r0]
 8006dc4:	18c0      	addlt	r0, r0, r3
 8006dc6:	4770      	bx	lr

08006dc8 <__retarget_lock_acquire_recursive>:
 8006dc8:	4770      	bx	lr

08006dca <__retarget_lock_release_recursive>:
 8006dca:	4770      	bx	lr

08006dcc <_init>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	bf00      	nop
 8006dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd2:	bc08      	pop	{r3}
 8006dd4:	469e      	mov	lr, r3
 8006dd6:	4770      	bx	lr

08006dd8 <_fini>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	bf00      	nop
 8006ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dde:	bc08      	pop	{r3}
 8006de0:	469e      	mov	lr, r3
 8006de2:	4770      	bx	lr
